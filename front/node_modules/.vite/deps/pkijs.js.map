{
  "version": 3,
  "sources": ["../../pkijs/build/index.es.js", "../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/_md.ts", "../../@noble/hashes/src/legacy.ts", "../../@noble/hashes/src/sha1.ts", "../../@noble/hashes/src/_u64.ts", "../../@noble/hashes/src/sha2.ts", "../../@noble/hashes/src/sha256.ts", "../../@noble/hashes/src/sha512.ts"],
  "sourcesContent": ["/*!\n * Copyright (c) 2014, GlobalSign\n * Copyright (c) 2015-2019, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the {organization} nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as asn1js from 'asn1js';\nimport * as pvtsutils from 'pvtsutils';\nimport { BufferSourceConverter } from 'pvtsutils';\nimport * as pvutils from 'pvutils';\nimport * as bs from 'bytestreamjs';\nimport { sha1 } from '@noble/hashes/sha1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512, sha384 } from '@noble/hashes/sha512';\n\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_STRING = \"\";\n\nclass ArgumentError extends TypeError {\n    constructor() {\n        super(...arguments);\n        this.name = ArgumentError.NAME;\n    }\n    static isType(value, type) {\n        if (typeof type === \"string\") {\n            if (type === \"Array\" && Array.isArray(value)) {\n                return true;\n            }\n            else if (type === \"ArrayBuffer\" && value instanceof ArrayBuffer) {\n                return true;\n            }\n            else if (type === \"ArrayBufferView\" && ArrayBuffer.isView(value)) {\n                return true;\n            }\n            else if (typeof value === type) {\n                return true;\n            }\n        }\n        else if (value instanceof type) {\n            return true;\n        }\n        return false;\n    }\n    static assert(value, name, ...types) {\n        for (const type of types) {\n            if (this.isType(value, type)) {\n                return;\n            }\n        }\n        const typeNames = types.map(o => o instanceof Function && \"name\" in o ? o.name : `${o}`);\n        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(\" or \")})` : typeNames[0]}`);\n    }\n}\nArgumentError.NAME = \"ArgumentError\";\n\nclass ParameterError extends TypeError {\n    static assert(...args) {\n        let target = null;\n        let params;\n        let fields;\n        if (typeof args[0] === \"string\") {\n            target = args[0];\n            params = args[1];\n            fields = args.slice(2);\n        }\n        else {\n            params = args[0];\n            fields = args.slice(1);\n        }\n        ArgumentError.assert(params, \"parameters\", \"object\");\n        for (const field of fields) {\n            const value = params[field];\n            if (value === undefined || value === null) {\n                throw new ParameterError(field, target);\n            }\n        }\n    }\n    static assertEmpty(value, name, target) {\n        if (value === undefined || value === null) {\n            throw new ParameterError(name, target);\n        }\n    }\n    constructor(field, target = null, message) {\n        super();\n        this.name = ParameterError.NAME;\n        this.field = field;\n        if (target) {\n            this.target = target;\n        }\n        if (message) {\n            this.message = message;\n        }\n        else {\n            this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;\n        }\n    }\n}\nParameterError.NAME = \"ParameterError\";\n\nclass AsnError extends Error {\n    static assertSchema(asn1, target) {\n        if (!asn1.verified) {\n            throw new Error(`Object's schema was not verified against input data for ${target}`);\n        }\n    }\n    static assert(asn, target) {\n        if (asn.offset === -1) {\n            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);\n        }\n    }\n    constructor(message) {\n        super(message);\n        this.name = \"AsnError\";\n    }\n}\n\nclass PkiObject {\n    static blockName() {\n        return this.CLASS_NAME;\n    }\n    static fromBER(raw) {\n        const asn1 = asn1js.fromBER(raw);\n        AsnError.assert(asn1, this.name);\n        try {\n            return new this({ schema: asn1.result });\n        }\n        catch (e) {\n            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);\n        }\n    }\n    static defaultValues(memberName) {\n        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);\n    }\n    static schema(parameters = {}) {\n        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);\n    }\n    get className() {\n        return this.constructor.CLASS_NAME;\n    }\n    toString(encoding = \"hex\") {\n        let schema;\n        try {\n            schema = this.toSchema();\n        }\n        catch {\n            schema = this.toSchema(true);\n        }\n        return pvtsutils.Convert.ToString(schema.toBER(), encoding);\n    }\n}\nPkiObject.CLASS_NAME = \"PkiObject\";\n\nfunction stringPrep(inputString) {\n    let isSpace = false;\n    let cutResult = EMPTY_STRING;\n    const result = inputString.trim();\n    for (let i = 0; i < result.length; i++) {\n        if (result.charCodeAt(i) === 32) {\n            if (isSpace === false)\n                isSpace = true;\n        }\n        else {\n            if (isSpace) {\n                cutResult += \" \";\n                isSpace = false;\n            }\n            cutResult += result[i];\n        }\n    }\n    return cutResult.toLowerCase();\n}\n\nconst TYPE$5 = \"type\";\nconst VALUE$6 = \"value\";\nclass AttributeTypeAndValue extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));\n        this.value = pvutils.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$5:\n                return EMPTY_STRING;\n            case VALUE$6:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.value || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            TYPE$5,\n            \"typeValue\"\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n            names: {\n                type: TYPE$5,\n                value: \"typeValue\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.value = asn1.result.typeValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.type }),\n                this.value\n            ]\n        }));\n    }\n    toJSON() {\n        const _object = {\n            type: this.type\n        };\n        if (Object.keys(this.value).length !== 0) {\n            _object.value = (this.value).toJSON();\n        }\n        else {\n            _object.value = this.value;\n        }\n        return _object;\n    }\n    isEqual(compareTo) {\n        const stringBlockNames = [\n            asn1js.Utf8String.blockName(),\n            asn1js.BmpString.blockName(),\n            asn1js.UniversalString.blockName(),\n            asn1js.NumericString.blockName(),\n            asn1js.PrintableString.blockName(),\n            asn1js.TeletexString.blockName(),\n            asn1js.VideotexString.blockName(),\n            asn1js.IA5String.blockName(),\n            asn1js.GraphicString.blockName(),\n            asn1js.VisibleString.blockName(),\n            asn1js.GeneralString.blockName(),\n            asn1js.CharacterString.blockName()\n        ];\n        if (compareTo instanceof ArrayBuffer) {\n            return pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);\n        }\n        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n            if (this.type !== compareTo.type)\n                return false;\n            const isStringPair = [false, false];\n            const thisName = this.value.constructor.blockName();\n            for (const name of stringBlockNames) {\n                if (thisName === name) {\n                    isStringPair[0] = true;\n                }\n                if (compareTo.value.constructor.blockName() === name) {\n                    isStringPair[1] = true;\n                }\n            }\n            if (isStringPair[0] !== isStringPair[1]) {\n                return false;\n            }\n            const isString = (isStringPair[0] && isStringPair[1]);\n            if (isString) {\n                const value1 = stringPrep(this.value.valueBlock.value);\n                const value2 = stringPrep(compareTo.value.valueBlock.value);\n                if (value1.localeCompare(value2) !== 0)\n                    return false;\n            }\n            else {\n                if (!pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nAttributeTypeAndValue.CLASS_NAME = \"AttributeTypeAndValue\";\n\nconst TYPE_AND_VALUES = \"typesAndValues\";\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\nconst RDN = \"RDN\";\nclass RelativeDistinguishedNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.typesAndValues = pvutils.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));\n        this.valueBeforeDecode = pvutils.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return [];\n            case VALUE_BEFORE_DECODE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return (memberValue.length === 0);\n            case VALUE_BEFORE_DECODE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.repeatedSequence || EMPTY_STRING),\n                    value: new asn1js.Set({\n                        value: [\n                            new asn1js.Repeated({\n                                name: (names.repeatedSet || EMPTY_STRING),\n                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            RDN,\n            TYPE_AND_VALUES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n            names: {\n                blockName: RDN,\n                repeatedSet: TYPE_AND_VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (TYPE_AND_VALUES in asn1.result) {\n            this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\n        }\n        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;\n    }\n    toSchema() {\n        if (this.valueBeforeDecode.byteLength === 0) {\n            return (new asn1js.Sequence({\n                value: [new asn1js.Set({\n                        value: Array.from(this.typesAndValues, o => o.toSchema())\n                    })]\n            }));\n        }\n        const asn1 = asn1js.fromBER(this.valueBeforeDecode);\n        AsnError.assert(asn1, \"RelativeDistinguishedNames\");\n        if (!(asn1.result instanceof asn1js.Sequence)) {\n            throw new Error(\"ASN.1 result should be SEQUENCE\");\n        }\n        return asn1.result;\n    }\n    toJSON() {\n        return {\n            typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())\n        };\n    }\n    isEqual(compareTo) {\n        if (compareTo instanceof RelativeDistinguishedNames) {\n            if (this.typesAndValues.length !== compareTo.typesAndValues.length)\n                return false;\n            for (const [index, typeAndValue] of this.typesAndValues.entries()) {\n                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\n                    return false;\n            }\n            return true;\n        }\n        if (compareTo instanceof ArrayBuffer) {\n            return pvutils.isEqualBuffer(this.valueBeforeDecode, compareTo);\n        }\n        return false;\n    }\n}\nRelativeDistinguishedNames.CLASS_NAME = \"RelativeDistinguishedNames\";\n\nconst TYPE$4 = \"type\";\nconst VALUE$5 = \"value\";\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        optional,\n        value: [\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 1\n                },\n                name: (names.country_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 2\n                },\n                name: (names.administration_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                name: (names.network_address || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                name: (names.terminal_identifier || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                name: (names.private_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                name: (names.organization_name || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                name: (names.numeric_user_identifier || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                name: (names.personal_name || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                value: [\n                    new asn1js.Primitive({\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 0\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 1\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 2\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 3\n                        },\n                        isHexOnly: true\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                name: (names.organizational_unit_names || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 6\n                },\n                value: [\n                    new asn1js.Repeated({\n                        value: new asn1js.PrintableString()\n                    })\n                ]\n            })\n        ]\n    }));\n}\nfunction builtInDomainDefinedAttributes(optional = false) {\n    return (new asn1js.Sequence({\n        optional,\n        value: [\n            new asn1js.PrintableString(),\n            new asn1js.PrintableString()\n        ]\n    }));\n}\nfunction extensionAttributes(optional = false) {\n    return (new asn1js.Set({\n        optional,\n        value: [\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [new asn1js.Any()]\n            })\n        ]\n    }));\n}\nclass GeneralName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));\n        this.value = pvutils.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$4:\n                return 9;\n            case VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$4:\n                return (memberValue === GeneralName.defaultValues(memberName));\n            case VALUE$5:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js.ObjectIdentifier(),\n                        new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [new asn1js.Any()]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        builtInStandardAttributes((names.builtInStandardAttributes || {}), false),\n                        builtInDomainDefinedAttributes(true),\n                        extensionAttributes(true)\n                    ]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [RelativeDistinguishedNames.schema(names.directoryName || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js.Constructed({\n                            optional: true,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js.Choice({\n                                    value: [\n                                        new asn1js.TeletexString(),\n                                        new asn1js.PrintableString(),\n                                        new asn1js.UniversalString(),\n                                        new asn1js.Utf8String(),\n                                        new asn1js.BmpString()\n                                    ]\n                                })\n                            ]\n                        }),\n                        new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js.Choice({\n                                    value: [\n                                        new asn1js.TeletexString(),\n                                        new asn1js.PrintableString(),\n                                        new asn1js.UniversalString(),\n                                        new asn1js.Utf8String(),\n                                        new asn1js.BmpString()\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 6\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 7\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 8\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            \"blockName\",\n            \"otherName\",\n            \"rfc822Name\",\n            \"dNSName\",\n            \"x400Address\",\n            \"directoryName\",\n            \"ediPartyName\",\n            \"uniformResourceIdentifier\",\n            \"iPAddress\",\n            \"registeredID\"\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralName.schema({\n            names: {\n                blockName: \"blockName\",\n                otherName: \"otherName\",\n                rfc822Name: \"rfc822Name\",\n                dNSName: \"dNSName\",\n                x400Address: \"x400Address\",\n                directoryName: {\n                    names: {\n                        blockName: \"directoryName\"\n                    }\n                },\n                ediPartyName: \"ediPartyName\",\n                uniformResourceIdentifier: \"uniformResourceIdentifier\",\n                iPAddress: \"iPAddress\",\n                registeredID: \"registeredID\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.blockName.idBlock.tagNumber;\n        switch (this.type) {\n            case 0:\n                this.value = asn1.result.blockName;\n                break;\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 22;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName value\");\n                    this.value = asnValue.result.valueBlock.value;\n                }\n                break;\n            case 3:\n                this.value = asn1.result.blockName;\n                break;\n            case 4:\n                this.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\n                break;\n            case 5:\n                this.value = asn1.result.ediPartyName;\n                break;\n            case 7:\n                this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n                break;\n            case 8:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 6;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName registeredID\");\n                    this.value = asnValue.result.valueBlock.toString();\n                }\n                break;\n        }\n    }\n    toSchema() {\n        switch (this.type) {\n            case 0:\n            case 3:\n            case 5:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: this.type\n                    },\n                    value: [\n                        this.value\n                    ]\n                });\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = new asn1js.IA5String({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 4:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: [this.value.toSchema()]\n                });\n            case 7:\n                {\n                    const value = this.value;\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 8:\n                {\n                    const value = new asn1js.ObjectIdentifier({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            default:\n                return GeneralName.schema();\n        }\n    }\n    toJSON() {\n        const _object = {\n            type: this.type,\n            value: EMPTY_STRING\n        };\n        if ((typeof this.value) === \"string\")\n            _object.value = this.value;\n        else {\n            try {\n                _object.value = this.value.toJSON();\n            }\n            catch (ex) {\n            }\n        }\n        return _object;\n    }\n}\nGeneralName.CLASS_NAME = \"GeneralName\";\n\nconst ACCESS_METHOD = \"accessMethod\";\nconst ACCESS_LOCATION = \"accessLocation\";\nconst CLEAR_PROPS$1v = [\n    ACCESS_METHOD,\n    ACCESS_LOCATION,\n];\nclass AccessDescription extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessMethod = pvutils.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));\n        this.accessLocation = pvutils.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_METHOD:\n                return EMPTY_STRING;\n            case ACCESS_LOCATION:\n                return new GeneralName();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.accessMethod || EMPTY_STRING) }),\n                GeneralName.schema(names.accessLocation || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1v);\n        const asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({\n            names: {\n                accessMethod: ACCESS_METHOD,\n                accessLocation: {\n                    names: {\n                        blockName: ACCESS_LOCATION\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n        this.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.accessMethod }),\n                this.accessLocation.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            accessMethod: this.accessMethod,\n            accessLocation: this.accessLocation.toJSON()\n        };\n    }\n}\nAccessDescription.CLASS_NAME = \"AccessDescription\";\n\nconst SECONDS = \"seconds\";\nconst MILLIS = \"millis\";\nconst MICROS = \"micros\";\nclass Accuracy extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (SECONDS in parameters) {\n            this.seconds = pvutils.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));\n        }\n        if (MILLIS in parameters) {\n            this.millis = pvutils.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));\n        }\n        if (MICROS in parameters) {\n            this.micros = pvutils.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return (memberValue === Accuracy.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            value: [\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.seconds || EMPTY_STRING)\n                }),\n                new asn1js.Primitive({\n                    name: (names.millis || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.micros || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SECONDS,\n            MILLIS,\n            MICROS,\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({\n            names: {\n                seconds: SECONDS,\n                millis: MILLIS,\n                micros: MICROS,\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (\"seconds\" in asn1.result) {\n            this.seconds = asn1.result.seconds.valueBlock.valueDec;\n        }\n        if (\"millis\" in asn1.result) {\n            const intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\n            this.millis = intMillis.valueBlock.valueDec;\n        }\n        if (\"micros\" in asn1.result) {\n            const intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\n            this.micros = intMicros.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.seconds !== undefined)\n            outputArray.push(new asn1js.Integer({ value: this.seconds }));\n        if (this.millis !== undefined) {\n            const intMillis = new asn1js.Integer({ value: this.millis });\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: intMillis.valueBlock.valueHexView\n            }));\n        }\n        if (this.micros !== undefined) {\n            const intMicros = new asn1js.Integer({ value: this.micros });\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: intMicros.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const _object = {};\n        if (this.seconds !== undefined)\n            _object.seconds = this.seconds;\n        if (this.millis !== undefined)\n            _object.millis = this.millis;\n        if (this.micros !== undefined)\n            _object.micros = this.micros;\n        return _object;\n    }\n}\nAccuracy.CLASS_NAME = \"Accuracy\";\n\nconst ALGORITHM_ID = \"algorithmId\";\nconst ALGORITHM_PARAMS = \"algorithmParams\";\nconst ALGORITHM$2 = \"algorithm\";\nconst PARAMS = \"params\";\nconst CLEAR_PROPS$1u = [\n    ALGORITHM$2,\n    PARAMS\n];\nclass AlgorithmIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithmId = pvutils.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));\n        if (ALGORITHM_PARAMS in parameters) {\n            this.algorithmParams = pvutils.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return EMPTY_STRING;\n            case ALGORITHM_PARAMS:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return (memberValue === EMPTY_STRING);\n            case ALGORITHM_PARAMS:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || false),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.algorithmParams || EMPTY_STRING), optional: true })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1u);\n        const asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n            names: {\n                algorithmIdentifier: ALGORITHM$2,\n                algorithmParams: PARAMS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n        if (PARAMS in asn1.result) {\n            this.algorithmParams = asn1.result.params;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\n            outputArray.push(this.algorithmParams);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            algorithmId: this.algorithmId\n        };\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\n            object.algorithmParams = this.algorithmParams.toJSON();\n        }\n        return object;\n    }\n    isEqual(algorithmIdentifier) {\n        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {\n            return false;\n        }\n        if (this.algorithmId !== algorithmIdentifier.algorithmId) {\n            return false;\n        }\n        if (this.algorithmParams) {\n            if (algorithmIdentifier.algorithmParams) {\n                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n            }\n            return false;\n        }\n        if (algorithmIdentifier.algorithmParams) {\n            return false;\n        }\n        return true;\n    }\n}\nAlgorithmIdentifier.CLASS_NAME = \"AlgorithmIdentifier\";\n\nconst ALT_NAMES = \"altNames\";\nconst CLEAR_PROPS$1t = [\n    ALT_NAMES\n];\nclass AltName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.altNames = pvutils.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALT_NAMES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.altNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1t);\n        const asn1 = asn1js.compareSchema(schema, schema, AltName.schema({\n            names: {\n                altNames: ALT_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ALT_NAMES in asn1.result) {\n            this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.altNames, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            altNames: Array.from(this.altNames, o => o.toJSON())\n        };\n    }\n}\nAltName.CLASS_NAME = \"AltName\";\n\nconst TYPE$3 = \"type\";\nconst VALUES$1 = \"values\";\nconst CLEAR_PROPS$1s = [\n    TYPE$3,\n    VALUES$1\n];\nclass Attribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));\n        this.values = pvutils.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$3:\n                return EMPTY_STRING;\n            case VALUES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$3:\n                return (memberValue === EMPTY_STRING);\n            case VALUES$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js.Set({\n                    name: (names.setName || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.values || EMPTY_STRING),\n                            value: new asn1js.Any()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1s);\n        const asn1 = asn1js.compareSchema(schema, schema, Attribute.schema({\n            names: {\n                type: TYPE$3,\n                values: VALUES$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.values = asn1.result.values;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.type }),\n                new asn1js.Set({\n                    value: this.values\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nAttribute.CLASS_NAME = \"Attribute\";\n\nconst NOT_BEFORE_TIME = \"notBeforeTime\";\nconst NOT_AFTER_TIME = \"notAfterTime\";\nconst CLEAR_PROPS$1r = [\n    NOT_BEFORE_TIME,\n    NOT_AFTER_TIME,\n];\nclass AttCertValidityPeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.notBeforeTime = pvutils.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));\n        this.notAfterTime = pvutils.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE_TIME:\n            case NOT_AFTER_TIME:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.GeneralizedTime({ name: (names.notBeforeTime || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({ name: (names.notAfterTime || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1r);\n        const asn1 = asn1js.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n            names: {\n                notBeforeTime: NOT_BEFORE_TIME,\n                notAfterTime: NOT_AFTER_TIME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n        this.notAfterTime = asn1.result.notAfterTime.toDate();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\n                new asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            notBeforeTime: this.notBeforeTime,\n            notAfterTime: this.notAfterTime\n        };\n    }\n}\nAttCertValidityPeriod.CLASS_NAME = \"AttCertValidityPeriod\";\n\nconst NAMES = \"names\";\nconst GENERAL_NAMES = \"generalNames\";\nclass GeneralNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.names = pvutils.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case \"names\":\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, NAMES, {});\n        return (new asn1js.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.generalNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            NAMES,\n            GENERAL_NAMES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralNames.schema({\n            names: {\n                blockName: NAMES,\n                generalNames: GENERAL_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.names, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            names: Array.from(this.names, o => o.toJSON())\n        };\n    }\n}\nGeneralNames.CLASS_NAME = \"GeneralNames\";\n\nconst id_SubjectDirectoryAttributes = \"2.5.29.9\";\nconst id_SubjectKeyIdentifier = \"2.5.29.14\";\nconst id_KeyUsage = \"2.5.29.15\";\nconst id_PrivateKeyUsagePeriod = \"2.5.29.16\";\nconst id_SubjectAltName = \"2.5.29.17\";\nconst id_IssuerAltName = \"2.5.29.18\";\nconst id_BasicConstraints = \"2.5.29.19\";\nconst id_CRLNumber = \"2.5.29.20\";\nconst id_BaseCRLNumber = \"2.5.29.27\";\nconst id_CRLReason = \"2.5.29.21\";\nconst id_InvalidityDate = \"2.5.29.24\";\nconst id_IssuingDistributionPoint = \"2.5.29.28\";\nconst id_CertificateIssuer = \"2.5.29.29\";\nconst id_NameConstraints = \"2.5.29.30\";\nconst id_CRLDistributionPoints = \"2.5.29.31\";\nconst id_FreshestCRL = \"2.5.29.46\";\nconst id_CertificatePolicies = \"2.5.29.32\";\nconst id_AnyPolicy = \"2.5.29.32.0\";\nconst id_MicrosoftAppPolicies = \"1.3.6.1.4.1.311.21.10\";\nconst id_PolicyMappings = \"2.5.29.33\";\nconst id_AuthorityKeyIdentifier = \"2.5.29.35\";\nconst id_PolicyConstraints = \"2.5.29.36\";\nconst id_ExtKeyUsage = \"2.5.29.37\";\nconst id_InhibitAnyPolicy = \"2.5.29.54\";\nconst id_AuthorityInfoAccess = \"1.3.6.1.5.5.7.1.1\";\nconst id_SubjectInfoAccess = \"1.3.6.1.5.5.7.1.11\";\nconst id_SignedCertificateTimestampList = \"1.3.6.1.4.1.11129.2.4.2\";\nconst id_MicrosoftCertTemplateV1 = \"1.3.6.1.4.1.311.20.2\";\nconst id_MicrosoftPrevCaCertHash = \"1.3.6.1.4.1.311.21.2\";\nconst id_MicrosoftCertTemplateV2 = \"1.3.6.1.4.1.311.21.7\";\nconst id_MicrosoftCaVersion = \"1.3.6.1.4.1.311.21.1\";\nconst id_QCStatements = \"1.3.6.1.5.5.7.1.3\";\nconst id_ContentType_Data = \"1.2.840.113549.1.7.1\";\nconst id_ContentType_SignedData = \"1.2.840.113549.1.7.2\";\nconst id_ContentType_EnvelopedData = \"1.2.840.113549.1.7.3\";\nconst id_ContentType_EncryptedData = \"1.2.840.113549.1.7.6\";\nconst id_eContentType_TSTInfo = \"1.2.840.113549.1.9.16.1.4\";\nconst id_CertBag_X509Certificate = \"1.2.840.113549.1.9.22.1\";\nconst id_CertBag_SDSICertificate = \"1.2.840.113549.1.9.22.2\";\nconst id_CertBag_AttributeCertificate = \"1.2.840.113549.1.9.22.3\";\nconst id_CRLBag_X509CRL = \"1.2.840.113549.1.9.23.1\";\nconst id_pkix = \"1.3.6.1.5.5.7\";\nconst id_ad = `${id_pkix}.48`;\nconst id_PKIX_OCSP_Basic = `${id_ad}.1.1`;\nconst id_ad_caIssuers = `${id_ad}.2`;\nconst id_ad_ocsp = `${id_ad}.1`;\nconst id_sha1 = \"1.3.14.3.2.26\";\nconst id_sha256 = \"2.16.840.1.101.3.4.2.1\";\nconst id_sha384 = \"2.16.840.1.101.3.4.2.2\";\nconst id_sha512 = \"2.16.840.1.101.3.4.2.3\";\n\nconst KEY_IDENTIFIER$1 = \"keyIdentifier\";\nconst AUTHORITY_CERT_ISSUER = \"authorityCertIssuer\";\nconst AUTHORITY_CERT_SERIAL_NUMBER = \"authorityCertSerialNumber\";\nconst CLEAR_PROPS$1q = [\n    KEY_IDENTIFIER$1,\n    AUTHORITY_CERT_ISSUER,\n    AUTHORITY_CERT_SERIAL_NUMBER,\n];\nclass AuthorityKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (KEY_IDENTIFIER$1 in parameters) {\n            this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));\n        }\n        if (AUTHORITY_CERT_ISSUER in parameters) {\n            this.authorityCertIssuer = pvutils.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));\n        }\n        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {\n            this.authorityCertSerialNumber = pvutils.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER$1:\n                return new asn1js.OctetString();\n            case AUTHORITY_CERT_ISSUER:\n                return [];\n            case AUTHORITY_CERT_SERIAL_NUMBER:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.keyIdentifier || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.authorityCertIssuer || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.authorityCertSerialNumber || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1q);\n        const asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER$1,\n                authorityCertIssuer: AUTHORITY_CERT_ISSUER,\n                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (KEY_IDENTIFIER$1 in asn1.result)\n            this.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\n        if (AUTHORITY_CERT_ISSUER in asn1.result)\n            this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({ schema: o }));\n        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result)\n            this.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.keyIdentifier) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.keyIdentifier.valueBlock.valueHexView\n            }));\n        }\n        if (this.authorityCertIssuer) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.authorityCertIssuer, o => o.toSchema())\n            }));\n        }\n        if (this.authorityCertSerialNumber) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.keyIdentifier) {\n            object.keyIdentifier = this.keyIdentifier.toJSON();\n        }\n        if (this.authorityCertIssuer) {\n            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());\n        }\n        if (this.authorityCertSerialNumber) {\n            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n        }\n        return object;\n    }\n}\nAuthorityKeyIdentifier.CLASS_NAME = \"AuthorityKeyIdentifier\";\n\nconst PATH_LENGTH_CONSTRAINT = \"pathLenConstraint\";\nconst CA = \"cA\";\nclass BasicConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.cA = pvutils.getParametersValue(parameters, CA, false);\n        if (PATH_LENGTH_CONSTRAINT in parameters) {\n            this.pathLenConstraint = pvutils.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CA:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Boolean({\n                    optional: true,\n                    name: (names.cA || EMPTY_STRING)\n                }),\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.pathLenConstraint || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            CA,\n            PATH_LENGTH_CONSTRAINT\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\n            names: {\n                cA: CA,\n                pathLenConstraint: PATH_LENGTH_CONSTRAINT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CA in asn1.result) {\n            this.cA = asn1.result.cA.valueBlock.value;\n        }\n        if (PATH_LENGTH_CONSTRAINT in asn1.result) {\n            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {\n                this.pathLenConstraint = asn1.result.pathLenConstraint;\n            }\n            else {\n                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.cA !== BasicConstraints.defaultValues(CA))\n            outputArray.push(new asn1js.Boolean({ value: this.cA }));\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\n                outputArray.push(this.pathLenConstraint);\n            }\n            else {\n                outputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\n            }\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.cA !== BasicConstraints.defaultValues(CA)) {\n            object.cA = this.cA;\n        }\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\n                object.pathLenConstraint = this.pathLenConstraint.toJSON();\n            }\n            else {\n                object.pathLenConstraint = this.pathLenConstraint;\n            }\n        }\n        return object;\n    }\n}\nBasicConstraints.CLASS_NAME = \"BasicConstraints\";\n\nconst CERTIFICATE_INDEX = \"certificateIndex\";\nconst KEY_INDEX = \"keyIndex\";\nclass CAVersion extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificateIndex = pvutils.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));\n        this.keyIndex = pvutils.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_INDEX:\n            case KEY_INDEX:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return (new asn1js.Integer());\n    }\n    fromSchema(schema) {\n        if (schema.constructor.blockName() !== asn1js.Integer.blockName()) {\n            throw new Error(\"Object's schema was not verified against input data for CAVersion\");\n        }\n        let value = schema.valueBlock.valueHex.slice(0);\n        const valueView = new Uint8Array(value);\n        switch (true) {\n            case (value.byteLength < 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView, 4 - value.byteLength);\n                    value = tempValue.slice(0);\n                }\n                break;\n            case (value.byteLength > 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView.slice(0, 4));\n                    value = tempValue.slice(0);\n                }\n                break;\n        }\n        const keyIndexBuffer = value.slice(0, 2);\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        let temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        const keyIndexView16 = new Uint16Array(keyIndexBuffer);\n        this.keyIndex = keyIndexView16[0];\n        const certificateIndexBuffer = value.slice(2);\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n        this.certificateIndex = certificateIndexView16[0];\n    }\n    toSchema() {\n        const certificateIndexBuffer = new ArrayBuffer(2);\n        const certificateIndexView = new Uint16Array(certificateIndexBuffer);\n        certificateIndexView[0] = this.certificateIndex;\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        let temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const keyIndexBuffer = new ArrayBuffer(2);\n        const keyIndexView = new Uint16Array(keyIndexBuffer);\n        keyIndexView[0] = this.keyIndex;\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        return (new asn1js.Integer({\n            valueHex: pvutils.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n        }));\n    }\n    toJSON() {\n        return {\n            certificateIndex: this.certificateIndex,\n            keyIndex: this.keyIndex\n        };\n    }\n}\nCAVersion.CLASS_NAME = \"CAVersion\";\n\nconst POLICY_QUALIFIER_ID = \"policyQualifierId\";\nconst QUALIFIER = \"qualifier\";\nconst CLEAR_PROPS$1p = [\n    POLICY_QUALIFIER_ID,\n    QUALIFIER\n];\nclass PolicyQualifierInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyQualifierId = pvutils.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));\n        this.qualifier = pvutils.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_QUALIFIER_ID:\n                return EMPTY_STRING;\n            case QUALIFIER:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.policyQualifierId || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.qualifier || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1p);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n            names: {\n                policyQualifierId: POLICY_QUALIFIER_ID,\n                qualifier: QUALIFIER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n        this.qualifier = asn1.result.qualifier;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\n                this.qualifier\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            policyQualifierId: this.policyQualifierId,\n            qualifier: this.qualifier.toJSON()\n        };\n    }\n}\nPolicyQualifierInfo.CLASS_NAME = \"PolicyQualifierInfo\";\n\nconst POLICY_IDENTIFIER = \"policyIdentifier\";\nconst POLICY_QUALIFIERS = \"policyQualifiers\";\nconst CLEAR_PROPS$1o = [\n    POLICY_IDENTIFIER,\n    POLICY_QUALIFIERS\n];\nclass PolicyInformation extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyIdentifier = pvutils.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));\n        if (POLICY_QUALIFIERS in parameters) {\n            this.policyQualifiers = pvutils.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_IDENTIFIER:\n                return EMPTY_STRING;\n            case POLICY_QUALIFIERS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.policyIdentifier || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.policyQualifiers || EMPTY_STRING),\n                            value: PolicyQualifierInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1o);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\n            names: {\n                policyIdentifier: POLICY_IDENTIFIER,\n                policyQualifiers: POLICY_QUALIFIERS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n        if (POLICY_QUALIFIERS in asn1.result) {\n            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\n        if (this.policyQualifiers) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.policyQualifiers, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            policyIdentifier: this.policyIdentifier\n        };\n        if (this.policyQualifiers)\n            res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());\n        return res;\n    }\n}\nPolicyInformation.CLASS_NAME = \"PolicyInformation\";\n\nconst CERTIFICATE_POLICIES = \"certificatePolicies\";\nconst CLEAR_PROPS$1n = [\n    CERTIFICATE_POLICIES,\n];\nclass CertificatePolicies extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificatePolicies = pvutils.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_POLICIES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.certificatePolicies || EMPTY_STRING),\n                    value: PolicyInformation.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1n);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({\n            names: {\n                certificatePolicies: CERTIFICATE_POLICIES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.certificatePolicies, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())\n        };\n    }\n}\nCertificatePolicies.CLASS_NAME = \"CertificatePolicies\";\n\nconst TEMPLATE_ID = \"templateID\";\nconst TEMPLATE_MAJOR_VERSION = \"templateMajorVersion\";\nconst TEMPLATE_MINOR_VERSION = \"templateMinorVersion\";\nconst CLEAR_PROPS$1m = [\n    TEMPLATE_ID,\n    TEMPLATE_MAJOR_VERSION,\n    TEMPLATE_MINOR_VERSION\n];\nclass CertificateTemplate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.templateID = pvutils.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));\n        if (TEMPLATE_MAJOR_VERSION in parameters) {\n            this.templateMajorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));\n        }\n        if (TEMPLATE_MINOR_VERSION in parameters) {\n            this.templateMinorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TEMPLATE_ID:\n                return EMPTY_STRING;\n            case TEMPLATE_MAJOR_VERSION:\n            case TEMPLATE_MINOR_VERSION:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.templateID || EMPTY_STRING) }),\n                new asn1js.Integer({\n                    name: (names.templateMajorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.templateMinorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1m);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateTemplate.schema({\n            names: {\n                templateID: TEMPLATE_ID,\n                templateMajorVersion: TEMPLATE_MAJOR_VERSION,\n                templateMinorVersion: TEMPLATE_MINOR_VERSION\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.templateID = asn1.result.templateID.valueBlock.toString();\n        if (TEMPLATE_MAJOR_VERSION in asn1.result) {\n            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n        }\n        if (TEMPLATE_MINOR_VERSION in asn1.result) {\n            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\n        if (TEMPLATE_MAJOR_VERSION in this) {\n            outputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\n        }\n        if (TEMPLATE_MINOR_VERSION in this) {\n            outputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            templateID: this.templateID\n        };\n        if (TEMPLATE_MAJOR_VERSION in this)\n            res.templateMajorVersion = this.templateMajorVersion;\n        if (TEMPLATE_MINOR_VERSION in this)\n            res.templateMinorVersion = this.templateMinorVersion;\n        return res;\n    }\n}\n\nconst DISTRIBUTION_POINT$1 = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES$1 = \"distributionPointNames\";\nconst REASONS = \"reasons\";\nconst CRL_ISSUER = \"cRLIssuer\";\nconst CRL_ISSUER_NAMES = \"cRLIssuerNames\";\nconst CLEAR_PROPS$1l = [\n    DISTRIBUTION_POINT$1,\n    DISTRIBUTION_POINT_NAMES$1,\n    REASONS,\n    CRL_ISSUER,\n    CRL_ISSUER_NAMES,\n];\nclass DistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT$1 in parameters) {\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));\n        }\n        if (REASONS in parameters) {\n            this.reasons = pvutils.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));\n        }\n        if (CRL_ISSUER in parameters) {\n            this.cRLIssuer = pvutils.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT$1:\n                return [];\n            case REASONS:\n                return new asn1js.BitString();\n            case CRL_ISSUER:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.reasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.cRLIssuer || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.cRLIssuerNames || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1l);\n        const asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT$1,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,\n                reasons: REASONS,\n                cRLIssuer: CRL_ISSUER,\n                cRLIssuerNames: CRL_ISSUER_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT$1 in asn1.result) {\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {\n                this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n            }\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {\n                this.distributionPoint = new RelativeDistinguishedNames({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.distributionPoint.valueBlock.value\n                    })\n                });\n            }\n        }\n        if (REASONS in asn1.result) {\n            this.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\n        }\n        if (CRL_ISSUER in asn1.result) {\n            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let internalValue;\n            if (this.distributionPoint instanceof Array) {\n                internalValue = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                internalValue = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.distributionPoint.toSchema()]\n                });\n            }\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [internalValue]\n            }));\n        }\n        if (this.reasons) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.reasons.valueBlock.valueHexView\n            }));\n        }\n        if (this.cRLIssuer) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: Array.from(this.cRLIssuer, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                object.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.reasons) {\n            object.reasons = this.reasons.toJSON();\n        }\n        if (this.cRLIssuer) {\n            object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());\n        }\n        return object;\n    }\n}\nDistributionPoint.CLASS_NAME = \"DistributionPoint\";\n\nconst DISTRIBUTION_POINTS = \"distributionPoints\";\nconst CLEAR_PROPS$1k = [\n    DISTRIBUTION_POINTS\n];\nclass CRLDistributionPoints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.distributionPoints = pvutils.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.distributionPoints || EMPTY_STRING),\n                    value: DistributionPoint.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1k);\n        const asn1 = asn1js.compareSchema(schema, schema, CRLDistributionPoints.schema({\n            names: {\n                distributionPoints: DISTRIBUTION_POINTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.distributionPoints, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())\n        };\n    }\n}\nCRLDistributionPoints.CLASS_NAME = \"CRLDistributionPoints\";\n\nconst KEY_PURPOSES = \"keyPurposes\";\nconst CLEAR_PROPS$1j = [\n    KEY_PURPOSES,\n];\nclass ExtKeyUsage extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyPurposes = pvutils.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_PURPOSES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.keyPurposes || EMPTY_STRING),\n                    value: new asn1js.ObjectIdentifier()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1j);\n        const asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({\n            names: {\n                keyPurposes: KEY_PURPOSES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\n        }));\n    }\n    toJSON() {\n        return {\n            keyPurposes: Array.from(this.keyPurposes)\n        };\n    }\n}\nExtKeyUsage.CLASS_NAME = \"ExtKeyUsage\";\n\nconst ACCESS_DESCRIPTIONS = \"accessDescriptions\";\nclass InfoAccess extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessDescriptions = pvutils.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_DESCRIPTIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.accessDescriptions || EMPTY_STRING),\n                    value: AccessDescription.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            ACCESS_DESCRIPTIONS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, InfoAccess.schema({\n            names: {\n                accessDescriptions: ACCESS_DESCRIPTIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.accessDescriptions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())\n        };\n    }\n}\nInfoAccess.CLASS_NAME = \"InfoAccess\";\n\nconst DISTRIBUTION_POINT = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES = \"distributionPointNames\";\nconst ONLY_CONTAINS_USER_CERTS = \"onlyContainsUserCerts\";\nconst ONLY_CONTAINS_CA_CERTS = \"onlyContainsCACerts\";\nconst ONLY_SOME_REASON = \"onlySomeReasons\";\nconst INDIRECT_CRL = \"indirectCRL\";\nconst ONLY_CONTAINS_ATTRIBUTE_CERTS = \"onlyContainsAttributeCerts\";\nconst CLEAR_PROPS$1i = [\n    DISTRIBUTION_POINT,\n    DISTRIBUTION_POINT_NAMES,\n    ONLY_CONTAINS_USER_CERTS,\n    ONLY_CONTAINS_CA_CERTS,\n    ONLY_SOME_REASON,\n    INDIRECT_CRL,\n    ONLY_CONTAINS_ATTRIBUTE_CERTS,\n];\nclass IssuingDistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT in parameters) {\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));\n        }\n        this.onlyContainsUserCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));\n        this.onlyContainsCACerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));\n        if (ONLY_SOME_REASON in parameters) {\n            this.onlySomeReasons = pvutils.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));\n        }\n        this.indirectCRL = pvutils.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));\n        this.onlyContainsAttributeCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT:\n                return [];\n            case ONLY_CONTAINS_USER_CERTS:\n                return false;\n            case ONLY_CONTAINS_CA_CERTS:\n                return false;\n            case ONLY_SOME_REASON:\n                return 0;\n            case INDIRECT_CRL:\n                return false;\n            case ONLY_CONTAINS_ATTRIBUTE_CERTS:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsUserCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsCACerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlySomeReasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.indirectCRL || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsAttributeCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1i);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES,\n                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,\n                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,\n                onlySomeReasons: ONLY_SOME_REASON,\n                indirectCRL: INDIRECT_CRL,\n                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT in asn1.result) {\n            switch (true) {\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 0):\n                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n                    break;\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 1):\n                    {\n                        this.distributionPoint = new RelativeDistinguishedNames({\n                            schema: new asn1js.Sequence({\n                                value: asn1.result.distributionPoint.valueBlock.value\n                            })\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n            }\n        }\n        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n            this.onlyContainsCACerts = (view[0] !== 0x00);\n        }\n        if (ONLY_SOME_REASON in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n            this.onlySomeReasons = view[0];\n        }\n        if (INDIRECT_CRL in asn1.result) {\n            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n            this.indirectCRL = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let value;\n            if (this.distributionPoint instanceof Array) {\n                value = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                value = this.distributionPoint.toSchema();\n                value.idBlock.tagClass = 3;\n                value.idBlock.tagNumber = 1;\n            }\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [value]\n            }));\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlySomeReasons !== undefined) {\n            const buffer = new ArrayBuffer(1);\n            const view = new Uint8Array(buffer);\n            view[0] = this.onlySomeReasons;\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                valueHex: buffer\n            }));\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const obj = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                obj.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            obj.onlyContainsCACerts = this.onlyContainsCACerts;\n        }\n        if (ONLY_SOME_REASON in this) {\n            obj.onlySomeReasons = this.onlySomeReasons;\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            obj.indirectCRL = this.indirectCRL;\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n        }\n        return obj;\n    }\n}\nIssuingDistributionPoint.CLASS_NAME = \"IssuingDistributionPoint\";\n\nconst BASE = \"base\";\nconst MINIMUM = \"minimum\";\nconst MAXIMUM = \"maximum\";\nconst CLEAR_PROPS$1h = [\n    BASE,\n    MINIMUM,\n    MAXIMUM\n];\nclass GeneralSubtree extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.base = pvutils.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));\n        this.minimum = pvutils.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));\n        if (MAXIMUM in parameters) {\n            this.maximum = pvutils.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE:\n                return new GeneralName();\n            case MINIMUM:\n                return 0;\n            case MAXIMUM:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralName.schema(names.base || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.minimum || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.Integer({ name: (names.maximum || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1h);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\n            names: {\n                base: {\n                    names: {\n                        blockName: BASE\n                    }\n                },\n                minimum: MINIMUM,\n                maximum: MAXIMUM\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.base = new GeneralName({ schema: asn1.result.base });\n        if (MINIMUM in asn1.result) {\n            if (asn1.result.minimum.valueBlock.isHexOnly)\n                this.minimum = asn1.result.minimum;\n            else\n                this.minimum = asn1.result.minimum.valueBlock.valueDec;\n        }\n        if (MAXIMUM in asn1.result) {\n            if (asn1.result.maximum.valueBlock.isHexOnly)\n                this.maximum = asn1.result.maximum;\n            else\n                this.maximum = asn1.result.maximum.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.base.toSchema());\n        if (this.minimum !== 0) {\n            let valueMinimum = 0;\n            if (this.minimum instanceof asn1js.Integer) {\n                valueMinimum = this.minimum;\n            }\n            else {\n                valueMinimum = new asn1js.Integer({ value: this.minimum });\n            }\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [valueMinimum]\n            }));\n        }\n        if (MAXIMUM in this) {\n            let valueMaximum = 0;\n            if (this.maximum instanceof asn1js.Integer) {\n                valueMaximum = this.maximum;\n            }\n            else {\n                valueMaximum = new asn1js.Integer({ value: this.maximum });\n            }\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [valueMaximum]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            base: this.base.toJSON()\n        };\n        if (this.minimum !== 0) {\n            if (typeof this.minimum === \"number\") {\n                res.minimum = this.minimum;\n            }\n            else {\n                res.minimum = this.minimum.toJSON();\n            }\n        }\n        if (this.maximum !== undefined) {\n            if (typeof this.maximum === \"number\") {\n                res.maximum = this.maximum;\n            }\n            else {\n                res.maximum = this.maximum.toJSON();\n            }\n        }\n        return res;\n    }\n}\nGeneralSubtree.CLASS_NAME = \"GeneralSubtree\";\n\nconst PERMITTED_SUBTREES = \"permittedSubtrees\";\nconst EXCLUDED_SUBTREES = \"excludedSubtrees\";\nconst CLEAR_PROPS$1g = [\n    PERMITTED_SUBTREES,\n    EXCLUDED_SUBTREES\n];\nclass NameConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (PERMITTED_SUBTREES in parameters) {\n            this.permittedSubtrees = pvutils.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));\n        }\n        if (EXCLUDED_SUBTREES in parameters) {\n            this.excludedSubtrees = pvutils.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PERMITTED_SUBTREES:\n            case EXCLUDED_SUBTREES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.permittedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.excludedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1g);\n        const asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n            names: {\n                permittedSubtrees: PERMITTED_SUBTREES,\n                excludedSubtrees: EXCLUDED_SUBTREES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (PERMITTED_SUBTREES in asn1.result)\n            this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n        if (EXCLUDED_SUBTREES in asn1.result)\n            this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.permittedSubtrees) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.permittedSubtrees, o => o.toSchema())\n            }));\n        }\n        if (this.excludedSubtrees) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.excludedSubtrees, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.permittedSubtrees) {\n            object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());\n        }\n        if (this.excludedSubtrees) {\n            object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());\n        }\n        return object;\n    }\n}\nNameConstraints.CLASS_NAME = \"NameConstraints\";\n\nconst REQUIRE_EXPLICIT_POLICY = \"requireExplicitPolicy\";\nconst INHIBIT_POLICY_MAPPING = \"inhibitPolicyMapping\";\nconst CLEAR_PROPS$1f = [\n    REQUIRE_EXPLICIT_POLICY,\n    INHIBIT_POLICY_MAPPING,\n];\nclass PolicyConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (REQUIRE_EXPLICIT_POLICY in parameters) {\n            this.requireExplicitPolicy = pvutils.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));\n        }\n        if (INHIBIT_POLICY_MAPPING in parameters) {\n            this.inhibitPolicyMapping = pvutils.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQUIRE_EXPLICIT_POLICY:\n                return 0;\n            case INHIBIT_POLICY_MAPPING:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.requireExplicitPolicy || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.inhibitPolicyMapping || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1f);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyConstraints.schema({\n            names: {\n                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,\n                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {\n            const field1 = asn1.result.requireExplicitPolicy;\n            field1.idBlock.tagClass = 1;\n            field1.idBlock.tagNumber = 2;\n            const ber1 = field1.toBER(false);\n            const int1 = asn1js.fromBER(ber1);\n            AsnError.assert(int1, \"Integer\");\n            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;\n        }\n        if (INHIBIT_POLICY_MAPPING in asn1.result) {\n            const field2 = asn1.result.inhibitPolicyMapping;\n            field2.idBlock.tagClass = 1;\n            field2.idBlock.tagNumber = 2;\n            const ber2 = field2.toBER(false);\n            const int2 = asn1js.fromBER(ber2);\n            AsnError.assert(int2, \"Integer\");\n            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            const int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });\n            int1.idBlock.tagClass = 3;\n            int1.idBlock.tagNumber = 0;\n            outputArray.push(int1);\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            const int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });\n            int2.idBlock.tagClass = 3;\n            int2.idBlock.tagNumber = 1;\n            outputArray.push(int2);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            res.requireExplicitPolicy = this.requireExplicitPolicy;\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            res.inhibitPolicyMapping = this.inhibitPolicyMapping;\n        }\n        return res;\n    }\n}\nPolicyConstraints.CLASS_NAME = \"PolicyConstraints\";\n\nconst ISSUER_DOMAIN_POLICY = \"issuerDomainPolicy\";\nconst SUBJECT_DOMAIN_POLICY = \"subjectDomainPolicy\";\nconst CLEAR_PROPS$1e = [\n    ISSUER_DOMAIN_POLICY,\n    SUBJECT_DOMAIN_POLICY\n];\nclass PolicyMapping extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuerDomainPolicy = pvutils.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));\n        this.subjectDomainPolicy = pvutils.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            case SUBJECT_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.issuerDomainPolicy || EMPTY_STRING) }),\n                new asn1js.ObjectIdentifier({ name: (names.subjectDomainPolicy || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1e);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({\n            names: {\n                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,\n                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }),\n                new asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuerDomainPolicy: this.issuerDomainPolicy,\n            subjectDomainPolicy: this.subjectDomainPolicy\n        };\n    }\n}\nPolicyMapping.CLASS_NAME = \"PolicyMapping\";\n\nconst MAPPINGS = \"mappings\";\nconst CLEAR_PROPS$1d = [\n    MAPPINGS,\n];\nclass PolicyMappings extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mappings = pvutils.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAPPINGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.mappings || EMPTY_STRING),\n                    value: PolicyMapping.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1d);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMappings.schema({\n            names: {\n                mappings: MAPPINGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.mappings, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            mappings: Array.from(this.mappings, o => o.toJSON())\n        };\n    }\n}\nPolicyMappings.CLASS_NAME = \"PolicyMappings\";\n\nconst NOT_BEFORE$1 = \"notBefore\";\nconst NOT_AFTER$1 = \"notAfter\";\nconst CLEAR_PROPS$1c = [\n    NOT_BEFORE$1,\n    NOT_AFTER$1\n];\nclass PrivateKeyUsagePeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (NOT_BEFORE$1 in parameters) {\n            this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));\n        }\n        if (NOT_AFTER$1 in parameters) {\n            this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE$1:\n                return new Date();\n            case NOT_AFTER$1:\n                return new Date();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.notBefore || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.notAfter || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1c);\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n            names: {\n                notBefore: NOT_BEFORE$1,\n                notAfter: NOT_AFTER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (NOT_BEFORE$1 in asn1.result) {\n            const localNotBefore = new asn1js.GeneralizedTime();\n            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n            this.notBefore = localNotBefore.toDate();\n        }\n        if (NOT_AFTER$1 in asn1.result) {\n            const localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\n            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n            this.notAfter = localNotAfter.toDate();\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (NOT_BEFORE$1 in this) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHexView\n            }));\n        }\n        if (NOT_AFTER$1 in this) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.notBefore) {\n            res.notBefore = this.notBefore;\n        }\n        if (this.notAfter) {\n            res.notAfter = this.notAfter;\n        }\n        return res;\n    }\n}\nPrivateKeyUsagePeriod.CLASS_NAME = \"PrivateKeyUsagePeriod\";\n\nconst ID = \"id\";\nconst TYPE$2 = \"type\";\nconst VALUES = \"values\";\nconst QC_STATEMENT_CLEAR_PROPS = [\n    ID,\n    TYPE$2\n];\nconst QC_STATEMENTS_CLEAR_PROPS = [\n    VALUES\n];\nclass QCStatement extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.id = pvutils.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));\n        if (TYPE$2 in parameters) {\n            this.type = pvutils.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ID:\n                return EMPTY_STRING;\n            case TYPE$2:\n                return new asn1js.Null();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ID:\n                return (memberValue === EMPTY_STRING);\n            case TYPE$2:\n                return (memberValue instanceof asn1js.Null);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || EMPTY_STRING) }),\n                new asn1js.Any({\n                    name: (names.type || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatement.schema({\n            names: {\n                id: ID,\n                type: TYPE$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.id = asn1.result.id.valueBlock.toString();\n        if (TYPE$2 in asn1.result)\n            this.type = asn1.result.type;\n    }\n    toSchema() {\n        const value = [\n            new asn1js.ObjectIdentifier({ value: this.id })\n        ];\n        if (TYPE$2 in this)\n            value.push(this.type);\n        return (new asn1js.Sequence({\n            value,\n        }));\n    }\n    toJSON() {\n        const object = {\n            id: this.id\n        };\n        if (this.type) {\n            object.type = this.type.toJSON();\n        }\n        return object;\n    }\n}\nQCStatement.CLASS_NAME = \"QCStatement\";\nclass QCStatements extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.values = pvutils.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VALUES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VALUES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.values || EMPTY_STRING),\n                    value: QCStatement.schema(names.value || {})\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatements.schema({\n            names: {\n                values: VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.values, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nQCStatements.CLASS_NAME = \"QCStatements\";\n\nvar _a;\nclass ECNamedCurves {\n    static register(name, id, size) {\n        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\n    }\n    static find(nameOrId) {\n        return this.namedCurves[nameOrId.toLowerCase()] || null;\n    }\n}\n_a = ECNamedCurves;\nECNamedCurves.namedCurves = {};\n(() => {\n    _a.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\n    _a.register(\"P-384\", \"1.3.132.0.34\", 48);\n    _a.register(\"P-521\", \"1.3.132.0.35\", 66);\n    _a.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\n    _a.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\n    _a.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\n})();\n\nconst X = \"x\";\nconst Y = \"y\";\nconst NAMED_CURVE$1 = \"namedCurve\";\nclass ECPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.x = pvutils.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));\n        this.y = pvutils.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));\n        this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return EMPTY_BUFFER;\n            case NAMED_CURVE$1:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return memberValue instanceof ArrayBuffer &&\n                    (pvutils.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\n            case NAMED_CURVE$1:\n                return typeof memberValue === \"string\" &&\n                    memberValue === ECPublicKey.defaultValues(memberName);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return new asn1js.RawData();\n    }\n    fromSchema(schema1) {\n        const view = BufferSourceConverter.toUint8Array(schema1);\n        if (view[0] !== 0x04) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        if (!namedCurve) {\n            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\n        }\n        const coordinateLength = namedCurve.size;\n        if (view.byteLength !== (coordinateLength * 2 + 1)) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        this.namedCurve = namedCurve.name;\n        this.x = view.slice(1, coordinateLength + 1).buffer;\n        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;\n    }\n    toSchema() {\n        return new asn1js.RawData({\n            data: pvutils.utilConcatBuf((new Uint8Array([0x04])).buffer, this.x, this.y)\n        });\n    }\n    toJSON() {\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        return {\n            crv: namedCurve ? namedCurve.name : this.namedCurve,\n            x: pvutils.toBase64(pvutils.arrayBufferToString(this.x), true, true, false),\n            y: pvutils.toBase64(pvutils.arrayBufferToString(this.y), true, true, false)\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"x\", \"y\");\n        let coordinateLength = 0;\n        const namedCurve = ECNamedCurves.find(json.crv);\n        if (namedCurve) {\n            this.namedCurve = namedCurve.id;\n            coordinateLength = namedCurve.size;\n        }\n        const xConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.x, true));\n        if (xConvertBuffer.byteLength < coordinateLength) {\n            this.x = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.x);\n            const convertBufferView = new Uint8Array(xConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.x = xConvertBuffer.slice(0, coordinateLength);\n        }\n        const yConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.y, true));\n        if (yConvertBuffer.byteLength < coordinateLength) {\n            this.y = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.y);\n            const convertBufferView = new Uint8Array(yConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.y = yConvertBuffer.slice(0, coordinateLength);\n        }\n    }\n}\nECPublicKey.CLASS_NAME = \"ECPublicKey\";\n\nconst MODULUS$1 = \"modulus\";\nconst PUBLIC_EXPONENT$1 = \"publicExponent\";\nconst CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];\nclass RSAPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MODULUS$1:\n                return new asn1js.Integer();\n            case PUBLIC_EXPONENT$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1b);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\n            names: {\n                modulus: MODULUS$1,\n                publicExponent: PUBLIC_EXPONENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.modulus.convertToDER(),\n                this.publicExponent\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\");\n        const array = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.n, true));\n        this.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, pvutils.nearestPowerOf2(array.byteLength))) });\n        this.publicExponent = new asn1js.Integer({ valueHex: pvutils.stringToArrayBuffer(pvutils.fromBase64(json.e, true)).slice(0, 3) });\n    }\n}\nRSAPublicKey.CLASS_NAME = \"RSAPublicKey\";\n\nconst ALGORITHM$1 = \"algorithm\";\nconst SUBJECT_PUBLIC_KEY = \"subjectPublicKey\";\nconst CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];\nclass PublicKeyInfo extends PkiObject {\n    get parsedKey() {\n        if (this._parsedKey === undefined) {\n            switch (this.algorithm.algorithmId) {\n                case \"1.2.840.10045.2.1\":\n                    if (\"algorithmParams\" in this.algorithm) {\n                        if (this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName()) {\n                            try {\n                                this._parsedKey = new ECPublicKey({\n                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n                                    schema: this.subjectPublicKey.valueBlock.valueHexView\n                                });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n                case \"1.2.840.113549.1.1.1\":\n                    {\n                        const publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHexView);\n                        if (publicKeyASN1.offset !== -1) {\n                            try {\n                                this._parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n            }\n            this._parsedKey || (this._parsedKey = null);\n        }\n        return this._parsedKey || undefined;\n    }\n    set parsedKey(value) {\n        this._parsedKey = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));\n        this.subjectPublicKey = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));\n        const parsedKey = pvutils.getParametersValue(parameters, \"parsedKey\", null);\n        if (parsedKey) {\n            this.parsedKey = parsedKey;\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SUBJECT_PUBLIC_KEY:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js.BitString({ name: (names.subjectPublicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1a);\n        const asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM$1\n                    }\n                },\n                subjectPublicKey: SUBJECT_PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.subjectPublicKey\n            ]\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            return {\n                algorithm: this.algorithm.toJSON(),\n                subjectPublicKey: this.subjectPublicKey.toJSON(),\n            };\n        }\n        const jwk = {};\n        switch (this.algorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n    async importKey(publicKey, crypto = getCrypto(true)) {\n        try {\n            if (!publicKey) {\n                throw new Error(\"Need to provide publicKey input parameter\");\n            }\n            const exportedKey = await crypto.exportKey(\"spki\", publicKey);\n            const asn1 = asn1js.fromBER(exportedKey);\n            try {\n                this.fromSchema(asn1.result);\n            }\n            catch (exception) {\n                throw new Error(\"Error during initializing object from schema\");\n            }\n        }\n        catch (e) {\n            const message = e instanceof Error ? e.message : `${e}`;\n            throw new Error(`Error during exporting public key: ${message}`);\n        }\n    }\n}\nPublicKeyInfo.CLASS_NAME = \"PublicKeyInfo\";\n\nconst VERSION$l = \"version\";\nconst PRIVATE_KEY$1 = \"privateKey\";\nconst NAMED_CURVE = \"namedCurve\";\nconst PUBLIC_KEY$1 = \"publicKey\";\nconst CLEAR_PROPS$19 = [\n    VERSION$l,\n    PRIVATE_KEY$1,\n    NAMED_CURVE,\n    PUBLIC_KEY$1\n];\nclass ECPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));\n        if (NAMED_CURVE in parameters) {\n            this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));\n        }\n        if (PUBLIC_KEY$1 in parameters) {\n            this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$l:\n                return 1;\n            case PRIVATE_KEY$1:\n                return new asn1js.OctetString();\n            case NAMED_CURVE:\n                return EMPTY_STRING;\n            case PUBLIC_KEY$1:\n                return new ECPublicKey();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$l:\n                return (memberValue === ECPrivateKey.defaultValues(memberName));\n            case PRIVATE_KEY$1:\n                return (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n            case NAMED_CURVE:\n                return (memberValue === EMPTY_STRING);\n            case PUBLIC_KEY$1:\n                return ((ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve)) &&\n                    (ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n                    (ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.ObjectIdentifier({ name: (names.namedCurve || EMPTY_STRING) })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$19);\n        const asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\n            names: {\n                version: VERSION$l,\n                privateKey: PRIVATE_KEY$1,\n                namedCurve: NAMED_CURVE,\n                publicKey: PUBLIC_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKey = asn1.result.privateKey;\n        if (NAMED_CURVE in asn1.result) {\n            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n        }\n        if (PUBLIC_KEY$1 in asn1.result) {\n            const publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n            if (NAMED_CURVE in this) {\n                publicKeyData.namedCurve = this.namedCurve;\n            }\n            this.publicKey = new ECPublicKey(publicKeyData);\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.privateKey\n        ];\n        if (this.namedCurve) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.ObjectIdentifier({ value: this.namedCurve })\n                ]\n            }));\n        }\n        if (this.publicKey) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [\n                    new asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n                ]\n            }));\n        }\n        return new asn1js.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {\n            throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n        }\n        const curve = ECNamedCurves.find(this.namedCurve);\n        const privateKeyJSON = {\n            crv: curve ? curve.name : this.namedCurve,\n            d: pvtsutils.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView),\n        };\n        if (this.publicKey) {\n            const publicKeyJSON = this.publicKey.toJSON();\n            privateKeyJSON.x = publicKeyJSON.x;\n            privateKeyJSON.y = publicKeyJSON.y;\n        }\n        return privateKeyJSON;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"d\");\n        let coordinateLength = 0;\n        const curve = ECNamedCurves.find(json.crv);\n        if (curve) {\n            this.namedCurve = curve.id;\n            coordinateLength = curve.size;\n        }\n        const convertBuffer = pvtsutils.Convert.FromBase64Url(json.d);\n        if (convertBuffer.byteLength < coordinateLength) {\n            const buffer = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(buffer);\n            const convertBufferView = new Uint8Array(convertBuffer);\n            view.set(convertBufferView, 1);\n            this.privateKey = new asn1js.OctetString({ valueHex: buffer });\n        }\n        else {\n            this.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coordinateLength) });\n        }\n        if (json.x && json.y) {\n            this.publicKey = new ECPublicKey({ json });\n        }\n    }\n}\nECPrivateKey.CLASS_NAME = \"ECPrivateKey\";\n\nconst PRIME = \"prime\";\nconst EXPONENT = \"exponent\";\nconst COEFFICIENT$1 = \"coefficient\";\nconst CLEAR_PROPS$18 = [\n    PRIME,\n    EXPONENT,\n    COEFFICIENT$1,\n];\nclass OtherPrimeInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.prime = pvutils.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));\n        this.exponent = pvutils.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PRIME:\n                return new asn1js.Integer();\n            case EXPONENT:\n                return new asn1js.Integer();\n            case COEFFICIENT$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.prime || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$18);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\n            names: {\n                prime: PRIME,\n                exponent: EXPONENT,\n                coefficient: COEFFICIENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.prime = asn1.result.prime.convertFromDER();\n        this.exponent = asn1.result.exponent.convertFromDER();\n        this.coefficient = asn1.result.coefficient.convertFromDER();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.prime.convertToDER(),\n                this.exponent.convertToDER(),\n                this.coefficient.convertToDER()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            r: pvtsutils.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),\n            d: pvtsutils.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),\n            t: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"r\", \"d\", \"r\");\n        this.prime = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.r) });\n        this.exponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.t) });\n    }\n}\nOtherPrimeInfo.CLASS_NAME = \"OtherPrimeInfo\";\n\nconst VERSION$k = \"version\";\nconst MODULUS = \"modulus\";\nconst PUBLIC_EXPONENT = \"publicExponent\";\nconst PRIVATE_EXPONENT = \"privateExponent\";\nconst PRIME1 = \"prime1\";\nconst PRIME2 = \"prime2\";\nconst EXPONENT1 = \"exponent1\";\nconst EXPONENT2 = \"exponent2\";\nconst COEFFICIENT = \"coefficient\";\nconst OTHER_PRIME_INFOS = \"otherPrimeInfos\";\nconst CLEAR_PROPS$17 = [\n    VERSION$k,\n    MODULUS,\n    PUBLIC_EXPONENT,\n    PRIVATE_EXPONENT,\n    PRIME1,\n    PRIME2,\n    EXPONENT1,\n    EXPONENT2,\n    COEFFICIENT,\n    OTHER_PRIME_INFOS\n];\nclass RSAPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));\n        this.privateExponent = pvutils.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));\n        this.prime1 = pvutils.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));\n        this.prime2 = pvutils.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));\n        this.exponent1 = pvutils.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));\n        this.exponent2 = pvutils.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));\n        if (OTHER_PRIME_INFOS in parameters) {\n            this.otherPrimeInfos = pvutils.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$k:\n                return 0;\n            case MODULUS:\n                return new asn1js.Integer();\n            case PUBLIC_EXPONENT:\n                return new asn1js.Integer();\n            case PRIVATE_EXPONENT:\n                return new asn1js.Integer();\n            case PRIME1:\n                return new asn1js.Integer();\n            case PRIME2:\n                return new asn1js.Integer();\n            case EXPONENT1:\n                return new asn1js.Integer();\n            case EXPONENT2:\n                return new asn1js.Integer();\n            case COEFFICIENT:\n                return new asn1js.Integer();\n            case OTHER_PRIME_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.privateExponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.prime1 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.prime2 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent1 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent2 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.otherPrimeInfosName || EMPTY_STRING),\n                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$17);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\n            names: {\n                version: VERSION$k,\n                modulus: MODULUS,\n                publicExponent: PUBLIC_EXPONENT,\n                privateExponent: PRIVATE_EXPONENT,\n                prime1: PRIME1,\n                prime2: PRIME2,\n                exponent1: EXPONENT1,\n                exponent2: EXPONENT2,\n                coefficient: COEFFICIENT,\n                otherPrimeInfo: {\n                    names: {\n                        blockName: OTHER_PRIME_INFOS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n        this.prime1 = asn1.result.prime1.convertFromDER(128);\n        this.prime2 = asn1.result.prime2.convertFromDER(128);\n        this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n        this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n        this.coefficient = asn1.result.coefficient.convertFromDER(128);\n        if (OTHER_PRIME_INFOS in asn1.result)\n            this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.modulus.convertToDER());\n        outputArray.push(this.publicExponent);\n        outputArray.push(this.privateExponent.convertToDER());\n        outputArray.push(this.prime1.convertToDER());\n        outputArray.push(this.prime2.convertToDER());\n        outputArray.push(this.exponent1.convertToDER());\n        outputArray.push(this.exponent2.convertToDER());\n        outputArray.push(this.coefficient.convertToDER());\n        if (this.otherPrimeInfos) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.otherPrimeInfos, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const jwk = {\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n            d: pvtsutils.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),\n            p: pvtsutils.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),\n            q: pvtsutils.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),\n            dp: pvtsutils.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),\n            dq: pvtsutils.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),\n            qi: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n        if (this.otherPrimeInfos) {\n            jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());\n        }\n        return jwk;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\");\n        this.modulus = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.n) });\n        this.publicExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.e) });\n        this.privateExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\n        this.prime1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.p) });\n        this.prime2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.q) });\n        this.exponent1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dp) });\n        this.exponent2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dq) });\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.qi) });\n        if (json.oth) {\n            this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({ json: element }));\n        }\n    }\n}\nRSAPrivateKey.CLASS_NAME = \"RSAPrivateKey\";\n\nconst VERSION$j = \"version\";\nconst PRIVATE_KEY_ALGORITHM = \"privateKeyAlgorithm\";\nconst PRIVATE_KEY = \"privateKey\";\nconst ATTRIBUTES$5 = \"attributes\";\nconst PARSED_KEY = \"parsedKey\";\nconst CLEAR_PROPS$16 = [\n    VERSION$j,\n    PRIVATE_KEY_ALGORITHM,\n    PRIVATE_KEY,\n    ATTRIBUTES$5\n];\nclass PrivateKeyInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));\n        this.privateKeyAlgorithm = pvutils.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));\n        if (ATTRIBUTES$5 in parameters) {\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));\n        }\n        if (PARSED_KEY in parameters) {\n            this.parsedKey = pvutils.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$j:\n                return 0;\n            case PRIVATE_KEY_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PRIVATE_KEY:\n                return new asn1js.OctetString();\n            case ATTRIBUTES$5:\n                return [];\n            case PARSED_KEY:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.attributes || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$16);\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\n            names: {\n                version: VERSION$j,\n                privateKeyAlgorithm: {\n                    names: {\n                        blockName: PRIVATE_KEY_ALGORITHM\n                    }\n                },\n                privateKey: PRIVATE_KEY,\n                attributes: ATTRIBUTES$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\n        this.privateKey = asn1.result.privateKey;\n        if (ATTRIBUTES$5 in asn1.result)\n            this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.113549.1.1.1\":\n                {\n                    const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\n                    if (privateKeyASN1.offset !== -1)\n                        this.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\n                }\n                break;\n            case \"1.2.840.10045.2.1\":\n                if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n                    if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n                        const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\n                        if (privateKeyASN1.offset !== -1) {\n                            this.parsedKey = new ECPrivateKey({\n                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                                schema: privateKeyASN1.result\n                            });\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.privateKeyAlgorithm.toSchema(),\n            this.privateKey\n        ];\n        if (this.attributes) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            const object = {\n                version: this.version,\n                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n                privateKey: this.privateKey.toJSON(),\n            };\n            if (this.attributes) {\n                object.attributes = Array.from(this.attributes, o => o.toJSON());\n            }\n            return object;\n        }\n        const jwk = {};\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n}\nPrivateKeyInfo.CLASS_NAME = \"PrivateKeyInfo\";\n\nconst CONTENT_TYPE$1 = \"contentType\";\nconst CONTENT_ENCRYPTION_ALGORITHM = \"contentEncryptionAlgorithm\";\nconst ENCRYPTED_CONTENT = \"encryptedContent\";\nconst CLEAR_PROPS$15 = [\n    CONTENT_TYPE$1,\n    CONTENT_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_CONTENT,\n];\nconst PIECE_SIZE = 1024;\nclass EncryptedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));\n        this.contentEncryptionAlgorithm = pvutils.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));\n        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {\n            this.encryptedContent = parameters.encryptedContent;\n            if ((this.encryptedContent.idBlock.tagClass === 1) &&\n                (this.encryptedContent.idBlock.tagNumber === 4)) {\n                if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {\n                    const constrString = new asn1js.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;\n                    let length = valueHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(valueHex, offset, ((offset + PIECE_SIZE) > valueHex.byteLength) ? (valueHex.byteLength - offset) : PIECE_SIZE);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++)\n                            _view[i] = pieceView[i];\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.encryptedContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return EMPTY_STRING;\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_CONTENT:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return (memberValue === EMPTY_STRING);\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_CONTENT:\n                return (memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.contentType || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js.Repeated({\n                                    value: new asn1js.OctetString()\n                                })\n                            ]\n                        }),\n                        new asn1js.Primitive({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$15);\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\n            names: {\n                contentType: CONTENT_TYPE$1,\n                contentEncryptionAlgorithm: {\n                    names: {\n                        blockName: CONTENT_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedContent: ENCRYPTED_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\n        if (ENCRYPTED_CONTENT in asn1.result) {\n            this.encryptedContent = asn1.result.encryptedContent;\n            this.encryptedContent.idBlock.tagClass = 1;\n            this.encryptedContent.idBlock.tagNumber = 4;\n        }\n    }\n    toSchema() {\n        const sequenceLengthBlock = {\n            isIndefiniteForm: false\n        };\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\n        outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n        if (this.encryptedContent) {\n            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            const encryptedValue = this.encryptedContent;\n            encryptedValue.idBlock.tagClass = 3;\n            encryptedValue.idBlock.tagNumber = 0;\n            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            outputArray.push(encryptedValue);\n        }\n        return (new asn1js.Sequence({\n            lenBlock: sequenceLengthBlock,\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            contentType: this.contentType,\n            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n        };\n        if (this.encryptedContent) {\n            res.encryptedContent = this.encryptedContent.toJSON();\n        }\n        return res;\n    }\n    getEncryptedContent() {\n        if (!this.encryptedContent) {\n            throw new Error(\"Parameter 'encryptedContent' is undefined\");\n        }\n        return asn1js.OctetString.prototype.getValue.call(this.encryptedContent);\n    }\n}\nEncryptedContentInfo.CLASS_NAME = \"EncryptedContentInfo\";\n\nconst HASH_ALGORITHM$4 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM$1 = \"maskGenAlgorithm\";\nconst SALT_LENGTH = \"saltLength\";\nconst TRAILER_FIELD = \"trailerField\";\nconst CLEAR_PROPS$14 = [\n    HASH_ALGORITHM$4,\n    MASK_GEN_ALGORITHM$1,\n    SALT_LENGTH,\n    TRAILER_FIELD\n];\nclass RSASSAPSSParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));\n        this.saltLength = pvutils.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));\n        this.trailerField = pvutils.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$4:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            case MASK_GEN_ALGORITHM$1:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js.Null()\n                    })).toSchema()\n                });\n            case SALT_LENGTH:\n                return 20;\n            case TRAILER_FIELD:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [new asn1js.Integer({ name: (names.saltLength || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    optional: true,\n                    value: [new asn1js.Integer({ name: (names.trailerField || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$14);\n        const asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$4\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM$1\n                    }\n                },\n                saltLength: SALT_LENGTH,\n                trailerField: TRAILER_FIELD\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$4 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM$1 in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (SALT_LENGTH in asn1.result)\n            this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n        if (TRAILER_FIELD in asn1.result)\n            this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [new asn1js.Integer({ value: this.saltLength })]\n            }));\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js.Integer({ value: this.trailerField })]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            res.saltLength = this.saltLength;\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            res.trailerField = this.trailerField;\n        }\n        return res;\n    }\n}\nRSASSAPSSParams.CLASS_NAME = \"RSASSAPSSParams\";\n\nconst SALT = \"salt\";\nconst ITERATION_COUNT = \"iterationCount\";\nconst KEY_LENGTH = \"keyLength\";\nconst PRF = \"prf\";\nconst CLEAR_PROPS$13 = [\n    SALT,\n    ITERATION_COUNT,\n    KEY_LENGTH,\n    PRF\n];\nclass PBKDF2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.salt = pvutils.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));\n        this.iterationCount = pvutils.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));\n        if (KEY_LENGTH in parameters) {\n            this.keyLength = pvutils.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));\n        }\n        if (PRF in parameters) {\n            this.prf = pvutils.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SALT:\n                return {};\n            case ITERATION_COUNT:\n                return (-1);\n            case KEY_LENGTH:\n                return 0;\n            case PRF:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.OctetString({ name: (names.saltPrimitive || EMPTY_STRING) }),\n                        AlgorithmIdentifier.schema(names.saltConstructed || {})\n                    ]\n                }),\n                new asn1js.Integer({ name: (names.iterationCount || EMPTY_STRING) }),\n                new asn1js.Integer({\n                    name: (names.keyLength || EMPTY_STRING),\n                    optional: true\n                }),\n                AlgorithmIdentifier.schema(names.prf || {\n                    names: {\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$13);\n        const asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({\n            names: {\n                saltPrimitive: SALT,\n                saltConstructed: {\n                    names: {\n                        blockName: SALT\n                    }\n                },\n                iterationCount: ITERATION_COUNT,\n                keyLength: KEY_LENGTH,\n                prf: {\n                    names: {\n                        blockName: PRF,\n                        optional: true\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.salt = asn1.result.salt;\n        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n        if (KEY_LENGTH in asn1.result)\n            this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n        if (PRF in asn1.result)\n            this.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.salt);\n        outputArray.push(new asn1js.Integer({ value: this.iterationCount }));\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                outputArray.push(new asn1js.Integer({ value: this.keyLength }));\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                outputArray.push(this.prf.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            salt: this.salt.toJSON(),\n            iterationCount: this.iterationCount\n        };\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                res.keyLength = this.keyLength;\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                res.prf = this.prf.toJSON();\n        }\n        return res;\n    }\n}\nPBKDF2Params.CLASS_NAME = \"PBKDF2Params\";\n\nconst KEY_DERIVATION_FUNC = \"keyDerivationFunc\";\nconst ENCRYPTION_SCHEME = \"encryptionScheme\";\nconst CLEAR_PROPS$12 = [\n    KEY_DERIVATION_FUNC,\n    ENCRYPTION_SCHEME\n];\nclass PBES2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyDerivationFunc = pvutils.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));\n        this.encryptionScheme = pvutils.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_DERIVATION_FUNC:\n                return new AlgorithmIdentifier();\n            case ENCRYPTION_SCHEME:\n                return new AlgorithmIdentifier();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\n                AlgorithmIdentifier.schema(names.encryptionScheme || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$12);\n        const asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\n            names: {\n                keyDerivationFunc: {\n                    names: {\n                        blockName: KEY_DERIVATION_FUNC\n                    }\n                },\n                encryptionScheme: {\n                    names: {\n                        blockName: ENCRYPTION_SCHEME\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\n        this.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.keyDerivationFunc.toSchema(),\n                this.encryptionScheme.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n            encryptionScheme: this.encryptionScheme.toJSON()\n        };\n    }\n}\nPBES2Params.CLASS_NAME = \"PBES2Params\";\n\nclass AbstractCryptoEngine {\n    constructor(parameters) {\n        this.crypto = parameters.crypto;\n        this.subtle = \"webkitSubtle\" in parameters.crypto\n            ? parameters.crypto.webkitSubtle\n            : parameters.crypto.subtle;\n        this.name = pvutils.getParametersValue(parameters, \"name\", EMPTY_STRING);\n    }\n    async encrypt(...args) {\n        return this.subtle.encrypt(...args);\n    }\n    async decrypt(...args) {\n        return this.subtle.decrypt(...args);\n    }\n    sign(...args) {\n        return this.subtle.sign(...args);\n    }\n    async verify(...args) {\n        return this.subtle.verify(...args);\n    }\n    async digest(...args) {\n        return this.subtle.digest(...args);\n    }\n    async generateKey(...args) {\n        return this.subtle.generateKey(...args);\n    }\n    async deriveKey(...args) {\n        return this.subtle.deriveKey(...args);\n    }\n    async deriveBits(...args) {\n        return this.subtle.deriveBits(...args);\n    }\n    async wrapKey(...args) {\n        return this.subtle.wrapKey(...args);\n    }\n    async unwrapKey(...args) {\n        return this.subtle.unwrapKey(...args);\n    }\n    exportKey(...args) {\n        return this.subtle.exportKey(...args);\n    }\n    importKey(...args) {\n        return this.subtle.importKey(...args);\n    }\n    getRandomValues(array) {\n        return this.crypto.getRandomValues(array);\n    }\n}\n\nasync function makePKCS12B2Key(hashAlgorithm, keyLength, password, salt, iterationCount) {\n    let u;\n    let v;\n    let md;\n    switch (hashAlgorithm.toUpperCase()) {\n        case \"SHA-1\":\n            u = 20;\n            v = 64;\n            md = sha1;\n            break;\n        case \"SHA-256\":\n            u = 32;\n            v = 64;\n            md = sha256;\n            break;\n        case \"SHA-384\":\n            u = 48;\n            v = 128;\n            md = sha384;\n            break;\n        case \"SHA-512\":\n            u = 64;\n            v = 128;\n            md = sha512;\n            break;\n        default:\n            throw new Error(\"Unsupported hashing algorithm\");\n    }\n    const originalPassword = new Uint8Array(password);\n    let decodedPassword = new TextDecoder().decode(password);\n    const encodedPassword = new TextEncoder().encode(decodedPassword);\n    if (encodedPassword.some((byte, i) => byte !== originalPassword[i])) {\n        decodedPassword = String.fromCharCode(...originalPassword);\n    }\n    const passwordTransformed = new Uint8Array(decodedPassword.length * 2 + 2);\n    const passwordView = new DataView(passwordTransformed.buffer);\n    for (let i = 0; i < decodedPassword.length; i++) {\n        passwordView.setUint16(i * 2, decodedPassword.charCodeAt(i), false);\n    }\n    passwordView.setUint16(decodedPassword.length * 2, 0, false);\n    const D = new Uint8Array(v).fill(3);\n    const saltView = new Uint8Array(salt);\n    const S = new Uint8Array(v * Math.ceil(saltView.length / v)).map((_, i) => saltView[i % saltView.length]);\n    const P = new Uint8Array(v * Math.ceil(passwordTransformed.length / v)).map((_, i) => passwordTransformed[i % passwordTransformed.length]);\n    let I = new Uint8Array(S.length + P.length);\n    I.set(S);\n    I.set(P, S.length);\n    const c = Math.ceil((keyLength >> 3) / u);\n    const result = [];\n    for (let i = 0; i < c; i++) {\n        let A = new Uint8Array(D.length + I.length);\n        A.set(D);\n        A.set(I, D.length);\n        for (let j = 0; j < iterationCount; j++) {\n            A = md(A);\n        }\n        const B = new Uint8Array(v).map((_, i) => A[i % A.length]);\n        const k = Math.ceil(saltView.length / v) + Math.ceil(passwordTransformed.length / v);\n        const iRound = [];\n        for (let j = 0; j < k; j++) {\n            const chunk = Array.from(I.slice(j * v, (j + 1) * v));\n            let x = 0x1ff;\n            for (let l = B.length - 1; l >= 0; l--) {\n                x >>= 8;\n                x += B[l] + (chunk[l] || 0);\n                chunk[l] = x & 0xff;\n            }\n            iRound.push(...chunk);\n        }\n        I = new Uint8Array(iRound);\n        result.push(...A);\n    }\n    return new Uint8Array(result.slice(0, keyLength >> 3)).buffer;\n}\nfunction prepareAlgorithm(data) {\n    const res = typeof data === \"string\"\n        ? { name: data }\n        : data;\n    if (\"hash\" in res) {\n        return {\n            ...res,\n            hash: prepareAlgorithm(res.hash)\n        };\n    }\n    return res;\n}\nclass CryptoEngine extends AbstractCryptoEngine {\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        var _a, _b, _c, _d, _e, _f;\n        let jwk = {};\n        const alg = prepareAlgorithm(algorithm);\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n            case \"spki\":\n                {\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    const publicKeyInfo = new PublicKeyInfo();\n                    try {\n                        publicKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch {\n                        throw new ArgumentError(\"Incorrect keyData\");\n                    }\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                if (!alg.hash) {\n                                    throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                }\n                                switch (alg.hash.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"verify\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                if (!jwk.alg) {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"verify\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") {\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"pkcs8\":\n                {\n                    const privateKeyInfo = new PrivateKeyInfo();\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    try {\n                        privateKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch (ex) {\n                        throw new Error(\"Incorrect keyData\");\n                    }\n                    if (!privateKeyInfo.parsedKey)\n                        throw new Error(\"Incorrect keyData\");\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"sign\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                if ((\"alg\" in jwk) === false) {\n                                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"sign\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\n                                    throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"decrypt\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"jwk\":\n                jwk = keyData;\n                break;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n        if (this.name.toLowerCase() === \"safari\") {\n            try {\n                return this.subtle.importKey(\"jwk\", pvutils.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\n            }\n            catch {\n                return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n            }\n        }\n        return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n    }\n    async exportKey(format, key) {\n        let jwk = await this.subtle.exportKey(\"jwk\", key);\n        if (this.name.toLowerCase() === \"safari\") {\n            if (jwk instanceof ArrayBuffer) {\n                jwk = JSON.parse(pvutils.arrayBufferToString(jwk));\n            }\n        }\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.exportKey(\"raw\", key);\n            case \"spki\": {\n                const publicKeyInfo = new PublicKeyInfo();\n                try {\n                    publicKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return publicKeyInfo.toSchema().toBER(false);\n            }\n            case \"pkcs8\": {\n                const privateKeyInfo = new PrivateKeyInfo();\n                try {\n                    privateKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return privateKeyInfo.toSchema().toBER(false);\n            }\n            case \"jwk\":\n                return jwk;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n    }\n    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {\n            return keyData;\n        }\n        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);\n        return this.exportKey(outputFormat, key);\n    }\n    getAlgorithmByOID(oid, safety = false, target) {\n        switch (oid) {\n            case \"1.2.840.113549.1.1.1\":\n                return {\n                    name: \"RSAES-PKCS1-v1_5\"\n                };\n            case \"1.2.840.113549.1.1.5\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.11\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.12\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.13\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.10\":\n                return {\n                    name: \"RSA-PSS\"\n                };\n            case \"1.2.840.113549.1.1.7\":\n                return {\n                    name: \"RSA-OAEP\"\n                };\n            case \"1.2.840.10045.2.1\":\n            case \"1.2.840.10045.4.1\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.2\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.3\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.4\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.3.133.16.840.63.0.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-1\"\n                };\n            case \"1.3.132.1.11.1\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-256\"\n                };\n            case \"1.3.132.1.11.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-384\"\n                };\n            case \"1.3.132.1.11.3\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-512\"\n                };\n            case \"2.16.840.1.101.3.4.1.2\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.22\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.42\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.6\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.26\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.46\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.4\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.24\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.44\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.5\":\n                return {\n                    name: \"AES-KW\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.25\":\n                return {\n                    name: \"AES-KW\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.45\":\n                return {\n                    name: \"AES-KW\",\n                    length: 256\n                };\n            case \"1.2.840.113549.2.7\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.2.9\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.2.10\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.2.11\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.9.16.3.5\":\n                return {\n                    name: \"DH\"\n                };\n            case \"1.3.14.3.2.26\":\n                return {\n                    name: \"SHA-1\"\n                };\n            case \"2.16.840.1.101.3.4.2.1\":\n                return {\n                    name: \"SHA-256\"\n                };\n            case \"2.16.840.1.101.3.4.2.2\":\n                return {\n                    name: \"SHA-384\"\n                };\n            case \"2.16.840.1.101.3.4.2.3\":\n                return {\n                    name: \"SHA-512\"\n                };\n            case \"1.2.840.113549.1.5.12\":\n                return {\n                    name: \"PBKDF2\"\n                };\n            case \"1.2.840.10045.3.1.7\":\n                return {\n                    name: \"P-256\"\n                };\n            case \"1.3.132.0.34\":\n                return {\n                    name: \"P-384\"\n                };\n            case \"1.3.132.0.35\":\n                return {\n                    name: \"P-521\"\n                };\n        }\n        if (safety) {\n            throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);\n        }\n        return {};\n    }\n    getOIDByAlgorithm(algorithm, safety = false, target) {\n        let result = EMPTY_STRING;\n        switch (algorithm.name.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n                result = \"1.2.840.113549.1.1.1\";\n                break;\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.1.1.5\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.1.1.11\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.1.1.12\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.1.1.13\";\n                        break;\n                }\n                break;\n            case \"RSA-PSS\":\n                result = \"1.2.840.113549.1.1.10\";\n                break;\n            case \"RSA-OAEP\":\n                result = \"1.2.840.113549.1.1.7\";\n                break;\n            case \"ECDSA\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.10045.4.1\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.10045.4.3.2\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.10045.4.3.3\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.10045.4.3.4\";\n                        break;\n                }\n                break;\n            case \"ECDH\":\n                switch (algorithm.kdf.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.3.133.16.840.63.0.2\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.3.132.1.11.1\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.3.132.1.11.2\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.3.132.1.11.3\";\n                        break;\n                }\n                break;\n            case \"AES-CTR\":\n                break;\n            case \"AES-CBC\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.2\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.22\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.42\";\n                        break;\n                }\n                break;\n            case \"AES-CMAC\":\n                break;\n            case \"AES-GCM\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.6\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.26\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.46\";\n                        break;\n                }\n                break;\n            case \"AES-CFB\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.4\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.24\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.44\";\n                        break;\n                }\n                break;\n            case \"AES-KW\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.5\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.25\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.45\";\n                        break;\n                }\n                break;\n            case \"HMAC\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.2.7\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.2.9\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.2.10\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.2.11\";\n                        break;\n                }\n                break;\n            case \"DH\":\n                result = \"1.2.840.113549.1.9.16.3.5\";\n                break;\n            case \"SHA-1\":\n                result = \"1.3.14.3.2.26\";\n                break;\n            case \"SHA-256\":\n                result = \"2.16.840.1.101.3.4.2.1\";\n                break;\n            case \"SHA-384\":\n                result = \"2.16.840.1.101.3.4.2.2\";\n                break;\n            case \"SHA-512\":\n                result = \"2.16.840.1.101.3.4.2.3\";\n                break;\n            case \"CONCAT\":\n                break;\n            case \"HKDF\":\n                break;\n            case \"PBKDF2\":\n                result = \"1.2.840.113549.1.5.12\";\n                break;\n            case \"P-256\":\n                result = \"1.2.840.10045.3.1.7\";\n                break;\n            case \"P-384\":\n                result = \"1.3.132.0.34\";\n                break;\n            case \"P-521\":\n                result = \"1.3.132.0.35\";\n                break;\n        }\n        if (!result && safety) {\n            throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);\n        }\n        return result;\n    }\n    getAlgorithmParameters(algorithmName, operation) {\n        let result = {\n            algorithm: {},\n            usages: []\n        };\n        switch (algorithmName.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-PSS\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                },\n                                saltLength: 20\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-PSS\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-OAEP\":\n                switch (operation.toLowerCase()) {\n                    case \"encrypt\":\n                    case \"decrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDSA\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDSA\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDH\":\n                switch (operation.toLowerCase()) {\n                    case \"exportkey\":\n                    case \"importkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"deriveKey\", \"deriveBits\"]\n                        };\n                        break;\n                    case \"derivekey\":\n                    case \"derivebits\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\",\n                                public: []\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDH\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CTR\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                counter: new Uint8Array(16),\n                                length: 10\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CTR\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CBC\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CBC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-GCM\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-GCM\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-KW\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                    case \"wrapkey\":\n                    case \"unwrapkey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-KW\",\n                                length: 256\n                            },\n                            usages: [\"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-KW\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HMAC\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\",\n                                length: 32,\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HKDF\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HKDF\",\n                                hash: \"SHA-256\",\n                                salt: new Uint8Array([]),\n                                info: new Uint8Array([])\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HKDF\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"PBKDF2\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"PBKDF2\",\n                                hash: { name: \"SHA-256\" },\n                                salt: new Uint8Array([]),\n                                iterations: 10000\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"PBKDF2\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n        }\n        return result;\n    }\n    getHashAlgorithm(signatureAlgorithm) {\n        let result = EMPTY_STRING;\n        switch (signatureAlgorithm.algorithmId) {\n            case \"1.2.840.10045.4.1\":\n            case \"1.2.840.113549.1.1.5\":\n                result = \"SHA-1\";\n                break;\n            case \"1.2.840.10045.4.3.2\":\n            case \"1.2.840.113549.1.1.11\":\n                result = \"SHA-256\";\n                break;\n            case \"1.2.840.10045.4.3.3\":\n            case \"1.2.840.113549.1.1.12\":\n                result = \"SHA-384\";\n                break;\n            case \"1.2.840.10045.4.3.4\":\n            case \"1.2.840.113549.1.1.13\":\n                result = \"SHA-512\";\n                break;\n            case \"1.2.840.113549.1.1.10\":\n                {\n                    try {\n                        const params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n                        if (params.hashAlgorithm) {\n                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n                            if (\"name\" in algorithm) {\n                                result = algorithm.name;\n                            }\n                            else {\n                                return EMPTY_STRING;\n                            }\n                        }\n                        else\n                            result = \"SHA-1\";\n                    }\n                    catch {\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    async encryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"contentEncryptionAlgorithm\", \"hmacHashAlgorithm\", \"iterationCount\", \"contentToEncrypt\", \"contentToEncrypt\", \"contentType\");\n        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const pbkdf2OID = this.getOIDByAlgorithm({\n            name: \"PBKDF2\"\n        }, true, \"PBKDF2\");\n        const hmacOID = this.getOIDByAlgorithm({\n            name: \"HMAC\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            }\n        }, true, \"hmacHashAlgorithm\");\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        this.getRandomValues(ivView);\n        const saltBuffer = new ArrayBuffer(64);\n        const saltView = new Uint8Array(saltBuffer);\n        this.getRandomValues(saltView);\n        const contentView = new Uint8Array(parameters.contentToEncrypt);\n        const pbkdf2Params = new PBKDF2Params({\n            salt: new asn1js.OctetString({ valueHex: saltBuffer }),\n            iterationCount: parameters.iterationCount,\n            prf: new AlgorithmIdentifier({\n                algorithmId: hmacOID,\n                algorithmParams: new asn1js.Null()\n            })\n        });\n        const passwordView = new Uint8Array(parameters.password);\n        const pbkdfKey = await this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n        const derivedKey = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: parameters.iterationCount\n        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\n        const encryptedData = await this.encrypt({\n            name: parameters.contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, derivedKey, contentView);\n        const pbes2Parameters = new PBES2Params({\n            keyDerivationFunc: new AlgorithmIdentifier({\n                algorithmId: pbkdf2OID,\n                algorithmParams: pbkdf2Params.toSchema()\n            }),\n            encryptionScheme: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\n            })\n        });\n        return new EncryptedContentInfo({\n            contentType: parameters.contentType,\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: \"1.2.840.113549.1.5.13\",\n                algorithmParams: pbes2Parameters.toSchema()\n            }),\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedData })\n        });\n    }\n    async decryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"encryptedContentInfo\");\n        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\")\n            throw new Error(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\n        let pbes2Parameters;\n        try {\n            pbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n        }\n        let pbkdf2Params;\n        try {\n            pbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n        }\n        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);\n        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n        const saltView = new Uint8Array(saltBuffer);\n        const iterationCount = pbkdf2Params.iterationCount;\n        let hmacHashAlgorithm = \"SHA-1\";\n        if (pbkdf2Params.prf) {\n            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);\n            hmacHashAlgorithm = algorithm.hash.name;\n        }\n        const pbkdfKey = await this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\n        const result = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: iterationCount\n        }, pbkdfKey, contentEncryptionAlgorithm, false, [\"decrypt\"]);\n        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();\n        return this.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, result, dataBuffer);\n    }\n    async stampDataWithPassword(parameters) {\n        if ((parameters instanceof Object) === false)\n            throw new Error(\"Parameters must have type \\\"Object\\\"\");\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"iterationCount\", \"salt\", \"contentToStamp\");\n        let length;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"sign\"]);\n        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));\n    }\n    async verifyDataStampedWithPassword(parameters) {\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"salt\", \"iterationCount\", \"contentToVerify\", \"signatureToVerify\");\n        let length = 0;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"verify\"]);\n        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\n    }\n    async getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n        this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const signatureAlgorithm = new AlgorithmIdentifier();\n        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n        if (!Object.keys(parameters.algorithm).length) {\n            throw new Error(\"Parameter 'algorithm' is empty\");\n        }\n        const algorithm = parameters.algorithm;\n        if (\"hash\" in privateKey.algorithm && privateKey.algorithm.hash && privateKey.algorithm.hash.name) {\n            algorithm.hash.name = privateKey.algorithm.hash.name;\n        }\n        else {\n            algorithm.hash.name = hashAlgorithm;\n        }\n        switch (privateKey.algorithm.name.toUpperCase()) {\n            case \"RSASSA-PKCS1-V1_5\":\n            case \"ECDSA\":\n                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);\n                break;\n            case \"RSA-PSS\":\n                {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                        case \"SHA-256\":\n                            algorithm.saltLength = 32;\n                            break;\n                        case \"SHA-384\":\n                            algorithm.saltLength = 48;\n                            break;\n                        case \"SHA-512\":\n                            algorithm.saltLength = 64;\n                            break;\n                    }\n                    const paramsObject = {};\n                    if (algorithm.hash.name.toUpperCase() !== \"SHA-1\") {\n                        const hashAlgorithmOID = this.getOIDByAlgorithm({ name: algorithm.hash.name }, true, \"hashAlgorithm\");\n                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashAlgorithmOID,\n                            algorithmParams: new asn1js.Null()\n                        });\n                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: \"1.2.840.113549.1.1.8\",\n                            algorithmParams: paramsObject.hashAlgorithm.toSchema()\n                        });\n                    }\n                    if (algorithm.saltLength !== 20)\n                        paramsObject.saltLength = algorithm.saltLength;\n                    const pssParameters = new RSASSAPSSParams(paramsObject);\n                    signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();\n                }\n                break;\n            default:\n                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n        }\n        return {\n            signatureAlgorithm,\n            parameters\n        };\n    }\n    async signWithPrivateKey(data, privateKey, parameters) {\n        const signature = await this.sign(parameters.algorithm, privateKey, data);\n        if (parameters.algorithm.name === \"ECDSA\") {\n            return createCMSECDSASignature(signature);\n        }\n        return signature;\n    }\n    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n        const parameters = {};\n        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n        if (shaAlgorithm === EMPTY_STRING)\n            throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n        let algorithmId;\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n            algorithmId = signatureAlgorithm.algorithmId;\n        else\n            algorithmId = publicKeyInfo.algorithm.algorithmId;\n        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n        if (\"hash\" in parameters.algorithm.algorithm)\n            parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n        if (algorithmObject.name === \"ECDSA\") {\n            const publicKeyAlgorithm = publicKeyInfo.algorithm;\n            if (!publicKeyAlgorithm.algorithmParams) {\n                throw new Error(\"Algorithm parameters for ECDSA public key are missed\");\n            }\n            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;\n            if (\"idBlock\" in publicKeyAlgorithm.algorithmParams) {\n                if (!((publicKeyAlgorithmParams.idBlock.tagClass === 1) && (publicKeyAlgorithmParams.idBlock.tagNumber === 6))) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n            }\n            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);\n            parameters.algorithm.algorithm.namedCurve = curveObject.name;\n        }\n        return parameters;\n    }\n    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {\n        if (!parameters) {\n            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n        }\n        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);\n        return this.importKey(\"spki\", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n    }\n    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {\n        let publicKey;\n        if (!shaAlgorithm) {\n            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n            if (!shaAlgorithm)\n                throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);\n        }\n        else {\n            const parameters = {};\n            let algorithmId;\n            if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n                algorithmId = signatureAlgorithm.algorithmId;\n            else\n                algorithmId = publicKeyInfo.algorithm.algorithmId;\n            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n            if (\"hash\" in parameters.algorithm.algorithm)\n                parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n            if (algorithmObject.name === \"ECDSA\") {\n                let algorithmParamsChecked = false;\n                if ((\"algorithmParams\" in publicKeyInfo.algorithm) === true) {\n                    if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n                        if ((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\n                            algorithmParamsChecked = true;\n                    }\n                }\n                if (algorithmParamsChecked === false) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);\n                parameters.algorithm.algorithm.namedCurve = curveObject.name;\n            }\n            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);\n        }\n        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n        if (\"hash\" in algorithm.algorithm)\n            algorithm.algorithm.hash.name = shaAlgorithm;\n        let signatureValue = signature.valueBlock.valueHexView;\n        if (publicKey.algorithm.name === \"ECDSA\") {\n            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);\n            if (!namedCurve) {\n                throw new Error(\"Unsupported named curve in use\");\n            }\n            const asn1 = asn1js.fromBER(signatureValue);\n            AsnError.assert(asn1, \"Signature value\");\n            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);\n        }\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\n            const pssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n            if (\"saltLength\" in pssParameters)\n                algorithm.algorithm.saltLength = pssParameters.saltLength;\n            else\n                algorithm.algorithm.saltLength = 20;\n            let hashAlgo = \"SHA-1\";\n            if (\"hashAlgorithm\" in pssParameters) {\n                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);\n                hashAlgo = hashAlgorithm.name;\n            }\n            algorithm.algorithm.hash.name = hashAlgo;\n        }\n        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);\n    }\n}\n\nlet engine = {\n    name: \"none\",\n    crypto: null,\n};\nfunction isCryptoEngine(engine) {\n    return engine\n        && typeof engine === \"object\"\n        && \"crypto\" in engine\n        ? true\n        : false;\n}\nfunction setEngine(name, ...args) {\n    let crypto = null;\n    if (args.length < 2) {\n        if (args.length) {\n            crypto = args[0];\n        }\n        else {\n            crypto = typeof self !== \"undefined\" && self.crypto ? new CryptoEngine({ name: \"browser\", crypto: self.crypto }) : null;\n        }\n    }\n    else {\n        const cryptoArg = args[0];\n        const subtleArg = args[1];\n        if (isCryptoEngine(subtleArg)) {\n            crypto = subtleArg;\n        }\n        else if (isCryptoEngine(cryptoArg)) {\n            crypto = cryptoArg;\n        }\n        else if (\"subtle\" in cryptoArg && \"getRandomValues\" in cryptoArg) {\n            crypto = new CryptoEngine({\n                crypto: cryptoArg,\n            });\n        }\n    }\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        if (typeof global[process.pid] === \"undefined\") {\n            global[process.pid] = {};\n        }\n        else {\n            if (typeof global[process.pid] !== \"object\") {\n                throw new Error(`Name global.${process.pid} already exists and it is not an object`);\n            }\n        }\n        if (typeof global[process.pid].pkijs === \"undefined\") {\n            global[process.pid].pkijs = {};\n        }\n        else {\n            if (typeof global[process.pid].pkijs !== \"object\") {\n                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n            }\n        }\n        global[process.pid].pkijs.engine = {\n            name: name,\n            crypto,\n        };\n    }\n    else {\n        engine = {\n            name: name,\n            crypto,\n        };\n    }\n}\nfunction getEngine() {\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        let _engine;\n        try {\n            _engine = global[process.pid].pkijs.engine;\n        }\n        catch (ex) {\n            throw new Error(\"Please call 'setEngine' before call to 'getEngine'\");\n        }\n        return _engine;\n    }\n    return engine;\n}\nfunction getCrypto(safety = false) {\n    const _engine = getEngine();\n    if (!_engine.crypto && safety) {\n        throw new Error(\"Unable to create WebCrypto object\");\n    }\n    return _engine.crypto;\n}\nfunction getRandomValues(view) {\n    return getCrypto(true).getRandomValues(view);\n}\nfunction getOIDByAlgorithm(algorithm, safety, target) {\n    return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);\n}\nfunction getAlgorithmParameters(algorithmName, operation) {\n    return getCrypto(true).getAlgorithmParameters(algorithmName, operation);\n}\nfunction createCMSECDSASignature(signatureBuffer) {\n    if ((signatureBuffer.byteLength % 2) !== 0)\n        return EMPTY_BUFFER;\n    const length = signatureBuffer.byteLength / 2;\n    const rBuffer = new ArrayBuffer(length);\n    const rView = new Uint8Array(rBuffer);\n    rView.set(new Uint8Array(signatureBuffer, 0, length));\n    const rInteger = new asn1js.Integer({ valueHex: rBuffer });\n    const sBuffer = new ArrayBuffer(length);\n    const sView = new Uint8Array(sBuffer);\n    sView.set(new Uint8Array(signatureBuffer, length, length));\n    const sInteger = new asn1js.Integer({ valueHex: sBuffer });\n    return (new asn1js.Sequence({\n        value: [\n            rInteger.convertToDER(),\n            sInteger.convertToDER()\n        ]\n    })).toBER(false);\n}\nfunction createECDSASignatureFromCMS(cmsSignature, pointSize) {\n    if (!(cmsSignature instanceof asn1js.Sequence\n        && cmsSignature.valueBlock.value.length === 2\n        && cmsSignature.valueBlock.value[0] instanceof asn1js.Integer\n        && cmsSignature.valueBlock.value[1] instanceof asn1js.Integer))\n        return EMPTY_BUFFER;\n    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;\n    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;\n    const res = new Uint8Array(pointSize * 2);\n    res.set(rValueView, pointSize - rValueView.byteLength);\n    res.set(sValueView, (2 * pointSize) - sValueView.byteLength);\n    return res.buffer;\n}\nfunction getAlgorithmByOID(oid, safety = false, target) {\n    return getCrypto(true).getAlgorithmByOID(oid, safety, target);\n}\nfunction getHashAlgorithm(signatureAlgorithm) {\n    return getCrypto(true).getHashAlgorithm(signatureAlgorithm);\n}\nasync function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n        case \"SHA-256\":\n        case \"SHA-384\":\n        case \"SHA-512\":\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(zBuffer, \"zBuffer\", \"ArrayBuffer\");\n    if (zBuffer.byteLength === 0)\n        throw new ArgumentError(\"'zBuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    if (Counter > 255)\n        throw new ArgumentError(\"Please set 'Counter' argument to value less or equal to 255\");\n    const counterBuffer = new ArrayBuffer(4);\n    const counterView = new Uint8Array(counterBuffer);\n    counterView[0] = 0x00;\n    counterView[1] = 0x00;\n    counterView[2] = 0x00;\n    counterView[3] = Counter;\n    let combinedBuffer = EMPTY_BUFFER;\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, zBuffer);\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, counterBuffer);\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, SharedInfo);\n    const result = await crypto.digest({ name: hashFunction }, combinedBuffer);\n    return {\n        counter: Counter,\n        result\n    };\n}\nasync function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {\n    let hashLength = 0;\n    let maxCounter = 1;\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n            hashLength = 160;\n            break;\n        case \"SHA-256\":\n            hashLength = 256;\n            break;\n        case \"SHA-384\":\n            hashLength = 384;\n            break;\n        case \"SHA-512\":\n            hashLength = 512;\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(Zbuffer, \"Zbuffer\", \"ArrayBuffer\");\n    if (Zbuffer.byteLength === 0)\n        throw new ArgumentError(\"'Zbuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    const quotient = keydatalen / hashLength;\n    if (Math.floor(quotient) > 0) {\n        maxCounter = Math.floor(quotient);\n        if ((quotient - maxCounter) > 0)\n            maxCounter++;\n    }\n    const incomingResult = [];\n    for (let i = 1; i <= maxCounter; i++)\n        incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));\n    let combinedBuffer = EMPTY_BUFFER;\n    let currentCounter = 1;\n    let found = true;\n    while (found) {\n        found = false;\n        for (const result of incomingResult) {\n            if (result.counter === currentCounter) {\n                combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, result.result);\n                found = true;\n                break;\n            }\n        }\n        currentCounter++;\n    }\n    keydatalen >>= 3;\n    if (combinedBuffer.byteLength > keydatalen) {\n        const newBuffer = new ArrayBuffer(keydatalen);\n        const newView = new Uint8Array(newBuffer);\n        const combinedView = new Uint8Array(combinedBuffer);\n        for (let i = 0; i < keydatalen; i++)\n            newView[i] = combinedView[i];\n        return newBuffer;\n    }\n    return combinedBuffer;\n}\n\nconst VERSION$i = \"version\";\nconst LOG_ID = \"logID\";\nconst EXTENSIONS$6 = \"extensions\";\nconst TIMESTAMP = \"timestamp\";\nconst HASH_ALGORITHM$3 = \"hashAlgorithm\";\nconst SIGNATURE_ALGORITHM$8 = \"signatureAlgorithm\";\nconst SIGNATURE$7 = \"signature\";\nconst NONE = \"none\";\nconst MD5 = \"md5\";\nconst SHA1 = \"sha1\";\nconst SHA224 = \"sha224\";\nconst SHA256 = \"sha256\";\nconst SHA384 = \"sha384\";\nconst SHA512 = \"sha512\";\nconst ANONYMOUS = \"anonymous\";\nconst RSA = \"rsa\";\nconst DSA = \"dsa\";\nconst ECDSA = \"ecdsa\";\nclass SignedCertificateTimestamp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));\n        this.logID = pvutils.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));\n        this.timestamp = pvutils.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));\n        if (\"stream\" in parameters && parameters.stream) {\n            this.fromStream(parameters.stream);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$i:\n                return 0;\n            case LOG_ID:\n            case EXTENSIONS$6:\n                return EMPTY_BUFFER;\n            case TIMESTAMP:\n                return new Date(0);\n            case HASH_ALGORITHM$3:\n            case SIGNATURE_ALGORITHM$8:\n                return EMPTY_STRING;\n            case SIGNATURE$7:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js.RawData) === false)\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n        const seqStream = new bs.SeqStream({\n            stream: new bs.ByteStream({\n                buffer: schema.data\n            })\n        });\n        this.fromStream(seqStream);\n    }\n    fromStream(stream) {\n        const blockLength = stream.getUint16();\n        this.version = (stream.getBlock(1))[0];\n        if (this.version === 0) {\n            this.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n            this.timestamp = new Date(pvutils.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n            const extensionsLength = stream.getUint16();\n            this.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.hashAlgorithm = NONE;\n                    break;\n                case 1:\n                    this.hashAlgorithm = MD5;\n                    break;\n                case 2:\n                    this.hashAlgorithm = SHA1;\n                    break;\n                case 3:\n                    this.hashAlgorithm = SHA224;\n                    break;\n                case 4:\n                    this.hashAlgorithm = SHA256;\n                    break;\n                case 5:\n                    this.hashAlgorithm = SHA384;\n                    break;\n                case 6:\n                    this.hashAlgorithm = SHA512;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.signatureAlgorithm = ANONYMOUS;\n                    break;\n                case 1:\n                    this.signatureAlgorithm = RSA;\n                    break;\n                case 2:\n                    this.signatureAlgorithm = DSA;\n                    break;\n                case 3:\n                    this.signatureAlgorithm = ECDSA;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            const signatureLength = stream.getUint16();\n            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n            const asn1 = asn1js.fromBER(signatureData);\n            AsnError.assert(asn1, \"SignedCertificateTimestamp\");\n            this.signature = asn1.result;\n            if (blockLength !== (47 + extensionsLength + signatureLength)) {\n                throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n        }\n    }\n    toSchema() {\n        const stream = this.toStream();\n        return new asn1js.RawData({ data: stream.stream.buffer });\n    }\n    toStream() {\n        const stream = new bs.SeqStream();\n        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);\n        stream.appendChar(this.version);\n        stream.appendView(new Uint8Array(this.logID));\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength)\n            stream.appendView(new Uint8Array(this.extensions));\n        let _hashAlgorithm;\n        switch (this.hashAlgorithm.toLowerCase()) {\n            case NONE:\n                _hashAlgorithm = 0;\n                break;\n            case MD5:\n                _hashAlgorithm = 1;\n                break;\n            case SHA1:\n                _hashAlgorithm = 2;\n                break;\n            case SHA224:\n                _hashAlgorithm = 3;\n                break;\n            case SHA256:\n                _hashAlgorithm = 4;\n                break;\n            case SHA384:\n                _hashAlgorithm = 5;\n                break;\n            case SHA512:\n                _hashAlgorithm = 6;\n                break;\n            default:\n                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n        }\n        stream.appendChar(_hashAlgorithm);\n        let _signatureAlgorithm;\n        switch (this.signatureAlgorithm.toLowerCase()) {\n            case ANONYMOUS:\n                _signatureAlgorithm = 0;\n                break;\n            case RSA:\n                _signatureAlgorithm = 1;\n                break;\n            case DSA:\n                _signatureAlgorithm = 2;\n                break;\n            case ECDSA:\n                _signatureAlgorithm = 3;\n                break;\n            default:\n                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n        }\n        stream.appendChar(_signatureAlgorithm);\n        const _signature = this.signature.toBER(false);\n        stream.appendUint16(_signature.byteLength);\n        stream.appendView(new Uint8Array(_signature));\n        return stream;\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            logID: pvutils.bufferToHexCodes(this.logID),\n            timestamp: this.timestamp,\n            extensions: pvutils.bufferToHexCodes(this.extensions),\n            hashAlgorithm: this.hashAlgorithm,\n            signatureAlgorithm: this.signatureAlgorithm,\n            signature: this.signature.toJSON()\n        };\n    }\n    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {\n        const logId = pvutils.toBase64(pvutils.arrayBufferToString(this.logID));\n        let publicKeyBase64 = null;\n        const stream = new bs.SeqStream();\n        for (const log of logs) {\n            if (log.log_id === logId) {\n                publicKeyBase64 = log.key;\n                break;\n            }\n        }\n        if (!publicKeyBase64) {\n            throw new Error(`Public key not found for CT with logId: ${logId}`);\n        }\n        const pki = pvutils.stringToArrayBuffer(pvutils.fromBase64(publicKeyBase64));\n        const publicKeyInfo = PublicKeyInfo.fromBER(pki);\n        stream.appendChar(0x00);\n        stream.appendChar(0x00);\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(dataType);\n        if (dataType === 0)\n            stream.appendUint24(data.byteLength);\n        stream.appendView(new Uint8Array(data));\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength !== 0)\n            stream.appendView(new Uint8Array(this.extensions));\n        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js.OctetString({ valueHex: this.signature.toBER(false) }), publicKeyInfo, { algorithmId: EMPTY_STRING }, \"SHA-256\");\n    }\n}\nSignedCertificateTimestamp.CLASS_NAME = \"SignedCertificateTimestamp\";\nasync function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1), crypto = getCrypto(true)) {\n    let parsedValue = null;\n    const stream = new bs.SeqStream();\n    if (certificate.extensions) {\n        for (let i = certificate.extensions.length - 1; i >= 0; i--) {\n            switch (certificate.extensions[i].extnID) {\n                case id_SignedCertificateTimestampList:\n                    {\n                        parsedValue = certificate.extensions[i].parsedValue;\n                        if (!parsedValue || parsedValue.timestamps.length === 0)\n                            throw new Error(\"Nothing to verify in the certificate\");\n                        certificate.extensions.splice(i, 1);\n                    }\n                    break;\n            }\n        }\n    }\n    if (parsedValue === null)\n        throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n    const tbs = certificate.encodeTBS().toBER();\n    const issuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n    stream.appendView(new Uint8Array(issuerId));\n    stream.appendUint24(tbs.byteLength);\n    stream.appendView(new Uint8Array(tbs));\n    const preCert = stream.stream.slice(0, stream.length);\n    if (index === (-1)) {\n        const verifyArray = [];\n        for (const timestamp of parsedValue.timestamps) {\n            const verifyResult = await timestamp.verify(logs, preCert.buffer, 1, crypto);\n            verifyArray.push(verifyResult);\n        }\n        return verifyArray;\n    }\n    if (index >= parsedValue.timestamps.length)\n        index = (parsedValue.timestamps.length - 1);\n    return [await parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];\n}\n\nconst TIMESTAMPS = \"timestamps\";\nclass SignedCertificateTimestampList extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.timestamps = pvutils.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        var _a;\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        (_a = names.optional) !== null && _a !== void 0 ? _a : (names.optional = false);\n        return (new asn1js.OctetString({\n            name: (names.blockName || \"SignedCertificateTimestampList\"),\n            optional: names.optional\n        }));\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js.OctetString) === false) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        const seqStream = new bs.SeqStream({\n            stream: new bs.ByteStream({\n                buffer: schema.valueBlock.valueHex\n            })\n        });\n        const dataLength = seqStream.getUint16();\n        if (dataLength !== seqStream.length) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        while (seqStream.length) {\n            this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n        }\n    }\n    toSchema() {\n        const stream = new bs.SeqStream();\n        let overallLength = 0;\n        const timestampsData = [];\n        for (const timestamp of this.timestamps) {\n            const timestampStream = timestamp.toStream();\n            timestampsData.push(timestampStream);\n            overallLength += timestampStream.stream.buffer.byteLength;\n        }\n        stream.appendUint16(overallLength);\n        for (const timestamp of timestampsData) {\n            stream.appendView(timestamp.stream.view);\n        }\n        return new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n    }\n    toJSON() {\n        return {\n            timestamps: Array.from(this.timestamps, o => o.toJSON())\n        };\n    }\n}\nSignedCertificateTimestampList.CLASS_NAME = \"SignedCertificateTimestampList\";\n\nconst ATTRIBUTES$4 = \"attributes\";\nconst CLEAR_PROPS$11 = [\n    ATTRIBUTES$4\n];\nclass SubjectDirectoryAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ATTRIBUTES$4:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$11);\n        const asn1 = asn1js.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\n            names: {\n                attributes: ATTRIBUTES$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSubjectDirectoryAttributes.CLASS_NAME = \"SubjectDirectoryAttributes\";\n\nclass ExtensionValueFactory {\n    static getItems() {\n        if (!this.types) {\n            this.types = {};\n            ExtensionValueFactory.register(id_SubjectAltName, \"SubjectAltName\", AltName);\n            ExtensionValueFactory.register(id_IssuerAltName, \"IssuerAltName\", AltName);\n            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, \"AuthorityKeyIdentifier\", AuthorityKeyIdentifier);\n            ExtensionValueFactory.register(id_BasicConstraints, \"BasicConstraints\", BasicConstraints);\n            ExtensionValueFactory.register(id_MicrosoftCaVersion, \"MicrosoftCaVersion\", CAVersion);\n            ExtensionValueFactory.register(id_CertificatePolicies, \"CertificatePolicies\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftAppPolicies, \"CertificatePoliciesMicrosoft\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, \"MicrosoftCertTemplateV2\", CertificateTemplate);\n            ExtensionValueFactory.register(id_CRLDistributionPoints, \"CRLDistributionPoints\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_FreshestCRL, \"FreshestCRL\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_ExtKeyUsage, \"ExtKeyUsage\", ExtKeyUsage);\n            ExtensionValueFactory.register(id_CertificateIssuer, \"CertificateIssuer\", GeneralNames);\n            ExtensionValueFactory.register(id_AuthorityInfoAccess, \"AuthorityInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_SubjectInfoAccess, \"SubjectInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_IssuingDistributionPoint, \"IssuingDistributionPoint\", IssuingDistributionPoint);\n            ExtensionValueFactory.register(id_NameConstraints, \"NameConstraints\", NameConstraints);\n            ExtensionValueFactory.register(id_PolicyConstraints, \"PolicyConstraints\", PolicyConstraints);\n            ExtensionValueFactory.register(id_PolicyMappings, \"PolicyMappings\", PolicyMappings);\n            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, \"PrivateKeyUsagePeriod\", PrivateKeyUsagePeriod);\n            ExtensionValueFactory.register(id_QCStatements, \"QCStatements\", QCStatements);\n            ExtensionValueFactory.register(id_SignedCertificateTimestampList, \"SignedCertificateTimestampList\", SignedCertificateTimestampList);\n            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, \"SubjectDirectoryAttributes\", SubjectDirectoryAttributes);\n        }\n        return this.types;\n    }\n    static fromBER(id, raw) {\n        const asn1 = asn1js.fromBER(raw);\n        if (asn1.offset === -1) {\n            return null;\n        }\n        const item = this.find(id);\n        if (item) {\n            try {\n                return new item.type({ schema: asn1.result });\n            }\n            catch (ex) {\n                const res = new item.type();\n                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;\n                return res;\n            }\n        }\n        return asn1.result;\n    }\n    static find(id) {\n        const types = this.getItems();\n        return types[id] || null;\n    }\n    static register(id, name, type) {\n        this.getItems()[id] = { name, type };\n    }\n}\n\nconst EXTN_ID = \"extnID\";\nconst CRITICAL = \"critical\";\nconst EXTN_VALUE = \"extnValue\";\nconst PARSED_VALUE$5 = \"parsedValue\";\nconst CLEAR_PROPS$10 = [\n    EXTN_ID,\n    CRITICAL,\n    EXTN_VALUE\n];\nclass Extension extends PkiObject {\n    get parsedValue() {\n        if (this._parsedValue === undefined) {\n            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);\n            this._parsedValue = parsedValue;\n        }\n        return this._parsedValue || undefined;\n    }\n    set parsedValue(value) {\n        this._parsedValue = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.extnID = pvutils.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));\n        this.critical = pvutils.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));\n        if (EXTN_VALUE in parameters) {\n            this.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\n        }\n        else {\n            this.extnValue = Extension.defaultValues(EXTN_VALUE);\n        }\n        if (PARSED_VALUE$5 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTN_ID:\n                return EMPTY_STRING;\n            case CRITICAL:\n                return false;\n            case EXTN_VALUE:\n                return new asn1js.OctetString();\n            case PARSED_VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.extnID || EMPTY_STRING) }),\n                new asn1js.Boolean({\n                    name: (names.critical || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js.OctetString({ name: (names.extnValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$10);\n        const asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\n            names: {\n                extnID: EXTN_ID,\n                critical: CRITICAL,\n                extnValue: EXTN_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extnID = asn1.result.extnID.valueBlock.toString();\n        if (CRITICAL in asn1.result) {\n            this.critical = asn1.result.critical.valueBlock.value;\n        }\n        this.extnValue = asn1.result.extnValue;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            outputArray.push(new asn1js.Boolean({ value: this.critical }));\n        }\n        outputArray.push(this.extnValue);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            extnID: this.extnID,\n            extnValue: this.extnValue.toJSON(),\n        };\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            object.critical = this.critical;\n        }\n        if (this.parsedValue && this.parsedValue.toJSON) {\n            object.parsedValue = this.parsedValue.toJSON();\n        }\n        return object;\n    }\n}\nExtension.CLASS_NAME = \"Extension\";\n\nconst EXTENSIONS$5 = \"extensions\";\nconst CLEAR_PROPS$$ = [\n    EXTENSIONS$5,\n];\nclass Extensions extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTENSIONS$5:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.extensions || EMPTY_STRING),\n                    value: Extension.schema(names.extension || {})\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$$);\n        const asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({\n            names: {\n                extensions: EXTENSIONS$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.extensions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            extensions: this.extensions.map(o => o.toJSON())\n        };\n    }\n}\nExtensions.CLASS_NAME = \"Extensions\";\n\nconst ISSUER$5 = \"issuer\";\nconst SERIAL_NUMBER$6 = \"serialNumber\";\nconst ISSUER_UID = \"issuerUID\";\nconst CLEAR_PROPS$_ = [\n    ISSUER$5,\n    SERIAL_NUMBER$6,\n    ISSUER_UID,\n];\nclass IssuerSerial extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));\n        if (ISSUER_UID in parameters) {\n            this.issuerUID = pvutils.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER$5:\n                return new GeneralNames();\n            case SERIAL_NUMBER$6:\n                return new asn1js.Integer();\n            case ISSUER_UID:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema(names.issuer || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUID || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$_);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerSerial.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$6,\n                issuerUID: ISSUER_UID\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new GeneralNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n        if (ISSUER_UID in asn1.result)\n            this.issuerUID = asn1.result.issuerUID;\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        });\n        if (this.issuerUID) {\n            result.valueBlock.value.push(this.issuerUID);\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON()\n        };\n        if (this.issuerUID) {\n            result.issuerUID = this.issuerUID.toJSON();\n        }\n        return result;\n    }\n}\nIssuerSerial.CLASS_NAME = \"IssuerSerial\";\n\nconst VERSION$h = \"version\";\nconst BASE_CERTIFICATE_ID$2 = \"baseCertificateID\";\nconst SUBJECT_NAME = \"subjectName\";\nconst ISSUER$4 = \"issuer\";\nconst SIGNATURE$6 = \"signature\";\nconst SERIAL_NUMBER$5 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD$1 = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$3 = \"attributes\";\nconst ISSUER_UNIQUE_ID$2 = \"issuerUniqueID\";\nconst EXTENSIONS$4 = \"extensions\";\nconst CLEAR_PROPS$Z = [\n    VERSION$h,\n    BASE_CERTIFICATE_ID$2,\n    SUBJECT_NAME,\n    ISSUER$4,\n    SIGNATURE$6,\n    SERIAL_NUMBER$5,\n    ATTR_CERT_VALIDITY_PERIOD$1,\n    ATTRIBUTES$3,\n    ISSUER_UNIQUE_ID$2,\n    EXTENSIONS$4,\n];\nclass AttributeCertificateInfoV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));\n        if (BASE_CERTIFICATE_ID$2 in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));\n        }\n        if (SUBJECT_NAME in parameters) {\n            this.subjectName = pvutils.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));\n        }\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));\n        if (ISSUER_UNIQUE_ID$2 in parameters)\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));\n        if (EXTENSIONS$4 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$h:\n                return 0;\n            case BASE_CERTIFICATE_ID$2:\n                return new IssuerSerial();\n            case SUBJECT_NAME:\n                return new GeneralNames();\n            case ISSUER$4:\n                return new GeneralNames();\n            case SIGNATURE$6:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$5:\n                return new asn1js.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD$1:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$3:\n                return [];\n            case ISSUER_UNIQUE_ID$2:\n                return new asn1js.BitString();\n            case EXTENSIONS$4:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.baseCertificateID || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: IssuerSerial.schema().valueBlock.value\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.subjectName || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: GeneralNames.schema().valueBlock.value\n                        }),\n                    ]\n                }),\n                GeneralNames.schema({\n                    names: {\n                        blockName: (names.issuer || EMPTY_STRING)\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Z);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n            names: {\n                version: VERSION$h,\n                baseCertificateID: BASE_CERTIFICATE_ID$2,\n                subjectName: SUBJECT_NAME,\n                issuer: ISSUER$4,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$6\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$5,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD$1\n                    }\n                },\n                attributes: ATTRIBUTES$3,\n                issuerUniqueID: ISSUER_UNIQUE_ID$2,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$4\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (BASE_CERTIFICATE_ID$2 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (SUBJECT_NAME in asn1.result) {\n            this.subjectName = new GeneralNames({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.subjectName.valueBlock.value\n                })\n            });\n        }\n        this.issuer = asn1.result.issuer;\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$2 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$4 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [new asn1js.Integer({ value: this.version })]\n        });\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.subjectName) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.subjectName.toSchema().valueBlock.value\n            }));\n        }\n        result.valueBlock.value.push(this.issuer.toSchema());\n        result.valueBlock.value.push(this.signature.toSchema());\n        result.valueBlock.value.push(this.serialNumber);\n        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n        result.valueBlock.value.push(new asn1js.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version\n        };\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.subjectName) {\n            result.subjectName = this.subjectName.toJSON();\n        }\n        result.issuer = this.issuer.toJSON();\n        result.signature = this.signature.toJSON();\n        result.serialNumber = this.serialNumber.toJSON();\n        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n        result.attributes = Array.from(this.attributes, o => o.toJSON());\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV1.CLASS_NAME = \"AttributeCertificateInfoV1\";\n\nconst ACINFO$1 = \"acinfo\";\nconst SIGNATURE_ALGORITHM$7 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$4 = \"signatureValue\";\nconst CLEAR_PROPS$Y = [\n    ACINFO$1,\n    SIGNATURE_VALUE$4,\n    SIGNATURE_ALGORITHM$7\n];\nclass AttributeCertificateV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO$1:\n                return new AttributeCertificateInfoV1();\n            case SIGNATURE_ALGORITHM$7:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$4:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV1.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Y);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV1.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO$1\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$7\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV1.CLASS_NAME = \"AttributeCertificateV1\";\n\nconst DIGESTED_OBJECT_TYPE = \"digestedObjectType\";\nconst OTHER_OBJECT_TYPE_ID = \"otherObjectTypeID\";\nconst DIGEST_ALGORITHM$2 = \"digestAlgorithm\";\nconst OBJECT_DIGEST = \"objectDigest\";\nconst CLEAR_PROPS$X = [\n    DIGESTED_OBJECT_TYPE,\n    OTHER_OBJECT_TYPE_ID,\n    DIGEST_ALGORITHM$2,\n    OBJECT_DIGEST,\n];\nclass ObjectDigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestedObjectType = pvutils.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));\n        if (OTHER_OBJECT_TYPE_ID in parameters) {\n            this.otherObjectTypeID = pvutils.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));\n        }\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));\n        this.objectDigest = pvutils.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGESTED_OBJECT_TYPE:\n                return new asn1js.Enumerated();\n            case OTHER_OBJECT_TYPE_ID:\n                return new asn1js.ObjectIdentifier();\n            case DIGEST_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case OBJECT_DIGEST:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Enumerated({ name: (names.digestedObjectType || EMPTY_STRING) }),\n                new asn1js.ObjectIdentifier({\n                    optional: true,\n                    name: (names.otherObjectTypeID || EMPTY_STRING)\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n                new asn1js.BitString({ name: (names.objectDigest || EMPTY_STRING) }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$X);\n        const asn1 = asn1js.compareSchema(schema, schema, ObjectDigestInfo.schema({\n            names: {\n                digestedObjectType: DIGESTED_OBJECT_TYPE,\n                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$2\n                    }\n                },\n                objectDigest: OBJECT_DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestedObjectType = asn1.result.digestedObjectType;\n        if (OTHER_OBJECT_TYPE_ID in asn1.result) {\n            this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n        }\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.objectDigest = asn1.result.objectDigest;\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [this.digestedObjectType]\n        });\n        if (this.otherObjectTypeID) {\n            result.valueBlock.value.push(this.otherObjectTypeID);\n        }\n        result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n        result.valueBlock.value.push(this.objectDigest);\n        return result;\n    }\n    toJSON() {\n        const result = {\n            digestedObjectType: this.digestedObjectType.toJSON(),\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            objectDigest: this.objectDigest.toJSON(),\n        };\n        if (this.otherObjectTypeID) {\n            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n        }\n        return result;\n    }\n}\nObjectDigestInfo.CLASS_NAME = \"ObjectDigestInfo\";\n\nconst ISSUER_NAME = \"issuerName\";\nconst BASE_CERTIFICATE_ID$1 = \"baseCertificateID\";\nconst OBJECT_DIGEST_INFO$1 = \"objectDigestInfo\";\nconst CLEAR_PROPS$W = [\n    ISSUER_NAME,\n    BASE_CERTIFICATE_ID$1,\n    OBJECT_DIGEST_INFO$1\n];\nclass V2Form extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (ISSUER_NAME in parameters) {\n            this.issuerName = pvutils.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));\n        }\n        if (BASE_CERTIFICATE_ID$1 in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));\n        }\n        if (OBJECT_DIGEST_INFO$1 in parameters) {\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_NAME:\n                return new GeneralNames();\n            case BASE_CERTIFICATE_ID$1:\n                return new IssuerSerial();\n            case OBJECT_DIGEST_INFO$1:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema({\n                    names: {\n                        blockName: names.issuerName\n                    }\n                }, true),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$W);\n        const asn1 = asn1js.compareSchema(schema, schema, V2Form.schema({\n            names: {\n                issuerName: ISSUER_NAME,\n                baseCertificateID: BASE_CERTIFICATE_ID$1,\n                objectDigestInfo: OBJECT_DIGEST_INFO$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ISSUER_NAME in asn1.result)\n            this.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n        if (BASE_CERTIFICATE_ID$1 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO$1 in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence();\n        if (this.issuerName)\n            result.valueBlock.value.push(this.issuerName.toSchema());\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.issuerName) {\n            result.issuerName = this.issuerName.toJSON();\n        }\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nV2Form.CLASS_NAME = \"V2Form\";\n\nconst BASE_CERTIFICATE_ID = \"baseCertificateID\";\nconst ENTITY_NAME = \"entityName\";\nconst OBJECT_DIGEST_INFO = \"objectDigestInfo\";\nconst CLEAR_PROPS$V = [\n    BASE_CERTIFICATE_ID,\n    ENTITY_NAME,\n    OBJECT_DIGEST_INFO\n];\nclass Holder extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (BASE_CERTIFICATE_ID in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));\n        }\n        if (ENTITY_NAME in parameters) {\n            this.entityName = pvutils.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));\n        }\n        if (OBJECT_DIGEST_INFO in parameters) {\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE_CERTIFICATE_ID:\n                return new IssuerSerial();\n            case ENTITY_NAME:\n                return new GeneralNames();\n            case OBJECT_DIGEST_INFO:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.entityName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: GeneralNames.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$V);\n        const asn1 = asn1js.compareSchema(schema, schema, Holder.schema({\n            names: {\n                baseCertificateID: BASE_CERTIFICATE_ID,\n                entityName: ENTITY_NAME,\n                objectDigestInfo: OBJECT_DIGEST_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (BASE_CERTIFICATE_ID in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (ENTITY_NAME in asn1.result) {\n            this.entityName = new GeneralNames({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.entityName.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence();\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.entityName) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.entityName.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.entityName) {\n            result.entityName = this.entityName.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nHolder.CLASS_NAME = \"Holder\";\n\nconst VERSION$g = \"version\";\nconst HOLDER = \"holder\";\nconst ISSUER$3 = \"issuer\";\nconst SIGNATURE$5 = \"signature\";\nconst SERIAL_NUMBER$4 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$2 = \"attributes\";\nconst ISSUER_UNIQUE_ID$1 = \"issuerUniqueID\";\nconst EXTENSIONS$3 = \"extensions\";\nconst CLEAR_PROPS$U = [\n    VERSION$g,\n    HOLDER,\n    ISSUER$3,\n    SIGNATURE$5,\n    SERIAL_NUMBER$4,\n    ATTR_CERT_VALIDITY_PERIOD,\n    ATTRIBUTES$2,\n    ISSUER_UNIQUE_ID$1,\n    EXTENSIONS$3\n];\nclass AttributeCertificateInfoV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));\n        this.holder = pvutils.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));\n        if (ISSUER_UNIQUE_ID$1 in parameters) {\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));\n        }\n        if (EXTENSIONS$3 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$g:\n                return 1;\n            case HOLDER:\n                return new Holder();\n            case ISSUER$3:\n                return {};\n            case SIGNATURE$5:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$4:\n                return new asn1js.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$2:\n                return [];\n            case ISSUER_UNIQUE_ID$1:\n                return new asn1js.BitString();\n            case EXTENSIONS$3:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                Holder.schema(names.holder || {}),\n                new asn1js.Choice({\n                    value: [\n                        GeneralNames.schema({\n                            names: {\n                                blockName: (names.issuer || EMPTY_STRING)\n                            }\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.issuer || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: V2Form.schema().valueBlock.value\n                        })\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$U);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n            names: {\n                version: VERSION$g,\n                holder: {\n                    names: {\n                        blockName: HOLDER\n                    }\n                },\n                issuer: ISSUER$3,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$4,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD\n                    }\n                },\n                attributes: ATTRIBUTES$2,\n                issuerUniqueID: ISSUER_UNIQUE_ID$1,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$3\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.holder = new Holder({ schema: asn1.result.holder });\n        switch (asn1.result.issuer.idBlock.tagClass) {\n            case 3:\n                this.issuer = new V2Form({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.issuer.valueBlock.value\n                    })\n                });\n                break;\n            case 1:\n            default:\n                throw new Error(\"Incorrect value for 'issuer' in AttributeCertificateInfoV2\");\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$1 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$3 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [\n                new asn1js.Integer({ value: this.version }),\n                this.holder.toSchema(),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.issuer.toSchema().valueBlock.value\n                }),\n                this.signature.toSchema(),\n                this.serialNumber,\n                this.attrCertValidityPeriod.toSchema(),\n                new asn1js.Sequence({\n                    value: Array.from(this.attributes, o => o.toSchema())\n                })\n            ]\n        });\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version,\n            holder: this.holder.toJSON(),\n            issuer: this.issuer.toJSON(),\n            signature: this.signature.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV2.CLASS_NAME = \"AttributeCertificateInfoV2\";\n\nconst ACINFO = \"acinfo\";\nconst SIGNATURE_ALGORITHM$6 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$3 = \"signatureValue\";\nconst CLEAR_PROPS$T = [\n    ACINFO,\n    SIGNATURE_ALGORITHM$6,\n    SIGNATURE_VALUE$3,\n];\nclass AttributeCertificateV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO:\n                return new AttributeCertificateInfoV2();\n            case SIGNATURE_ALGORITHM$6:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$3:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV2.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$T);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV2.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$6\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV2.CLASS_NAME = \"AttributeCertificateV2\";\n\nconst CONTENT_TYPE = \"contentType\";\nconst CONTENT = \"content\";\nconst CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];\nclass ContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));\n        this.content = pvutils.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return EMPTY_STRING;\n            case CONTENT:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return (typeof memberValue === \"string\" &&\n                    memberValue === this.defaultValues(CONTENT_TYPE));\n            case CONTENT:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        if ((\"optional\" in names) === false) {\n            names.optional = false;\n        }\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"ContentInfo\"),\n            optional: names.optional,\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.contentType || CONTENT_TYPE) }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.content || CONTENT) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$S);\n        const asn1 = asn1js.compareSchema(schema, schema, ContentInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.content = asn1.result.content;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.contentType }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.content]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            contentType: this.contentType\n        };\n        if (!(this.content instanceof asn1js.Any)) {\n            object.content = this.content.toJSON();\n        }\n        return object;\n    }\n}\nContentInfo.CLASS_NAME = \"ContentInfo\";\nContentInfo.DATA = id_ContentType_Data;\nContentInfo.SIGNED_DATA = id_ContentType_SignedData;\nContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;\nContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;\n\nconst TYPE$1 = \"type\";\nconst VALUE$4 = \"value\";\nconst UTC_TIME_NAME = \"utcTimeName\";\nconst GENERAL_TIME_NAME = \"generalTimeName\";\nconst CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];\nvar TimeType;\n(function (TimeType) {\n    TimeType[TimeType[\"UTCTime\"] = 0] = \"UTCTime\";\n    TimeType[TimeType[\"GeneralizedTime\"] = 1] = \"GeneralizedTime\";\n    TimeType[TimeType[\"empty\"] = 2] = \"empty\";\n})(TimeType || (TimeType = {}));\nclass Time extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));\n        this.value = pvutils.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$1:\n                return 0;\n            case VALUE$4:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            optional,\n            value: [\n                new asn1js.UTCTime({ name: (names.utcTimeName || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({ name: (names.generalTimeName || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$R);\n        const asn1 = asn1js.compareSchema(schema, schema, Time.schema({\n            names: {\n                utcTimeName: UTC_TIME_NAME,\n                generalTimeName: GENERAL_TIME_NAME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (UTC_TIME_NAME in asn1.result) {\n            this.type = 0;\n            this.value = asn1.result.utcTimeName.toDate();\n        }\n        if (GENERAL_TIME_NAME in asn1.result) {\n            this.type = 1;\n            this.value = asn1.result.generalTimeName.toDate();\n        }\n    }\n    toSchema() {\n        if (this.type === 0) {\n            return new asn1js.UTCTime({ valueDate: this.value });\n        }\n        else if (this.type === 1) {\n            return new asn1js.GeneralizedTime({ valueDate: this.value });\n        }\n        return {};\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            value: this.value\n        };\n    }\n}\nTime.CLASS_NAME = \"Time\";\n\nconst TBS$4 = \"tbs\";\nconst VERSION$f = \"version\";\nconst SERIAL_NUMBER$3 = \"serialNumber\";\nconst SIGNATURE$4 = \"signature\";\nconst ISSUER$2 = \"issuer\";\nconst NOT_BEFORE = \"notBefore\";\nconst NOT_AFTER = \"notAfter\";\nconst SUBJECT$1 = \"subject\";\nconst SUBJECT_PUBLIC_KEY_INFO = \"subjectPublicKeyInfo\";\nconst ISSUER_UNIQUE_ID = \"issuerUniqueID\";\nconst SUBJECT_UNIQUE_ID = \"subjectUniqueID\";\nconst EXTENSIONS$2 = \"extensions\";\nconst SIGNATURE_ALGORITHM$5 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$2 = \"signatureValue\";\nconst TBS_CERTIFICATE = \"tbsCertificate\";\nconst TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;\nconst TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;\nconst TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;\nconst TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;\nconst TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;\nconst TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;\nconst TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;\nconst TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;\nconst TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;\nconst CLEAR_PROPS$Q = [\n    TBS_CERTIFICATE,\n    TBS_CERTIFICATE_VERSION,\n    TBS_CERTIFICATE_SERIAL_NUMBER,\n    TBS_CERTIFICATE_SIGNATURE,\n    TBS_CERTIFICATE_ISSUER,\n    TBS_CERTIFICATE_NOT_BEFORE,\n    TBS_CERTIFICATE_NOT_AFTER,\n    TBS_CERTIFICATE_SUBJECT,\n    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,\n    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,\n    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,\n    TBS_CERTIFICATE_EXTENSIONS,\n    SIGNATURE_ALGORITHM$5,\n    SIGNATURE_VALUE$2\n];\nfunction tbsCertificate(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.blockName || TBS_CERTIFICATE),\n        value: [\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Integer({ name: (names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION) })\n                ]\n            }),\n            new asn1js.Integer({ name: (names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER) }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERTIFICATE_ISSUER\n                }\n            }),\n            new asn1js.Sequence({\n                name: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\n                value: [\n                    Time.schema(names.notBefore || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,\n                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE\n                        }\n                    }),\n                    Time.schema(names.notAfter || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,\n                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER\n                        }\n                    })\n                ]\n            }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY\n                }\n            }),\n            new asn1js.Primitive({\n                name: (names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                }\n            }),\n            new asn1js.Primitive({\n                name: (names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                }\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [Extensions.schema(names.extensions || {\n                        names: {\n                            blockName: TBS_CERTIFICATE_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nclass Certificate extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));\n        this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));\n        this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));\n        if (ISSUER_UNIQUE_ID in parameters) {\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));\n        }\n        if (SUBJECT_UNIQUE_ID in parameters) {\n            this.subjectUniqueID = pvutils.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));\n        }\n        if (EXTENSIONS$2 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$4:\n                return EMPTY_BUFFER;\n            case VERSION$f:\n                return 0;\n            case SERIAL_NUMBER$3:\n                return new asn1js.Integer();\n            case SIGNATURE$4:\n                return new AlgorithmIdentifier();\n            case ISSUER$2:\n                return new RelativeDistinguishedNames();\n            case NOT_BEFORE:\n                return new Time();\n            case NOT_AFTER:\n                return new Time();\n            case SUBJECT$1:\n                return new RelativeDistinguishedNames();\n            case SUBJECT_PUBLIC_KEY_INFO:\n                return new PublicKeyInfo();\n            case ISSUER_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case SUBJECT_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case EXTENSIONS$2:\n                return [];\n            case SIGNATURE_ALGORITHM$5:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$2:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                tbsCertificate(names.tbsCertificate),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$5\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$2) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Q);\n        const asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({\n            names: {\n                tbsCertificate: {\n                    names: {\n                        extensions: {\n                            names: {\n                                extensions: TBS_CERTIFICATE_EXTENSIONS\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;\n        if (TBS_CERTIFICATE_VERSION in asn1.result)\n            this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;\n        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERTIFICATE_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_ISSUER] });\n        this.notBefore = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE] });\n        this.notAfter = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER] });\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY] });\n        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result)\n            this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result)\n            this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({ schema: element }));\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Integer({ value: this.version })\n                ]\n            }));\n        }\n        outputArray.push(this.serialNumber);\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(new asn1js.Sequence({\n            value: [\n                this.notBefore.toSchema(),\n                this.notAfter.toSchema()\n            ]\n        }));\n        outputArray.push(this.subject.toSchema());\n        outputArray.push(this.subjectPublicKeyInfo.toSchema());\n        if (this.issuerUniqueID) {\n            outputArray.push(new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.issuerUniqueID\n            }));\n        }\n        if (this.subjectUniqueID) {\n            outputArray.push(new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.subjectUniqueID\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js.Sequence({\n                        value: Array.from(this.extensions, o => o.toSchema())\n                    })]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return Certificate.schema().value[0];\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            serialNumber: this.serialNumber.toJSON(),\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            notBefore: this.notBefore.toJSON(),\n            notAfter: this.notAfter.toJSON(),\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            res.version = this.version;\n        }\n        if (this.issuerUniqueID) {\n            res.issuerUniqueID = pvtsutils.Convert.ToHex(this.issuerUniqueID);\n        }\n        if (this.subjectUniqueID) {\n            res.subjectUniqueID = pvtsutils.Convert.ToHex(this.subjectUniqueID);\n        }\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n    async getKeyHash(hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        return crypto.digest({ name: hashAlgorithm }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParameters.parameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(issuerCertificate, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (issuerCertificate) {\n            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\n        }\n        else if (this.issuer.isEqual(this.subject)) {\n            subjectPublicKeyInfo = this.subjectPublicKeyInfo;\n        }\n        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {\n            throw new Error(\"Please provide issuer certificate as a parameter\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificate.CLASS_NAME = \"Certificate\";\nfunction checkCA(cert, signerCert = null) {\n    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {\n        return null;\n    }\n    let isCA = false;\n    if (cert.extensions) {\n        for (const extension of cert.extensions) {\n            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {\n                if (extension.parsedValue.cA) {\n                    isCA = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (isCA) {\n        return cert;\n    }\n    return null;\n}\n\nconst CERT_ID$1 = \"certId\";\nconst CERT_VALUE = \"certValue\";\nconst PARSED_VALUE$4 = \"parsedValue\";\nconst CLEAR_PROPS$P = [\n    CERT_ID$1,\n    CERT_VALUE\n];\nclass CertBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certId = pvutils.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));\n        this.certValue = pvutils.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));\n        if (PARSED_VALUE$4 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return EMPTY_STRING;\n            case CERT_VALUE:\n                return (new asn1js.Any());\n            case PARSED_VALUE$4:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return (memberValue === EMPTY_STRING);\n            case CERT_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case PARSED_VALUE$4:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$P);\n        const asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({\n            names: {\n                id: CERT_ID$1,\n                value: CERT_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certId = asn1.result.certId.valueBlock.toString();\n        this.certValue = asn1.result.certValue;\n        const certValueHex = this.certValue.valueBlock.valueHexView;\n        switch (this.certId) {\n            case id_CertBag_X509Certificate:\n                {\n                    try {\n                        this.parsedValue = Certificate.fromBER(certValueHex);\n                    }\n                    catch (ex) {\n                        AttributeCertificateV2.fromBER(certValueHex);\n                    }\n                }\n                break;\n            case id_CertBag_AttributeCertificate:\n                {\n                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);\n                }\n                break;\n            case id_CertBag_SDSICertificate:\n            default:\n                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);\n        }\n    }\n    toSchema() {\n        if (PARSED_VALUE$4 in this) {\n            if (\"acinfo\" in this.parsedValue) {\n                this.certId = id_CertBag_AttributeCertificate;\n            }\n            else {\n                this.certId = id_CertBag_X509Certificate;\n            }\n            this.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.certId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            certId: this.certId,\n            certValue: this.certValue.toJSON()\n        };\n    }\n}\nCertBag.CLASS_NAME = \"CertBag\";\n\nconst USER_CERTIFICATE = \"userCertificate\";\nconst REVOCATION_DATE = \"revocationDate\";\nconst CRL_ENTRY_EXTENSIONS = \"crlEntryExtensions\";\nconst CLEAR_PROPS$O = [\n    USER_CERTIFICATE,\n    REVOCATION_DATE,\n    CRL_ENTRY_EXTENSIONS\n];\nclass RevokedCertificate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.userCertificate = pvutils.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));\n        this.revocationDate = pvutils.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));\n        if (CRL_ENTRY_EXTENSIONS in parameters) {\n            this.crlEntryExtensions = pvutils.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case USER_CERTIFICATE:\n                return new asn1js.Integer();\n            case REVOCATION_DATE:\n                return new Time();\n            case CRL_ENTRY_EXTENSIONS:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.userCertificate || USER_CERTIFICATE) }),\n                Time.schema({\n                    names: {\n                        utcTimeName: (names.revocationDate || REVOCATION_DATE),\n                        generalTimeName: (names.revocationDate || REVOCATION_DATE)\n                    }\n                }),\n                Extensions.schema({\n                    names: {\n                        blockName: (names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS)\n                    }\n                }, true)\n            ]\n        });\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$O);\n        const asn1 = asn1js.compareSchema(schema, schema, RevokedCertificate.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.userCertificate = asn1.result.userCertificate;\n        this.revocationDate = new Time({ schema: asn1.result.revocationDate });\n        if (CRL_ENTRY_EXTENSIONS in asn1.result) {\n            this.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            this.userCertificate,\n            this.revocationDate.toSchema()\n        ];\n        if (this.crlEntryExtensions) {\n            outputArray.push(this.crlEntryExtensions.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            userCertificate: this.userCertificate.toJSON(),\n            revocationDate: this.revocationDate.toJSON(),\n        };\n        if (this.crlEntryExtensions) {\n            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();\n        }\n        return res;\n    }\n}\nRevokedCertificate.CLASS_NAME = \"RevokedCertificate\";\n\nconst TBS$3 = \"tbs\";\nconst VERSION$e = \"version\";\nconst SIGNATURE$3 = \"signature\";\nconst ISSUER$1 = \"issuer\";\nconst THIS_UPDATE$1 = \"thisUpdate\";\nconst NEXT_UPDATE$1 = \"nextUpdate\";\nconst REVOKED_CERTIFICATES = \"revokedCertificates\";\nconst CRL_EXTENSIONS = \"crlExtensions\";\nconst SIGNATURE_ALGORITHM$4 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$1 = \"signatureValue\";\nconst TBS_CERT_LIST = \"tbsCertList\";\nconst TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;\nconst TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;\nconst TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;\nconst TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;\nconst TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;\nconst TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;\nconst TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;\nconst CLEAR_PROPS$N = [\n    TBS_CERT_LIST,\n    TBS_CERT_LIST_VERSION,\n    TBS_CERT_LIST_SIGNATURE,\n    TBS_CERT_LIST_ISSUER,\n    TBS_CERT_LIST_THIS_UPDATE,\n    TBS_CERT_LIST_NEXT_UPDATE,\n    TBS_CERT_LIST_REVOKED_CERTIFICATES,\n    TBS_CERT_LIST_EXTENSIONS,\n    SIGNATURE_ALGORITHM$4,\n    SIGNATURE_VALUE$1\n];\nfunction tbsCertList(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.blockName || TBS_CERT_LIST),\n        value: [\n            new asn1js.Integer({\n                optional: true,\n                name: (names.tbsCertListVersion || TBS_CERT_LIST_VERSION),\n                value: 2\n            }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERT_LIST_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERT_LIST_ISSUER\n                }\n            }),\n            Time.schema(names.tbsCertListThisUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE\n                }\n            }),\n            Time.schema(names.tbsCertListNextUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE\n                }\n            }, true),\n            new asn1js.Sequence({\n                optional: true,\n                value: [\n                    new asn1js.Repeated({\n                        name: (names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES),\n                        value: new asn1js.Sequence({\n                            value: [\n                                new asn1js.Integer(),\n                                Time.schema(),\n                                Extensions.schema({}, true)\n                            ]\n                        })\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [Extensions.schema(names.crlExtensions || {\n                        names: {\n                            blockName: TBS_CERT_LIST_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nconst WELL_KNOWN_EXTENSIONS = [\n    id_AuthorityKeyIdentifier,\n    id_IssuerAltName,\n    id_CRLNumber,\n    id_BaseCRLNumber,\n    id_IssuingDistributionPoint,\n    id_FreshestCRL,\n    id_AuthorityInfoAccess,\n    id_CRLReason,\n    id_InvalidityDate,\n    id_CertificateIssuer,\n];\nclass CertificateRevocationList extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));\n        if (NEXT_UPDATE$1 in parameters) {\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));\n        }\n        if (REVOKED_CERTIFICATES in parameters) {\n            this.revokedCertificates = pvutils.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));\n        }\n        if (CRL_EXTENSIONS in parameters) {\n            this.crlExtensions = pvutils.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$3:\n                return EMPTY_BUFFER;\n            case VERSION$e:\n                return 0;\n            case SIGNATURE$3:\n                return new AlgorithmIdentifier();\n            case ISSUER$1:\n                return new RelativeDistinguishedNames();\n            case THIS_UPDATE$1:\n                return new Time();\n            case NEXT_UPDATE$1:\n                return new Time();\n            case REVOKED_CERTIFICATES:\n                return [];\n            case CRL_EXTENSIONS:\n                return new Extensions();\n            case SIGNATURE_ALGORITHM$4:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$1:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"CertificateList\"),\n            value: [\n                tbsCertList(parameters),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$4\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$1) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$N);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateRevocationList.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;\n        if (TBS_CERT_LIST_VERSION in asn1.result) {\n            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERT_LIST_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERT_LIST_ISSUER] });\n        this.thisUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE] });\n        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {\n            this.nextUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE] });\n        }\n        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {\n            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({ schema: element }));\n        }\n        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {\n            this.crlExtensions = new Extensions({ schema: asn1.result[TBS_CERT_LIST_EXTENSIONS] });\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n        }\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(this.thisUpdate.toSchema());\n        if (this.nextUpdate) {\n            outputArray.push(this.nextUpdate.toSchema());\n        }\n        if (this.revokedCertificates) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.revokedCertificates, o => o.toSchema())\n            }));\n        }\n        if (this.crlExtensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.crlExtensions.toSchema()\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (!encodeFlag) {\n            if (!this.tbsView.byteLength) {\n                return CertificateRevocationList.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate Revocation List\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            thisUpdate: this.thisUpdate.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON()\n        };\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e))\n            res.version = this.version;\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate.toJSON();\n        }\n        if (this.revokedCertificates) {\n            res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());\n        }\n        if (this.crlExtensions) {\n            res.crlExtensions = this.crlExtensions.toJSON();\n        }\n        return res;\n    }\n    isCertificateRevoked(certificate) {\n        if (!this.issuer.isEqual(certificate.issuer)) {\n            return false;\n        }\n        if (!this.revokedCertificates) {\n            return false;\n        }\n        for (const revokedCertificate of this.revokedCertificates) {\n            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const { parameters } = signatureParameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (parameters.issuerCertificate) {\n            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\n            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {\n                return false;\n            }\n        }\n        if (parameters.publicKeyInfo) {\n            subjectPublicKeyInfo = parameters.publicKeyInfo;\n        }\n        if (!subjectPublicKeyInfo) {\n            throw new Error(\"Issuer's certificate must be provided as an input parameter\");\n        }\n        if (this.crlExtensions) {\n            for (const extension of this.crlExtensions.extensions) {\n                if (extension.critical) {\n                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID))\n                        return false;\n                }\n            }\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificateRevocationList.CLASS_NAME = \"CertificateRevocationList\";\n\nconst CRL_ID = \"crlId\";\nconst CRL_VALUE = \"crlValue\";\nconst PARSED_VALUE$3 = \"parsedValue\";\nconst CLEAR_PROPS$M = [\n    CRL_ID,\n    CRL_VALUE,\n];\nclass CRLBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crlId = pvutils.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));\n        this.crlValue = pvutils.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));\n        if (PARSED_VALUE$3 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRL_ID:\n                return EMPTY_STRING;\n            case CRL_VALUE:\n                return (new asn1js.Any());\n            case PARSED_VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CRL_ID:\n                return (memberValue === EMPTY_STRING);\n            case CRL_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case PARSED_VALUE$3:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$M);\n        const asn1 = asn1js.compareSchema(schema, schema, CRLBag.schema({\n            names: {\n                id: CRL_ID,\n                value: CRL_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.crlId = asn1.result.crlId.valueBlock.toString();\n        this.crlValue = asn1.result.crlValue;\n        switch (this.crlId) {\n            case id_CRLBag_X509CRL:\n                {\n                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);\n                }\n                break;\n            default:\n                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);\n        }\n    }\n    toSchema() {\n        if (this.parsedValue) {\n            this.crlId = id_CRLBag_X509CRL;\n            this.crlValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.crlId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.crlValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            crlId: this.crlId,\n            crlValue: this.crlValue.toJSON()\n        };\n    }\n}\nCRLBag.CLASS_NAME = \"CRLBag\";\n\nconst VERSION$d = \"version\";\nconst ENCRYPTED_CONTENT_INFO$1 = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS$1 = \"unprotectedAttrs\";\nconst CLEAR_PROPS$L = [\n    VERSION$d,\n    ENCRYPTED_CONTENT_INFO$1,\n    UNPROTECTED_ATTRS$1,\n];\nclass EncryptedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));\n        if (UNPROTECTED_ATTRS$1 in parameters) {\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$d:\n                return 0;\n            case ENCRYPTED_CONTENT_INFO$1:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$d:\n                return (memberValue === 0);\n            case ENCRYPTED_CONTENT_INFO$1:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\n            case UNPROTECTED_ATTRS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$L);\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({\n            names: {\n                version: VERSION$d,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO$1\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS$1 in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            encryptedContentInfo: this.encryptedContentInfo.toJSON()\n        };\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    async encrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const encryptParams = {\n            ...parameters,\n            contentType: \"1.2.840.113549.1.7.1\",\n        };\n        this.encryptedContentInfo = await crypto.encryptEncryptedContentInfo(encryptParams);\n    }\n    async decrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const decryptParams = {\n            ...parameters,\n            encryptedContentInfo: this.encryptedContentInfo,\n        };\n        return crypto.decryptEncryptedContentInfo(decryptParams);\n    }\n}\nEncryptedData.CLASS_NAME = \"EncryptedData\";\n\nconst ENCRYPTION_ALGORITHM = \"encryptionAlgorithm\";\nconst ENCRYPTED_DATA = \"encryptedData\";\nconst PARSED_VALUE$2 = \"parsedValue\";\nconst CLEAR_PROPS$K = [\n    ENCRYPTION_ALGORITHM,\n    ENCRYPTED_DATA,\n];\nclass PKCS8ShroudedKeyBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptionAlgorithm = pvutils.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));\n        this.encryptedData = pvutils.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));\n        if (PARSED_VALUE$2 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return (new AlgorithmIdentifier());\n            case ENCRYPTED_DATA:\n                return (new asn1js.OctetString());\n            case PARSED_VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_DATA:\n                return (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\n            case PARSED_VALUE$2:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.OctetString({ name: (names.encryptedData || ENCRYPTED_DATA) }),\n                        new asn1js.OctetString({\n                            idBlock: {\n                                isConstructed: true\n                            },\n                            name: (names.encryptedData || ENCRYPTED_DATA)\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$K);\n        const asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n            names: {\n                encryptionAlgorithm: {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedData: ENCRYPTED_DATA\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\n        this.encryptedData = asn1.result.encryptedData;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.encryptionAlgorithm.toSchema(),\n                this.encryptedData\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n            encryptedData: this.encryptedData.toJSON(),\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        const cmsEncrypted = new EncryptedData({\n            encryptedContentInfo: new EncryptedContentInfo({\n                contentEncryptionAlgorithm: this.encryptionAlgorithm,\n                encryptedContent: this.encryptedData\n            })\n        });\n        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);\n        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!this.parsedValue) {\n            throw new Error(\"Please initialize \\\"parsedValue\\\" first\");\n        }\n        const cmsEncrypted = new EncryptedData();\n        const encryptParams = {\n            ...parameters,\n            contentToEncrypt: this.parsedValue.toSchema().toBER(false),\n        };\n        await cmsEncrypted.encrypt(encryptParams, crypto);\n        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"The filed `encryptedContent` in EncryptedContentInfo is empty\");\n        }\n        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n    }\n}\nPKCS8ShroudedKeyBag.CLASS_NAME = \"PKCS8ShroudedKeyBag\";\n\nconst SECRET_TYPE_ID = \"secretTypeId\";\nconst SECRET_VALUE = \"secretValue\";\nconst CLEAR_PROPS$J = [\n    SECRET_TYPE_ID,\n    SECRET_VALUE,\n];\nclass SecretBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.secretTypeId = pvutils.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));\n        this.secretValue = pvutils.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return EMPTY_STRING;\n            case SECRET_VALUE:\n                return (new asn1js.Any());\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return (memberValue === EMPTY_STRING);\n            case SECRET_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$J);\n        const asn1 = asn1js.compareSchema(schema, schema, SecretBag.schema({\n            names: {\n                id: SECRET_TYPE_ID,\n                value: SECRET_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\n        this.secretValue = asn1.result.secretValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.secretTypeId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.secretValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            secretTypeId: this.secretTypeId,\n            secretValue: this.secretValue.toJSON()\n        };\n    }\n}\nSecretBag.CLASS_NAME = \"SecretBag\";\n\nclass SafeBagValueFactory {\n    static getItems() {\n        if (!this.items) {\n            this.items = {};\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.1\", PrivateKeyInfo);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.2\", PKCS8ShroudedKeyBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.3\", CertBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.4\", CRLBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.5\", SecretBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.6\", SafeContents);\n        }\n        return this.items;\n    }\n    static register(id, type) {\n        this.getItems()[id] = type;\n    }\n    static find(id) {\n        return this.getItems()[id] || null;\n    }\n}\n\nconst BAG_ID = \"bagId\";\nconst BAG_VALUE = \"bagValue\";\nconst BAG_ATTRIBUTES = \"bagAttributes\";\nconst CLEAR_PROPS$I = [\n    BAG_ID,\n    BAG_VALUE,\n    BAG_ATTRIBUTES\n];\nclass SafeBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.bagId = pvutils.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));\n        this.bagValue = pvutils.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));\n        if (BAG_ATTRIBUTES in parameters) {\n            this.bagAttributes = pvutils.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BAG_ID:\n                return EMPTY_STRING;\n            case BAG_VALUE:\n                return (new asn1js.Any());\n            case BAG_ATTRIBUTES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case BAG_ID:\n                return (memberValue === EMPTY_STRING);\n            case BAG_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case BAG_ATTRIBUTES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.bagId || BAG_ID) }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.bagValue || BAG_VALUE) })]\n                }),\n                new asn1js.Set({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.bagAttributes || BAG_ATTRIBUTES),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$I);\n        const asn1 = asn1js.compareSchema(schema, schema, SafeBag.schema({\n            names: {\n                bagId: BAG_ID,\n                bagValue: BAG_VALUE,\n                bagAttributes: BAG_ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.bagId = asn1.result.bagId.valueBlock.toString();\n        const bagType = SafeBagValueFactory.find(this.bagId);\n        if (!bagType) {\n            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);\n        }\n        this.bagValue = new bagType({ schema: asn1.result.bagValue });\n        if (BAG_ATTRIBUTES in asn1.result) {\n            this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.ObjectIdentifier({ value: this.bagId }),\n            new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.bagValue.toSchema()]\n            })\n        ];\n        if (this.bagAttributes) {\n            outputArray.push(new asn1js.Set({\n                value: Array.from(this.bagAttributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            bagId: this.bagId,\n            bagValue: this.bagValue.toJSON()\n        };\n        if (this.bagAttributes) {\n            output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());\n        }\n        return output;\n    }\n}\nSafeBag.CLASS_NAME = \"SafeBag\";\n\nconst SAFE_BUGS = \"safeBags\";\nclass SafeContents extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeBags = pvutils.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.safeBags || EMPTY_STRING),\n                    value: SafeBag.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SAFE_BUGS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, SafeContents.schema({\n            names: {\n                safeBags: SAFE_BUGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.safeBags, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeBags: Array.from(this.safeBags, o => o.toJSON())\n        };\n    }\n}\nSafeContents.CLASS_NAME = \"SafeContents\";\n\nconst OTHER_CERT_FORMAT = \"otherCertFormat\";\nconst OTHER_CERT = \"otherCert\";\nconst CLEAR_PROPS$H = [\n    OTHER_CERT_FORMAT,\n    OTHER_CERT\n];\nclass OtherCertificateFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherCertFormat = pvutils.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));\n        this.otherCert = pvutils.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_CERT_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_CERT:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.otherCertFormat || OTHER_CERT_FORMAT) }),\n                new asn1js.Any({ name: (names.otherCert || OTHER_CERT) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$H);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherCertificateFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\n        this.otherCert = asn1.result.otherCert;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\n                this.otherCert\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherCertFormat: this.otherCertFormat\n        };\n        if (!(this.otherCert instanceof asn1js.Any)) {\n            res.otherCert = this.otherCert.toJSON();\n        }\n        return res;\n    }\n}\n\nconst CERTIFICATES$1 = \"certificates\";\nconst CLEAR_PROPS$G = [\n    CERTIFICATES$1,\n];\nclass CertificateSet extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.certificates || CERTIFICATES$1),\n                    value: new asn1js.Choice({\n                        value: [\n                            Certificate.schema(),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 0\n                                },\n                                value: [\n                                    new asn1js.Any()\n                                ]\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js.Sequence\n                                ]\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 2\n                                },\n                                value: AttributeCertificateV2.schema().valueBlock.value\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 3\n                                },\n                                value: OtherCertificateFormat.schema().valueBlock.value\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$G);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.certificates = Array.from(asn1.result.certificates || [], (element) => {\n            const initialTagNumber = element.idBlock.tagNumber;\n            if (element.idBlock.tagClass === 1)\n                return new Certificate({ schema: element });\n            const elementSequence = new asn1js.Sequence({\n                value: element.valueBlock.value\n            });\n            switch (initialTagNumber) {\n                case 1:\n                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\n                        return new AttributeCertificateV2({ schema: elementSequence });\n                    }\n                    else {\n                        return new AttributeCertificateV1({ schema: elementSequence });\n                    }\n                case 2:\n                    return new AttributeCertificateV2({ schema: elementSequence });\n                case 3:\n                    return new OtherCertificateFormat({ schema: elementSequence });\n            }\n            return element;\n        });\n    }\n    toSchema() {\n        return (new asn1js.Set({\n            value: Array.from(this.certificates, element => {\n                switch (true) {\n                    case (element instanceof Certificate):\n                        return element.toSchema();\n                    case (element instanceof AttributeCertificateV1):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof AttributeCertificateV2):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof OtherCertificateFormat):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 3\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                }\n                return element.toSchema();\n            })\n        }));\n    }\n    toJSON() {\n        return {\n            certificates: Array.from(this.certificates, o => o.toJSON())\n        };\n    }\n}\nCertificateSet.CLASS_NAME = \"CertificateSet\";\n\nconst OTHER_REV_INFO_FORMAT = \"otherRevInfoFormat\";\nconst OTHER_REV_INFO = \"otherRevInfo\";\nconst CLEAR_PROPS$F = [\n    OTHER_REV_INFO_FORMAT,\n    OTHER_REV_INFO\n];\nclass OtherRevocationInfoFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherRevInfoFormat = pvutils.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));\n        this.otherRevInfo = pvutils.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_REV_INFO_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_REV_INFO:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT) }),\n                new asn1js.Any({ name: (names.otherRevInfo || OTHER_REV_INFO) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$F);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n        this.otherRevInfo = asn1.result.otherRevInfo;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\n                this.otherRevInfo\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherRevInfoFormat: this.otherRevInfoFormat\n        };\n        if (!(this.otherRevInfo instanceof asn1js.Any)) {\n            res.otherRevInfo = this.otherRevInfo.toJSON();\n        }\n        return res;\n    }\n}\nOtherRevocationInfoFormat.CLASS_NAME = \"OtherRevocationInfoFormat\";\n\nconst CRLS$3 = \"crls\";\nconst OTHER_REVOCATION_INFOS = \"otherRevocationInfos\";\nconst CLEAR_PROPS$E = [\n    CRLS$3\n];\nclass RevocationInfoChoices extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));\n        this.otherRevocationInfos = pvutils.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRLS$3:\n                return [];\n            case OTHER_REVOCATION_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.crls || EMPTY_STRING),\n                    value: new asn1js.Choice({\n                        value: [\n                            CertificateRevocationList.schema(),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js.ObjectIdentifier(),\n                                    new asn1js.Any()\n                                ]\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$E);\n        const asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({\n            names: {\n                crls: CRLS$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.crls) {\n            for (const element of asn1.result.crls) {\n                if (element.idBlock.tagClass === 1)\n                    this.crls.push(new CertificateRevocationList({ schema: element }));\n                else\n                    this.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(...Array.from(this.crls, o => o.toSchema()));\n        outputArray.push(...Array.from(this.otherRevocationInfos, element => {\n            const schema = element.toSchema();\n            schema.idBlock.tagClass = 3;\n            schema.idBlock.tagNumber = 1;\n            return schema;\n        }));\n        return (new asn1js.Set({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            crls: Array.from(this.crls, o => o.toJSON()),\n            otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())\n        };\n    }\n}\nRevocationInfoChoices.CLASS_NAME = \"RevocationInfoChoices\";\n\nconst CERTS$3 = \"certs\";\nconst CRLS$2 = \"crls\";\nconst CLEAR_PROPS$D = [\n    CERTS$3,\n    CRLS$2,\n];\nclass OriginatorInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTS$3:\n                return new CertificateSet();\n            case CRLS$2:\n                return new RevocationInfoChoices();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERTS$3:\n                return (memberValue.certificates.length === 0);\n            case CRLS$2:\n                return ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    name: (names.certs || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.crls || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$D);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({\n            names: {\n                certs: CERTS$3,\n                crls: CRLS$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CERTS$3 in asn1.result) {\n            this.certs = new CertificateSet({\n                schema: new asn1js.Set({\n                    value: asn1.result.certs.valueBlock.value\n                })\n            });\n        }\n        if (CRLS$2 in asn1.result) {\n            this.crls = new RevocationInfoChoices({\n                schema: new asn1js.Set({\n                    value: asn1.result.crls.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const sequenceValue = [];\n        if (this.certs) {\n            sequenceValue.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.certs.toSchema().valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            sequenceValue.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.crls.toSchema().valueBlock.value\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: sequenceValue\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.certs) {\n            res.certs = this.certs.toJSON();\n        }\n        if (this.crls) {\n            res.crls = this.crls.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorInfo.CLASS_NAME = \"OriginatorInfo\";\n\nconst ISSUER = \"issuer\";\nconst SERIAL_NUMBER$2 = \"serialNumber\";\nconst CLEAR_PROPS$C = [\n    ISSUER,\n    SERIAL_NUMBER$2,\n];\nclass IssuerAndSerialNumber extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER:\n                return new RelativeDistinguishedNames();\n            case SERIAL_NUMBER$2:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                RelativeDistinguishedNames.schema(names.issuer || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$C);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n}\nIssuerAndSerialNumber.CLASS_NAME = \"IssuerAndSerialNumber\";\n\nconst VARIANT$3 = \"variant\";\nconst VALUE$3 = \"value\";\nconst CLEAR_PROPS$B = [\n    \"blockName\"\n];\nclass RecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));\n        if (VALUE$3 in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (-1);\n            case VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (memberValue === (-1));\n            case VALUE$3:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$B);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                if (!(this.value instanceof IssuerAndSerialNumber)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.\");\n                }\n                return this.value.toSchema();\n            case 2:\n                if (!(this.value instanceof asn1js.OctetString)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.\");\n                }\n                return new asn1js.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    valueHex: this.value.valueBlock.valueHexView\n                });\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1 || this.variant === 2) && this.value) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientIdentifier.CLASS_NAME = \"RecipientIdentifier\";\n\nconst VERSION$c = \"version\";\nconst RID$1 = \"rid\";\nconst KEY_ENCRYPTION_ALGORITHM$3 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$3 = \"encryptedKey\";\nconst RECIPIENT_CERTIFICATE$1 = \"recipientCertificate\";\nconst CLEAR_PROPS$A = [\n    VERSION$c,\n    RID$1,\n    KEY_ENCRYPTION_ALGORITHM$3,\n    ENCRYPTED_KEY$3,\n];\nclass KeyTransRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));\n        this.rid = pvutils.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$c:\n                return (-1);\n            case RID$1:\n                return {};\n            case KEY_ENCRYPTION_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$3:\n                return new asn1js.OctetString();\n            case RECIPIENT_CERTIFICATE$1:\n                return new Certificate();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$c:\n                return (memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c));\n            case RID$1:\n                return (Object.keys(memberValue).length === 0);\n            case KEY_ENCRYPTION_ALGORITHM$3:\n            case ENCRYPTED_KEY$3:\n                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n            case RECIPIENT_CERTIFICATE$1:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                RecipientIdentifier.schema(names.rid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$A);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n            names: {\n                version: VERSION$c,\n                rid: {\n                    names: {\n                        blockName: RID$1\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$3\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (asn1.result.rid.idBlock.tagClass === 3) {\n            this.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex });\n        }\n        else {\n            this.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.rid instanceof IssuerAndSerialNumber) {\n            this.version = 0;\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n            outputArray.push(this.rid.toSchema());\n        }\n        else {\n            this.version = 2;\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.rid.valueBlock.valueHexView\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            rid: this.rid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKeyTransRecipientInfo.CLASS_NAME = \"KeyTransRecipientInfo\";\n\nconst ALGORITHM = \"algorithm\";\nconst PUBLIC_KEY = \"publicKey\";\nconst CLEAR_PROPS$z = [\n    ALGORITHM,\n    PUBLIC_KEY\n];\nclass OriginatorPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));\n        this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PUBLIC_KEY:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM:\n            case PUBLIC_KEY:\n                return (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$z);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorPublicKey.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM\n                    }\n                },\n                publicKey: PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.publicKey = asn1.result.publicKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.publicKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            algorithm: this.algorithm.toJSON(),\n            publicKey: this.publicKey.toJSON(),\n        };\n    }\n}\nOriginatorPublicKey.CLASS_NAME = \"OriginatorPublicKey\";\n\nconst VARIANT$2 = \"variant\";\nconst VALUE$2 = \"value\";\nconst CLEAR_PROPS$y = [\n    \"blockName\",\n];\nclass OriginatorIdentifierOrKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));\n        if (VALUE$2 in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (-1);\n            case VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (memberValue === (-1));\n            case VALUE$2:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING)\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: OriginatorPublicKey.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$y);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            if (asn1.result.blockName.idBlock.tagNumber === 0) {\n                asn1.result.blockName.idBlock.tagClass = 1;\n                asn1.result.blockName.idBlock.tagNumber = 4;\n                this.variant = 2;\n                this.value = asn1.result.blockName;\n            }\n            else {\n                this.variant = 3;\n                this.value = new OriginatorPublicKey({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.blockName.valueBlock.value\n                    })\n                });\n            }\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                this.value.idBlock.tagClass = 3;\n                this.value.idBlock.tagNumber = 0;\n                return this.value;\n            case 3:\n                {\n                    const _schema = this.value.toSchema();\n                    _schema.idBlock.tagClass = 3;\n                    _schema.idBlock.tagNumber = 1;\n                    return _schema;\n                }\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1) || (this.variant === 2) || (this.variant === 3)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorIdentifierOrKey.CLASS_NAME = \"OriginatorIdentifierOrKey\";\n\nconst KEY_ATTR_ID = \"keyAttrId\";\nconst KEY_ATTR = \"keyAttr\";\nconst CLEAR_PROPS$x = [\n    KEY_ATTR_ID,\n    KEY_ATTR,\n];\nclass OtherKeyAttribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyAttrId = pvutils.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));\n        if (KEY_ATTR in parameters) {\n            this.keyAttr = pvutils.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return EMPTY_STRING;\n            case KEY_ATTR:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return (typeof memberValue === \"string\" && memberValue === EMPTY_STRING);\n            case KEY_ATTR:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            optional: (names.optional || true),\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.keyAttrId || EMPTY_STRING) }),\n                new asn1js.Any({\n                    optional: true,\n                    name: (names.keyAttr || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$x);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({\n            names: {\n                keyAttrId: KEY_ATTR_ID,\n                keyAttr: KEY_ATTR\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n        if (KEY_ATTR in asn1.result) {\n            this.keyAttr = asn1.result.keyAttr;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\n        if (KEY_ATTR in this) {\n            outputArray.push(this.keyAttr);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray,\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyAttrId: this.keyAttrId\n        };\n        if (KEY_ATTR in this) {\n            res.keyAttr = this.keyAttr.toJSON();\n        }\n        return res;\n    }\n}\nOtherKeyAttribute.CLASS_NAME = \"OtherKeyAttribute\";\n\nconst SUBJECT_KEY_IDENTIFIER = \"subjectKeyIdentifier\";\nconst DATE$1 = \"date\";\nconst OTHER$1 = \"other\";\nconst CLEAR_PROPS$w = [\n    SUBJECT_KEY_IDENTIFIER,\n    DATE$1,\n    OTHER$1,\n];\nclass RecipientKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.subjectKeyIdentifier = pvutils.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));\n        if (DATE$1 in parameters) {\n            this.date = pvutils.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));\n        }\n        if (OTHER$1 in parameters) {\n            this.other = pvutils.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return new asn1js.OctetString();\n            case DATE$1:\n                return new asn1js.GeneralizedTime();\n            case OTHER$1:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER)));\n            case DATE$1:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER$1:\n                return ((memberValue.keyAttrId === EMPTY_STRING) && ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.OctetString({ name: (names.subjectKeyIdentifier || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$w);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\n            names: {\n                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,\n                date: DATE$1,\n                other: {\n                    names: {\n                        blockName: OTHER$1\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\n        if (DATE$1 in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER$1 in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.subjectKeyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date.toJSON();\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nRecipientKeyIdentifier.CLASS_NAME = \"RecipientKeyIdentifier\";\n\nconst VARIANT$1 = \"variant\";\nconst VALUE$1 = \"value\";\nconst CLEAR_PROPS$v = [\n    \"blockName\",\n];\nclass KeyAgreeRecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));\n        this.value = pvutils.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (-1);\n            case VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (memberValue === (-1));\n            case VALUE$1:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: RecipientKeyIdentifier.schema(names.rKeyId || {\n                        names: {\n                            blockName: (names.blockName || EMPTY_STRING)\n                        }\n                    }).valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$v);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new RecipientKeyIdentifier({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.blockName.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.value.toSchema().valueBlock.value\n                });\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant,\n        };\n        if ((this.variant === 1) || (this.variant === 2)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientIdentifier.CLASS_NAME = \"KeyAgreeRecipientIdentifier\";\n\nconst RID = \"rid\";\nconst ENCRYPTED_KEY$2 = \"encryptedKey\";\nconst CLEAR_PROPS$u = [\n    RID,\n    ENCRYPTED_KEY$2,\n];\nclass RecipientEncryptedKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.rid = pvutils.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RID:\n                return new KeyAgreeRecipientIdentifier();\n            case ENCRYPTED_KEY$2:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RID:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case ENCRYPTED_KEY$2:\n                return (memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                KeyAgreeRecipientIdentifier.schema(names.rid || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$u);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKey.schema({\n            names: {\n                rid: {\n                    names: {\n                        blockName: RID\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.rid.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            rid: this.rid.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nRecipientEncryptedKey.CLASS_NAME = \"RecipientEncryptedKey\";\n\nconst ENCRYPTED_KEYS = \"encryptedKeys\";\nconst RECIPIENT_ENCRYPTED_KEYS = \"RecipientEncryptedKeys\";\nconst CLEAR_PROPS$t = [\n    RECIPIENT_ENCRYPTED_KEYS,\n];\nclass RecipientEncryptedKeys extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptedKeys = pvutils.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.RecipientEncryptedKeys || EMPTY_STRING),\n                    value: RecipientEncryptedKey.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$t);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKeys.schema({\n            names: {\n                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.encryptedKeys, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())\n        };\n    }\n}\nRecipientEncryptedKeys.CLASS_NAME = \"RecipientEncryptedKeys\";\n\nconst VERSION$b = \"version\";\nconst ORIGINATOR = \"originator\";\nconst UKM = \"ukm\";\nconst KEY_ENCRYPTION_ALGORITHM$2 = \"keyEncryptionAlgorithm\";\nconst RECIPIENT_ENCRYPTED_KEY = \"recipientEncryptedKeys\";\nconst RECIPIENT_CERTIFICATE = \"recipientCertificate\";\nconst RECIPIENT_PUBLIC_KEY = \"recipientPublicKey\";\nconst CLEAR_PROPS$s = [\n    VERSION$b,\n    ORIGINATOR,\n    UKM,\n    KEY_ENCRYPTION_ALGORITHM$2,\n    RECIPIENT_ENCRYPTED_KEY,\n];\nclass KeyAgreeRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));\n        this.originator = pvutils.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));\n        if (UKM in parameters) {\n            this.ukm = pvutils.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));\n        }\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));\n        this.recipientEncryptedKeys = pvutils.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));\n        this.recipientPublicKey = pvutils.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$b:\n                return 0;\n            case ORIGINATOR:\n                return new OriginatorIdentifierOrKey();\n            case UKM:\n                return new asn1js.OctetString();\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case RECIPIENT_ENCRYPTED_KEY:\n                return new RecipientEncryptedKeys();\n            case RECIPIENT_CERTIFICATE:\n                return new Certificate();\n            case RECIPIENT_PUBLIC_KEY:\n                return null;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$b:\n                return (memberValue === 0);\n            case ORIGINATOR:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case UKM:\n                return (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM)));\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case RECIPIENT_ENCRYPTED_KEY:\n                return (memberValue.encryptedKeys.length === 0);\n            case RECIPIENT_CERTIFICATE:\n                return false;\n            case RECIPIENT_PUBLIC_KEY:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: names.blockName || EMPTY_STRING,\n            value: [\n                new asn1js.Integer({ name: names.version || EMPTY_STRING }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        OriginatorIdentifierOrKey.schema(names.originator || {})\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.OctetString({ name: names.ukm || EMPTY_STRING })]\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$s);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n            names: {\n                version: VERSION$b,\n                originator: {\n                    names: {\n                        blockName: ORIGINATOR\n                    }\n                },\n                ukm: UKM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$2\n                    }\n                },\n                recipientEncryptedKeys: {\n                    names: {\n                        blockName: RECIPIENT_ENCRYPTED_KEY\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\n        if (UKM in asn1.result)\n            this.ukm = asn1.result.ukm;\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 0\n            },\n            value: [this.originator.toSchema()]\n        }));\n        if (this.ukm) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.ukm]\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.recipientEncryptedKeys.toSchema());\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            originator: this.originator.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON(),\n        };\n        if (this.ukm) {\n            res.ukm = this.ukm.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientInfo.CLASS_NAME = \"KeyAgreeRecipientInfo\";\n\nconst KEY_IDENTIFIER = \"keyIdentifier\";\nconst DATE = \"date\";\nconst OTHER = \"other\";\nconst CLEAR_PROPS$r = [\n    KEY_IDENTIFIER,\n    DATE,\n    OTHER,\n];\nclass KEKIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));\n        if (DATE in parameters) {\n            this.date = pvutils.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));\n        }\n        if (OTHER in parameters) {\n            this.other = pvutils.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return new asn1js.OctetString();\n            case DATE:\n                return new asn1js.GeneralizedTime();\n            case OTHER:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return (memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER)));\n            case DATE:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER:\n                return ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\n                    ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.OctetString({ name: (names.keyIdentifier || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$r);\n        const asn1 = asn1js.compareSchema(schema, schema, KEKIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER,\n                date: DATE,\n                other: {\n                    names: {\n                        blockName: OTHER\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyIdentifier = asn1.result.keyIdentifier;\n        if (DATE in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyIdentifier: this.keyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date;\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nKEKIdentifier.CLASS_NAME = \"KEKIdentifier\";\n\nconst VERSION$a = \"version\";\nconst KEK_ID = \"kekid\";\nconst KEY_ENCRYPTION_ALGORITHM$1 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$1 = \"encryptedKey\";\nconst PER_DEFINED_KEK = \"preDefinedKEK\";\nconst CLEAR_PROPS$q = [\n    VERSION$a,\n    KEK_ID,\n    KEY_ENCRYPTION_ALGORITHM$1,\n    ENCRYPTED_KEY$1,\n];\nclass KEKRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));\n        this.kekid = pvutils.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));\n        this.preDefinedKEK = pvutils.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$a:\n                return 0;\n            case KEK_ID:\n                return new KEKIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$1:\n                return new asn1js.OctetString();\n            case PER_DEFINED_KEK:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"KEKRecipientInfo\":\n                return (memberValue === KEKRecipientInfo.defaultValues(VERSION$a));\n            case KEK_ID:\n                return ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\n                    ((\"date\" in memberValue) === false) &&\n                    ((\"other\" in memberValue) === false));\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY$1:\n                return (memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1)));\n            case PER_DEFINED_KEK:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                KEKIdentifier.schema(names.kekid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$q);\n        const asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({\n            names: {\n                version: VERSION$a,\n                kekid: {\n                    names: {\n                        blockName: KEK_ID\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$1\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.Integer({ value: this.version }),\n                this.kekid.toSchema(),\n                this.keyEncryptionAlgorithm.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            kekid: this.kekid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKEKRecipientInfo.CLASS_NAME = \"KEKRecipientInfo\";\n\nconst VERSION$9 = \"version\";\nconst KEY_DERIVATION_ALGORITHM = \"keyDerivationAlgorithm\";\nconst KEY_ENCRYPTION_ALGORITHM = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY = \"encryptedKey\";\nconst PASSWORD = \"password\";\nconst CLEAR_PROPS$p = [\n    VERSION$9,\n    KEY_DERIVATION_ALGORITHM,\n    KEY_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_KEY\n];\nclass PasswordRecipientinfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));\n        if (KEY_DERIVATION_ALGORITHM in parameters) {\n            this.keyDerivationAlgorithm = pvutils.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));\n        }\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));\n        this.password = pvutils.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$9:\n                return (-1);\n            case KEY_DERIVATION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY:\n                return new asn1js.OctetString();\n            case PASSWORD:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$9:\n                return (memberValue === (-1));\n            case KEY_DERIVATION_ALGORITHM:\n            case KEY_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY:\n                return (memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY)));\n            case PASSWORD:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    name: (names.keyDerivationAlgorithm || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: AlgorithmIdentifier.schema().valueBlock.value\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$p);\n        const asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n            names: {\n                version: VERSION$9,\n                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (KEY_DERIVATION_ALGORITHM in asn1.result) {\n            this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n                })\n            });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.keyDerivationAlgorithm) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n        if (this.keyDerivationAlgorithm) {\n            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nPasswordRecipientinfo.CLASS_NAME = \"PasswordRecipientInfo\";\n\nconst ORI_TYPE = \"oriType\";\nconst ORI_VALUE = \"oriValue\";\nconst CLEAR_PROPS$o = [\n    ORI_TYPE,\n    ORI_VALUE\n];\nclass OtherRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.oriType = pvutils.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));\n        this.oriValue = pvutils.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return EMPTY_STRING;\n            case ORI_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case ORI_VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.oriType || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.oriValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$o);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRecipientInfo.schema({\n            names: {\n                oriType: ORI_TYPE,\n                oriValue: ORI_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.oriType = asn1.result.oriType.valueBlock.toString();\n        this.oriValue = asn1.result.oriValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.oriType }),\n                this.oriValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            oriType: this.oriType\n        };\n        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {\n            res.oriValue = this.oriValue.toJSON();\n        }\n        return res;\n    }\n}\nOtherRecipientInfo.CLASS_NAME = \"OtherRecipientInfo\";\n\nconst VARIANT = \"variant\";\nconst VALUE = \"value\";\nconst CLEAR_PROPS$n = [\n    \"blockName\"\n];\nclass RecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));\n        if (VALUE in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT:\n                return (-1);\n            case VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT:\n                return (memberValue === RecipientInfo.defaultValues(memberName));\n            case VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                KeyTransRecipientInfo.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: KeyAgreeRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: KEKRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    value: PasswordRecipientinfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: OtherRecipientInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$n);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientInfo.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new KeyTransRecipientInfo({ schema: asn1.result.blockName });\n        }\n        else {\n            const blockSequence = new asn1js.Sequence({\n                value: asn1.result.blockName.valueBlock.value\n            });\n            switch (asn1.result.blockName.idBlock.tagNumber) {\n                case 1:\n                    this.variant = 2;\n                    this.value = new KeyAgreeRecipientInfo({ schema: blockSequence });\n                    break;\n                case 2:\n                    this.variant = 3;\n                    this.value = new KEKRecipientInfo({ schema: blockSequence });\n                    break;\n                case 3:\n                    this.variant = 4;\n                    this.value = new PasswordRecipientinfo({ schema: blockSequence });\n                    break;\n                case 4:\n                    this.variant = 5;\n                    this.value = new OtherRecipientInfo({ schema: blockSequence });\n                    break;\n                default:\n                    throw new Error(\"Incorrect structure of RecipientInfo block\");\n            }\n        }\n    }\n    toSchema() {\n        ParameterError.assertEmpty(this.value, \"value\", \"RecipientInfo\");\n        const _schema = this.value.toSchema();\n        switch (this.variant) {\n            case 1:\n                return _schema;\n            case 2:\n            case 3:\n            case 4:\n                _schema.idBlock.tagClass = 3;\n                _schema.idBlock.tagNumber = (this.variant - 1);\n                return _schema;\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if (this.value && (this.variant >= 1) && (this.variant <= 4)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientInfo.CLASS_NAME = \"RecipientInfo\";\n\nconst HASH_ALGORITHM$2 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM = \"maskGenAlgorithm\";\nconst P_SOURCE_ALGORITHM = \"pSourceAlgorithm\";\nconst CLEAR_PROPS$m = [\n    HASH_ALGORITHM$2,\n    MASK_GEN_ALGORITHM,\n    P_SOURCE_ALGORITHM\n];\nclass RSAESOAEPParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));\n        this.pSourceAlgorithm = pvutils.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$2:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            case MASK_GEN_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js.Null()\n                    })).toSchema()\n                });\n            case P_SOURCE_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.9\",\n                    algorithmParams: new asn1js.OctetString({ valueHex: (new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09])).buffer })\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$m);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAESOAEPParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$2\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM\n                    }\n                },\n                pSourceAlgorithm: {\n                    names: {\n                        blockName: P_SOURCE_ALGORITHM\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$2 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (P_SOURCE_ALGORITHM in asn1.result)\n            this.pSourceAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.pSourceAlgorithm });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [this.pSourceAlgorithm.toSchema()]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nRSAESOAEPParams.CLASS_NAME = \"RSAESOAEPParams\";\n\nconst KEY_INFO = \"keyInfo\";\nconst ENTITY_U_INFO = \"entityUInfo\";\nconst SUPP_PUB_INFO = \"suppPubInfo\";\nconst CLEAR_PROPS$l = [\n    KEY_INFO,\n    ENTITY_U_INFO,\n    SUPP_PUB_INFO\n];\nclass ECCCMSSharedInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyInfo = pvutils.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));\n        if (ENTITY_U_INFO in parameters) {\n            this.entityUInfo = pvutils.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));\n        }\n        this.suppPubInfo = pvutils.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_INFO:\n                return new AlgorithmIdentifier();\n            case ENTITY_U_INFO:\n                return new asn1js.OctetString();\n            case SUPP_PUB_INFO:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_INFO:\n            case ENTITY_U_INFO:\n            case SUPP_PUB_INFO:\n                return (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyInfo || {}),\n                new asn1js.Constructed({\n                    name: (names.entityUInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [new asn1js.OctetString()]\n                }),\n                new asn1js.Constructed({\n                    name: (names.suppPubInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [new asn1js.OctetString()]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$l);\n        const asn1 = asn1js.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\n            names: {\n                keyInfo: {\n                    names: {\n                        blockName: KEY_INFO\n                    }\n                },\n                entityUInfo: ENTITY_U_INFO,\n                suppPubInfo: SUPP_PUB_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\n        if (ENTITY_U_INFO in asn1.result)\n            this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\n        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyInfo.toSchema());\n        if (this.entityUInfo) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.entityUInfo]\n            }));\n        }\n        outputArray.push(new asn1js.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 2\n            },\n            value: [this.suppPubInfo]\n        }));\n        return new asn1js.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        const res = {\n            keyInfo: this.keyInfo.toJSON(),\n            suppPubInfo: this.suppPubInfo.toJSON(),\n        };\n        if (this.entityUInfo) {\n            res.entityUInfo = this.entityUInfo.toJSON();\n        }\n        return res;\n    }\n}\nECCCMSSharedInfo.CLASS_NAME = \"ECCCMSSharedInfo\";\n\nconst VERSION$8 = \"version\";\nconst ORIGINATOR_INFO = \"originatorInfo\";\nconst RECIPIENT_INFOS = \"recipientInfos\";\nconst ENCRYPTED_CONTENT_INFO = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS = \"unprotectedAttrs\";\nconst CLEAR_PROPS$k = [\n    VERSION$8,\n    ORIGINATOR_INFO,\n    RECIPIENT_INFOS,\n    ENCRYPTED_CONTENT_INFO,\n    UNPROTECTED_ATTRS\n];\nconst defaultEncryptionParams = {\n    kdfAlgorithm: \"SHA-512\",\n    kekEncryptionLength: 256\n};\nconst curveLengthByName = {\n    \"P-256\": 256,\n    \"P-384\": 384,\n    \"P-521\": 528\n};\nclass EnvelopedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));\n        if (ORIGINATOR_INFO in parameters) {\n            this.originatorInfo = pvutils.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));\n        }\n        this.recipientInfos = pvutils.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));\n        if (UNPROTECTED_ATTRS in parameters) {\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));\n        }\n        this.policy = {\n            disableSplit: !!parameters.disableSplit,\n        };\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$8:\n                return 0;\n            case ORIGINATOR_INFO:\n                return new OriginatorInfo();\n            case RECIPIENT_INFOS:\n                return [];\n            case ENCRYPTED_CONTENT_INFO:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$8:\n                return (memberValue === EnvelopedData.defaultValues(memberName));\n            case ORIGINATOR_INFO:\n                return ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\n            case RECIPIENT_INFOS:\n            case UNPROTECTED_ATTRS:\n                return (memberValue.length === 0);\n            case ENCRYPTED_CONTENT_INFO:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\n                        (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    name: (names.originatorInfo || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: OriginatorInfo.schema().valueBlock.value\n                }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.recipientInfos || EMPTY_STRING),\n                            value: RecipientInfo.schema()\n                        })\n                    ]\n                }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$k);\n        const asn1 = asn1js.compareSchema(schema, schema, EnvelopedData.schema({\n            names: {\n                version: VERSION$8,\n                originatorInfo: ORIGINATOR_INFO,\n                recipientInfos: RECIPIENT_INFOS,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (ORIGINATOR_INFO in asn1.result) {\n            this.originatorInfo = new OriginatorInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.originatorInfo.valueBlock.value\n                })\n            });\n        }\n        this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({ schema: o }));\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({ schema: o }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.originatorInfo) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.originatorInfo.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.recipientInfos, o => o.toSchema())\n        }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),\n            encryptedContentInfo: this.encryptedContentInfo.toJSON(),\n        };\n        if (this.originatorInfo)\n            res.originatorInfo = this.originatorInfo.toJSON();\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" }, defaultEncryptionParams, parameters || {});\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\n            variant = 1;\n        else {\n            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\n                variant = 2;\n            else\n                throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\n        }\n        switch (variant) {\n            case 1:\n                {\n                    let algorithmId;\n                    let algorithmParams;\n                    if (encryptionParameters.useOAEP === true) {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSA-OAEP\"\n                        }, true, \"keyEncryptionAlgorithm\");\n                        const hashOID = crypto.getOIDByAlgorithm({\n                            name: encryptionParameters.oaepHashAlgorithm\n                        }, true, \"RSAES-OAEP-params\");\n                        const hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashOID,\n                            algorithmParams: new asn1js.Null()\n                        });\n                        const rsaOAEPParams = new RSAESOAEPParams({\n                            hashAlgorithm,\n                            maskGenAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: \"1.2.840.113549.1.1.8\",\n                                algorithmParams: hashAlgorithm.toSchema()\n                            })\n                        });\n                        algorithmParams = rsaOAEPParams.toSchema();\n                    }\n                    else {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSAES-PKCS1-v1_5\"\n                        });\n                        if (algorithmId === EMPTY_STRING)\n                            throw new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\n                        algorithmParams = new asn1js.Null();\n                    }\n                    const keyInfo = new KeyTransRecipientInfo({\n                        version: 0,\n                        rid: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId,\n                            algorithmParams\n                        }),\n                        recipientCertificate: certificate,\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 1,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n                        variant: 1,\n                        value: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        })\n                    });\n                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientCertificate: certificate }, crypto);\n                }\n                break;\n            default:\n                throw new Error(`Unknown \"variant\" value: ${variant}`);\n        }\n        return true;\n    }\n    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {\n        ArgumentError.assert(preDefinedData, \"preDefinedData\", \"ArrayBuffer\");\n        if (!preDefinedData.byteLength) {\n            throw new Error(\"Pre-defined data could have zero length\");\n        }\n        if (!parameters.keyIdentifier) {\n            const keyIdentifierBuffer = new ArrayBuffer(16);\n            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\n            crypto.getRandomValues(keyIdentifierView);\n            parameters.keyIdentifier = keyIdentifierBuffer;\n        }\n        if (!parameters.hmacHashAlgorithm)\n            parameters.hmacHashAlgorithm = \"SHA-512\";\n        if (parameters.iterationCount === undefined) {\n            parameters.iterationCount = 2048;\n        }\n        if (!parameters.keyEncryptionAlgorithm) {\n            parameters.keyEncryptionAlgorithm = {\n                name: \"AES-KW\",\n                length: 256\n            };\n        }\n        if (!parameters.keyEncryptionAlgorithmParams)\n            parameters.keyEncryptionAlgorithmParams = new asn1js.Null();\n        switch (variant) {\n            case 1:\n                {\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new KEKRecipientInfo({\n                        version: 4,\n                        kekid: new KEKIdentifier({\n                            keyIdentifier: new asn1js.OctetString({ valueHex: parameters.keyIdentifier })\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        preDefinedKEK: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 3,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const pbkdf2OID = crypto.getOIDByAlgorithm({ name: \"PBKDF2\" }, true, \"keyDerivationAlgorithm\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const hmacOID = crypto.getOIDByAlgorithm({\n                        name: \"HMAC\",\n                        hash: {\n                            name: parameters.hmacHashAlgorithm\n                        }\n                    }, true, \"hmacHashAlgorithm\");\n                    const pbkdf2Params = new PBKDF2Params({\n                        salt: new asn1js.OctetString({ valueHex: saltBuffer }),\n                        iterationCount: parameters.iterationCount,\n                        prf: new AlgorithmIdentifier({\n                            algorithmId: hmacOID,\n                            algorithmParams: new asn1js.Null()\n                        })\n                    });\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new PasswordRecipientinfo({\n                        version: 0,\n                        keyDerivationAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: pbkdf2OID,\n                            algorithmParams: pbkdf2Params.toSchema()\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        password: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 4,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            default:\n                throw new Error(`Unknown value for \"variant\": ${variant}`);\n        }\n    }\n    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\n        const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n            variant: 2,\n            value: new RecipientKeyIdentifier({\n                subjectKeyIdentifier: new asn1js.OctetString({ valueHex: keyId }),\n            })\n        });\n        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientPublicKey: key }, crypto);\n    }\n    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {\n        const encryptedKey = new RecipientEncryptedKey({\n            rid: recipientIdentifier\n        });\n        const aesKWoid = crypto.getOIDByAlgorithm({\n            name: \"AES-KW\",\n            length: encryptionParameters.kekEncryptionLength\n        }, true, \"keyEncryptionAlgorithm\");\n        const aesKW = new AlgorithmIdentifier({\n            algorithmId: aesKWoid,\n        });\n        const ecdhOID = crypto.getOIDByAlgorithm({\n            name: \"ECDH\",\n            kdf: encryptionParameters.kdfAlgorithm\n        }, true, \"KeyAgreeRecipientInfo\");\n        const ukmBuffer = new ArrayBuffer(64);\n        const ukmView = new Uint8Array(ukmBuffer);\n        crypto.getRandomValues(ukmView);\n        const recipientInfoParams = {\n            version: 3,\n            ukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: ecdhOID,\n                algorithmParams: aesKW.toSchema()\n            }),\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\n                encryptedKeys: [encryptedKey]\n            })\n        };\n        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\n        this.recipientInfos.push(new RecipientInfo({\n            variant: 2,\n            value: keyInfo\n        }));\n    }\n    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        crypto.getRandomValues(ivView);\n        const contentView = new Uint8Array(contentToEncrypt);\n        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]);\n        const encryptedContent = await crypto.encrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, sessionKey, contentView);\n        const exportedSessionKey = await crypto.exportKey(\"raw\", sessionKey);\n        this.version = 2;\n        this.encryptedContentInfo = new EncryptedContentInfo({\n            disableSplit: this.policy.disableSplit,\n            contentType: \"1.2.840.113549.1.7.1\",\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\n            }),\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\n        });\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let recipientCurve;\n            let recipientPublicKey;\n            if (recipientInfo.recipientPublicKey) {\n                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;\n                recipientPublicKey = recipientInfo.recipientPublicKey;\n            }\n            else if (recipientInfo.recipientCertificate) {\n                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                const curveOID = curveObject.valueBlock.toString();\n                switch (curveOID) {\n                    case \"1.2.840.10045.3.1.7\":\n                        recipientCurve = \"P-256\";\n                        break;\n                    case \"1.3.132.0.34\":\n                        recipientCurve = \"P-384\";\n                        break;\n                    case \"1.3.132.0.35\":\n                        recipientCurve = \"P-521\";\n                        break;\n                    default:\n                        throw new Error(`Incorrect curve OID for index ${index}`);\n                }\n                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: {\n                            name: \"ECDH\",\n                            namedCurve: recipientCurve\n                        },\n                        usages: []\n                    }\n                }, crypto);\n            }\n            else {\n                throw new Error(\"Unsupported RecipientInfo\");\n            }\n            const recipientCurveLength = curveLengthByName[recipientCurve];\n            const ecdhKeys = await crypto.generateKey({ name: \"ECDH\", namedCurve: recipientCurve }, true, [\"deriveBits\"]);\n            const exportedECDHPublicKey = await crypto.exportKey(\"spki\", ecdhKeys.publicKey);\n            const derivedBits = await crypto.deriveBits({\n                name: \"ECDH\",\n                public: recipientPublicKey\n            }, ecdhKeys.privateKey, recipientCurveLength);\n            const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"aesKWAlgorithm\");\n            let kwLength = kwAlgorithm.length;\n            const kwLengthBuffer = new ArrayBuffer(4);\n            const kwLengthView = new Uint8Array(kwLengthBuffer);\n            for (let j = 3; j >= 0; j--) {\n                kwLengthView[j] = kwLength;\n                kwLength >>= 8;\n            }\n            const eccInfo = new ECCCMSSharedInfo({\n                keyInfo: new AlgorithmIdentifier({\n                    algorithmId: aesKWAlgorithm.algorithmId\n                }),\n                entityUInfo: recipientInfo.ukm,\n                suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\n            });\n            const encodedInfo = eccInfo.toSchema().toBER(false);\n            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);\n            const awsKW = await crypto.importKey(\"raw\", derivedKeyRaw, { name: \"AES-KW\" }, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, awsKW, { name: \"AES-KW\" });\n            const originator = new OriginatorIdentifierOrKey();\n            originator.variant = 3;\n            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);\n            recipientInfo.originator = originator;\n            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n            return { ecdhPrivateKey: ecdhKeys.privateKey };\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            try {\n                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: algorithmParameters,\n                        usages: [\"encrypt\", \"wrapKey\"]\n                    }\n                }, crypto);\n                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\n                recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: encryptedKey });\n            }\n            catch {\n            }\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const kekKey = await crypto.importKey(\"raw\", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, kekKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!recipientInfo.keyDerivationAlgorithm)\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams)\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const passwordView = new Uint8Array(recipientInfo.password);\n            const derivationKey = await crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            let hmacHashAlgorithm = \"SHA-1\";\n            if (pbkdf2Params.prf) {\n                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\");\n                hmacHashAlgorithm = prfAlgorithm.hash.name;\n            }\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const derivedKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, derivationKey, kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, derivedKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n        };\n        const res = [];\n        for (let i = 0; i < this.recipientInfos.length; i++) {\n            switch (this.recipientInfos[i].variant) {\n                case 1:\n                    res.push(await SubKeyTransRecipientInfo(i));\n                    break;\n                case 2:\n                    res.push(await SubKeyAgreeRecipientInfo(i));\n                    break;\n                case 3:\n                    res.push(await SubKEKRecipientInfo(i));\n                    break;\n                case 4:\n                    res.push(await SubPasswordRecipientinfo(i));\n                    break;\n                default:\n                    throw new Error(`Unknown recipient type in array with index ${i}`);\n            }\n        }\n        return res;\n    }\n    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {\n        const decryptionParameters = parameters || {};\n        if ((recipientIndex + 1) > this.recipientInfos.length) {\n            throw new Error(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\n        }\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let curveOID;\n            let recipientCurve;\n            let recipientCurveLength;\n            const originator = recipientInfo.originator;\n            if (decryptionParameters.recipientCertificate) {\n                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else if (originator.value.algorithm.algorithmParams) {\n                const curveObject = originator.value.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect originator for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else {\n                throw new Error(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\n            }\n            if (!decryptionParameters.recipientPrivateKey)\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n            switch (curveOID) {\n                case \"1.2.840.10045.3.1.7\":\n                    recipientCurve = \"P-256\";\n                    recipientCurveLength = 256;\n                    break;\n                case \"1.3.132.0.34\":\n                    recipientCurve = \"P-384\";\n                    recipientCurveLength = 384;\n                    break;\n                case \"1.3.132.0.35\":\n                    recipientCurve = \"P-521\";\n                    recipientCurveLength = 528;\n                    break;\n                default:\n                    throw new Error(`Incorrect curve OID for index ${index}`);\n            }\n            let ecdhPrivateKey;\n            let keyCrypto = crypto;\n            if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                ecdhPrivateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n                    name: \"ECDH\",\n                    namedCurve: recipientCurve\n                }, true, [\"deriveBits\"]);\n            }\n            else {\n                ecdhPrivateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            if ((\"algorithmParams\" in originator.value.algorithm) === false)\n                originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\n            const buffer = originator.value.toSchema().toBER(false);\n            const ecdhPublicKey = await crypto.importKey(\"spki\", buffer, {\n                name: \"ECDH\",\n                namedCurve: recipientCurve\n            }, true, []);\n            const sharedSecret = await keyCrypto.deriveBits({\n                name: \"ECDH\",\n                public: ecdhPublicKey\n            }, ecdhPrivateKey, recipientCurveLength);\n            async function applyKDF(includeAlgorithmParams) {\n                includeAlgorithmParams = includeAlgorithmParams || false;\n                const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"kwAlgorithm\");\n                let kwLength = kwAlgorithm.length;\n                const kwLengthBuffer = new ArrayBuffer(4);\n                const kwLengthView = new Uint8Array(kwLengthBuffer);\n                for (let j = 3; j >= 0; j--) {\n                    kwLengthView[j] = kwLength;\n                    kwLength >>= 8;\n                }\n                const keyInfoAlgorithm = {\n                    algorithmId: aesKWAlgorithm.algorithmId\n                };\n                if (includeAlgorithmParams) {\n                    keyInfoAlgorithm.algorithmParams = new asn1js.Null();\n                }\n                const eccInfo = new ECCCMSSharedInfo({\n                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\n                    entityUInfo: recipientInfo.ukm,\n                    suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\n                });\n                const encodedInfo = eccInfo.toSchema().toBER(false);\n                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n                if (!ecdhAlgorithm.name) {\n                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);\n                }\n                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);\n            }\n            const kdfResult = await applyKDF();\n            const importAesKwKey = async (kdfResult) => {\n                return crypto.importKey(\"raw\", kdfResult, { name: \"AES-KW\" }, true, [\"unwrapKey\"]);\n            };\n            const aesKwKey = await importAesKwKey(kdfResult);\n            const unwrapSessionKey = async (aesKwKey) => {\n                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n                return crypto.unwrapKey(\"raw\", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, { name: \"AES-KW\" }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n            };\n            try {\n                return await unwrapSessionKey(aesKwKey);\n            }\n            catch {\n                const kdfResult = await applyKDF(true);\n                const aesKwKey = await importAesKwKey(kdfResult);\n                return unwrapSessionKey(aesKwKey);\n            }\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.recipientPrivateKey) {\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\n            }\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            let privateKey;\n            let keyCrypto = crypto;\n            if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                privateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [\"decrypt\"]);\n            }\n            else {\n                privateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            const sessionKey = await keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if ((\"name\" in contentEncryptionAlgorithm) === false)\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            return crypto.importKey(\"raw\", sessionKey, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.preDefinedData)\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const importedKey = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if (!contentEncryptionAlgorithm.name) {\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            }\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!decryptionParameters.preDefinedData) {\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm) {\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const pbkdf2Key = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            const hmacHashAlgorithm = pbkdf2Params.prf\n                ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\").hash.name\n                : \"SHA-1\";\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const kekKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, pbkdf2Key, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        let unwrappedKey;\n        switch (this.recipientInfos[recipientIndex].variant) {\n            case 1:\n                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);\n                break;\n            case 2:\n                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);\n                break;\n            case 3:\n                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);\n                break;\n            case 4:\n                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);\n                break;\n            default:\n                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);\n        }\n        const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n        const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        if (!this.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"Required property `encryptedContent` is empty\");\n        }\n        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();\n        return crypto.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, unwrappedKey, dataBuffer);\n    }\n}\nEnvelopedData.CLASS_NAME = \"EnvelopedData\";\n\nconst SAFE_CONTENTS = \"safeContents\";\nconst PARSED_VALUE$1 = \"parsedValue\";\nconst CONTENT_INFOS = \"contentInfos\";\nclass AuthenticatedSafe extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeContents = pvutils.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));\n        if (PARSED_VALUE$1 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return [];\n            case PARSED_VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return (memberValue.length === 0);\n            case PARSED_VALUE$1:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.contentInfos || EMPTY_STRING),\n                    value: ContentInfo.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            CONTENT_INFOS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({\n            names: {\n                contentInfos: CONTENT_INFOS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.safeContents, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeContents: Array.from(this.safeContents, o => o.toJSON())\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, SAFE_CONTENTS);\n        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, \"Array\");\n        if (parameters.safeContents.length !== this.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\n        }\n        this.parsedValue = {\n            safeContents: [],\n        };\n        for (const [index, content] of this.safeContents.entries()) {\n            const safeContent = parameters.safeContents[index];\n            const errorTarget = `parameters.safeContents[${index}]`;\n            switch (content.contentType) {\n                case id_ContentType_Data:\n                    {\n                        ArgumentError.assert(content.content, \"this.safeContents[j].content\", asn1js.OctetString);\n                        const authSafeContent = content.content.getValue();\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 0,\n                            value: SafeContents.fromBER(authSafeContent)\n                        });\n                    }\n                    break;\n                case id_ContentType_EnvelopedData:\n                    {\n                        const cmsEnveloped = new EnvelopedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"recipientCertificate\", \"recipientKey\");\n                        const envelopedData = safeContent;\n                        const recipientCertificate = envelopedData.recipientCertificate;\n                        const recipientKey = envelopedData.recipientKey;\n                        const decrypted = await cmsEnveloped.decrypt(0, {\n                            recipientCertificate,\n                            recipientPrivateKey: recipientKey\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 2,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                case id_ContentType_EncryptedData:\n                    {\n                        const cmsEncrypted = new EncryptedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"password\");\n                        const password = safeContent.password;\n                        const decrypted = await cmsEncrypted.decrypt({\n                            password\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 1,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\n            }\n        }\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!(this.parsedValue)) {\n            throw new Error(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n        }\n        ArgumentError.assert(this.parsedValue, \"this.parsedValue\", \"object\");\n        ArgumentError.assert(this.parsedValue.safeContents, \"this.parsedValue.safeContents\", \"Array\");\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        ParameterError.assert(parameters, \"safeContents\");\n        ArgumentError.assert(parameters.safeContents, \"parameters.safeContents\", \"Array\");\n        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\n        }\n        this.safeContents = [];\n        for (const [index, content] of this.parsedValue.safeContents.entries()) {\n            ParameterError.assert(\"content\", content, \"privacyMode\", \"value\");\n            ArgumentError.assert(content.value, \"content.value\", SafeContents);\n            switch (content.privacyMode) {\n                case 0:\n                    {\n                        const contentBuffer = content.value.toSchema().toBER(false);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.1\",\n                            content: new asn1js.OctetString({ valueHex: contentBuffer })\n                        }));\n                    }\n                    break;\n                case 1:\n                    {\n                        const cmsEncrypted = new EncryptedData();\n                        const currentParameters = parameters.safeContents[index];\n                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\n                        await cmsEncrypted.encrypt(currentParameters, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.6\",\n                            content: cmsEncrypted.toSchema()\n                        }));\n                    }\n                    break;\n                case 2:\n                    {\n                        const cmsEnveloped = new EnvelopedData();\n                        const contentToEncrypt = content.value.toSchema().toBER(false);\n                        const safeContent = parameters.safeContents[index];\n                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, \"encryptingCertificate\", \"encryptionAlgorithm\");\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm}`);\n                        }\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.length === 128):\n                            case (safeContent.encryptionAlgorithm.length === 192):\n                            case (safeContent.encryptionAlgorithm.length === 256):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm.length}`);\n                        }\n                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;\n                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);\n                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.3\",\n                            content: cmsEnveloped.toSchema()\n                        }));\n                    }\n                    break;\n                default:\n                    throw new Error(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\n            }\n        }\n        return this;\n    }\n}\nAuthenticatedSafe.CLASS_NAME = \"AuthenticatedSafe\";\n\nconst HASH_ALGORITHM$1 = \"hashAlgorithm\";\nconst ISSUER_NAME_HASH = \"issuerNameHash\";\nconst ISSUER_KEY_HASH = \"issuerKeyHash\";\nconst SERIAL_NUMBER$1 = \"serialNumber\";\nconst CLEAR_PROPS$j = [\n    HASH_ALGORITHM$1,\n    ISSUER_NAME_HASH,\n    ISSUER_KEY_HASH,\n    SERIAL_NUMBER$1,\n];\nclass CertID extends PkiObject {\n    static async create(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        return certID;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));\n        this.issuerNameHash = pvutils.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));\n        this.issuerKeyHash = pvutils.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n                return new asn1js.OctetString();\n            case SERIAL_NUMBER$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n            case SERIAL_NUMBER$1:\n                return (memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n                    names: {\n                        blockName: (names.hashAlgorithm || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.issuerNameHash || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.issuerKeyHash || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$j);\n        const asn1 = asn1js.compareSchema(schema, schema, CertID.schema({\n            names: {\n                hashAlgorithm: HASH_ALGORITHM$1,\n                issuerNameHash: ISSUER_NAME_HASH,\n                issuerKeyHash: ISSUER_KEY_HASH,\n                serialNumber: SERIAL_NUMBER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.issuerNameHash = asn1.result.issuerNameHash;\n        this.issuerKeyHash = asn1.result.issuerKeyHash;\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.issuerNameHash,\n                this.issuerKeyHash,\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            issuerNameHash: this.issuerNameHash.toJSON(),\n            issuerKeyHash: this.issuerKeyHash.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n    isEqual(certificateID) {\n        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {\n            return false;\n        }\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {\n            return false;\n        }\n        return true;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, HASH_ALGORITHM$1, \"issuerCertificate\");\n        const hashOID = crypto.getOIDByAlgorithm({ name: parameters.hashAlgorithm }, true, \"hashAlgorithm\");\n        this.hashAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashOID,\n            algorithmParams: new asn1js.Null()\n        });\n        const issuerCertificate = parameters.issuerCertificate;\n        this.serialNumber = certificate.serialNumber;\n        const hashIssuerName = await crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));\n        this.issuerNameHash = new asn1js.OctetString({ valueHex: hashIssuerName });\n        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;\n        const hashIssuerKey = await crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\n        this.issuerKeyHash = new asn1js.OctetString({ valueHex: hashIssuerKey });\n    }\n}\nCertID.CLASS_NAME = \"CertID\";\n\nconst CERT_ID = \"certID\";\nconst CERT_STATUS = \"certStatus\";\nconst THIS_UPDATE = \"thisUpdate\";\nconst NEXT_UPDATE = \"nextUpdate\";\nconst SINGLE_EXTENSIONS = \"singleExtensions\";\nconst CLEAR_PROPS$i = [\n    CERT_ID,\n    CERT_STATUS,\n    THIS_UPDATE,\n    NEXT_UPDATE,\n    SINGLE_EXTENSIONS,\n];\nclass SingleResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certID = pvutils.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));\n        this.certStatus = pvutils.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));\n        if (NEXT_UPDATE in parameters) {\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));\n        }\n        if (SINGLE_EXTENSIONS in parameters) {\n            this.singleExtensions = pvutils.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID:\n                return new CertID();\n            case CERT_STATUS:\n                return {};\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return new Date(0, 0, 0);\n            case SINGLE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID:\n                return ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\n                    (CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\n                    (CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\n            case CERT_STATUS:\n                return (Object.keys(memberValue).length === 0);\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return (memberValue === SingleResponse.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.certID || {}),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js.GeneralizedTime(),\n                                new asn1js.Constructed({\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js.Enumerated()]\n                                })\n                            ]\n                        }),\n                        new asn1js.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            lenBlock: { length: 1 }\n                        })\n                    ]\n                }),\n                new asn1js.GeneralizedTime({ name: (names.thisUpdate || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.singleExtensions || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$i);\n        const asn1 = asn1js.compareSchema(schema, schema, SingleResponse.schema({\n            names: {\n                certID: {\n                    names: {\n                        blockName: CERT_ID\n                    }\n                },\n                certStatus: CERT_STATUS,\n                thisUpdate: THIS_UPDATE,\n                nextUpdate: NEXT_UPDATE,\n                singleExtensions: {\n                    names: {\n                        blockName: SINGLE_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certID = new CertID({ schema: asn1.result.certID });\n        this.certStatus = asn1.result.certStatus;\n        this.thisUpdate = asn1.result.thisUpdate.toDate();\n        if (NEXT_UPDATE in asn1.result)\n            this.nextUpdate = asn1.result.nextUpdate.toDate();\n        if (SINGLE_EXTENSIONS in asn1.result)\n            this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.certID.toSchema());\n        outputArray.push(this.certStatus);\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\n        if (this.nextUpdate) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\n            }));\n        }\n        if (this.singleExtensions) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.singleExtensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            certID: this.certID.toJSON(),\n            certStatus: this.certStatus.toJSON(),\n            thisUpdate: this.thisUpdate\n        };\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate;\n        }\n        if (this.singleExtensions) {\n            res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSingleResponse.CLASS_NAME = \"SingleResponse\";\n\nconst TBS$2 = \"tbs\";\nconst VERSION$7 = \"version\";\nconst RESPONDER_ID = \"responderID\";\nconst PRODUCED_AT = \"producedAt\";\nconst RESPONSES = \"responses\";\nconst RESPONSE_EXTENSIONS = \"responseExtensions\";\nconst RESPONSE_DATA = \"ResponseData\";\nconst RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;\nconst RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;\nconst RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;\nconst RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;\nconst RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;\nconst CLEAR_PROPS$h = [\n    RESPONSE_DATA,\n    RESPONSE_DATA_VERSION,\n    RESPONSE_DATA_RESPONDER_ID,\n    RESPONSE_DATA_PRODUCED_AT,\n    RESPONSE_DATA_RESPONSES,\n    RESPONSE_DATA_RESPONSE_EXTENSIONS\n];\nclass ResponseData extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));\n        if (VERSION$7 in parameters) {\n            this.version = pvutils.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));\n        }\n        this.responderID = pvutils.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));\n        this.producedAt = pvutils.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));\n        this.responses = pvutils.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));\n        if (RESPONSE_EXTENSIONS in parameters) {\n            this.responseExtensions = pvutils.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$7:\n                return 0;\n            case TBS$2:\n                return EMPTY_BUFFER;\n            case RESPONDER_ID:\n                return {};\n            case PRODUCED_AT:\n                return new Date(0, 0, 0);\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS$2:\n                return (memberValue.byteLength === 0);\n            case RESPONDER_ID:\n                return (Object.keys(memberValue).length === 0);\n            case PRODUCED_AT:\n                return (memberValue === ResponseData.defaultValues(memberName));\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || RESPONSE_DATA),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.version || RESPONSE_DATA_VERSION) })]\n                }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n                                    names: {\n                                        blockName: \"ResponseData.byName\"\n                                    }\n                                })]\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: [new asn1js.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\n                        })\n                    ]\n                }),\n                new asn1js.GeneralizedTime({ name: (names.producedAt || RESPONSE_DATA_PRODUCED_AT) }),\n                new asn1js.Sequence({\n                    value: [\n                        new asn1js.Repeated({\n                            name: RESPONSE_DATA_RESPONSES,\n                            value: SingleResponse.schema(names.response || {})\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$h);\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;\n        if (RESPONSE_DATA_VERSION in asn1.result)\n            this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;\n        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1)\n            this.responderID = new RelativeDistinguishedNames({ schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0] });\n        else\n            this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];\n        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();\n        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({ schema: element }));\n        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result)\n            this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return ResponseData.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Response Data\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (VERSION$7 in this) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ value: this.version })]\n                }));\n            }\n            if (this.responderID instanceof RelativeDistinguishedNames) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.responderID.toSchema()]\n                }));\n            }\n            else {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [this.responderID]\n                }));\n            }\n            outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.responses, o => o.toSchema())\n            }));\n            if (this.responseExtensions) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.Sequence({\n                            value: Array.from(this.responseExtensions, o => o.toSchema())\n                        })]\n                }));\n            }\n            tbsSchema = new asn1js.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (VERSION$7 in this) {\n            res.version = this.version;\n        }\n        if (this.responderID) {\n            res.responderID = this.responderID;\n        }\n        if (this.producedAt) {\n            res.producedAt = this.producedAt;\n        }\n        if (this.responses) {\n            res.responses = Array.from(this.responses, o => o.toJSON());\n        }\n        if (this.responseExtensions) {\n            res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nResponseData.CLASS_NAME = \"ResponseData\";\n\nconst TRUSTED_CERTS = \"trustedCerts\";\nconst CERTS$2 = \"certs\";\nconst CRLS$1 = \"crls\";\nconst OCSPS$1 = \"ocsps\";\nconst CHECK_DATE = \"checkDate\";\nconst FIND_ORIGIN = \"findOrigin\";\nconst FIND_ISSUER = \"findIssuer\";\nvar ChainValidationCode;\n(function (ChainValidationCode) {\n    ChainValidationCode[ChainValidationCode[\"unknown\"] = -1] = \"unknown\";\n    ChainValidationCode[ChainValidationCode[\"success\"] = 0] = \"success\";\n    ChainValidationCode[ChainValidationCode[\"noRevocation\"] = 11] = \"noRevocation\";\n    ChainValidationCode[ChainValidationCode[\"noPath\"] = 60] = \"noPath\";\n    ChainValidationCode[ChainValidationCode[\"noValidPath\"] = 97] = \"noValidPath\";\n})(ChainValidationCode || (ChainValidationCode = {}));\nclass ChainValidationError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.name = ChainValidationError.NAME;\n        this.code = code;\n        this.message = message;\n    }\n}\nChainValidationError.NAME = \"ChainValidationError\";\nfunction isTrusted(cert, trustedList) {\n    for (let i = 0; i < trustedList.length; i++) {\n        if (pvtsutils.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {\n            return true;\n        }\n    }\n    return false;\n}\nclass CertificateChainValidationEngine {\n    constructor(parameters = {}) {\n        this.trustedCerts = pvutils.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));\n        this.certs = pvutils.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));\n        this.crls = pvutils.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));\n        this.ocsps = pvutils.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));\n        this.checkDate = pvutils.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));\n        this.findOrigin = pvutils.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));\n        this.findIssuer = pvutils.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));\n    }\n    static defaultFindOrigin(certificate, validationEngine) {\n        if (certificate.tbsView.byteLength === 0) {\n            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());\n        }\n        for (const localCert of validationEngine.certs) {\n            if (localCert.tbsView.byteLength === 0) {\n                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());\n            }\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView))\n                return \"Intermediate Certificates\";\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            if (trustedCert.tbsView.byteLength === 0)\n                trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView))\n                return \"Trusted Certificates\";\n        }\n        return \"Unknown\";\n    }\n    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {\n        const result = [];\n        let keyIdentifier = null;\n        let authorityCertIssuer = null;\n        let authorityCertSerialNumber = null;\n        if (certificate.subject.isEqual(certificate.issuer)) {\n            try {\n                const verificationResult = await certificate.verify(undefined, crypto);\n                if (verificationResult) {\n                    return [certificate];\n                }\n            }\n            catch (ex) {\n            }\n        }\n        if (certificate.extensions) {\n            for (const extension of certificate.extensions) {\n                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {\n                    if (extension.parsedValue.keyIdentifier) {\n                        keyIdentifier = extension.parsedValue.keyIdentifier;\n                    }\n                    else {\n                        if (extension.parsedValue.authorityCertIssuer) {\n                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n                        }\n                        if (extension.parsedValue.authorityCertSerialNumber) {\n                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        function checkCertificate(possibleIssuer) {\n            if (keyIdentifier !== null) {\n                if (possibleIssuer.extensions) {\n                    let extensionFound = false;\n                    for (const extension of possibleIssuer.extensions) {\n                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {\n                            extensionFound = true;\n                            if (pvtsutils.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {\n                                result.push(possibleIssuer);\n                            }\n                            break;\n                        }\n                    }\n                    if (extensionFound) {\n                        return;\n                    }\n                }\n            }\n            let authorityCertSerialNumberEqual = false;\n            if (authorityCertSerialNumber !== null)\n                authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\n            if (authorityCertIssuer !== null) {\n                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n                    if (authorityCertSerialNumberEqual)\n                        result.push(possibleIssuer);\n                }\n            }\n            else {\n                if (certificate.issuer.isEqual(possibleIssuer.subject))\n                    result.push(possibleIssuer);\n            }\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            checkCertificate(trustedCert);\n        }\n        for (const intermediateCert of validationEngine.certs) {\n            checkCertificate(intermediateCert);\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            try {\n                const verificationResult = await certificate.verify(result[i], crypto);\n                if (verificationResult === false)\n                    result.splice(i, 1);\n            }\n            catch (ex) {\n                result.splice(i, 1);\n            }\n        }\n        return result;\n    }\n    defaultValues(memberName) {\n        switch (memberName) {\n            case TRUSTED_CERTS:\n                return [];\n            case CERTS$2:\n                return [];\n            case CRLS$1:\n                return [];\n            case OCSPS$1:\n                return [];\n            case CHECK_DATE:\n                return new Date();\n            case FIND_ORIGIN:\n                return CertificateChainValidationEngine.defaultFindOrigin;\n            case FIND_ISSUER:\n                return this.defaultFindIssuer;\n            default:\n                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\n        }\n    }\n    async sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {\n        const localCerts = [];\n        const buildPath = async (certificate, crypto) => {\n            const result = [];\n            function checkUnique(array) {\n                let unique = true;\n                for (let i = 0; i < array.length; i++) {\n                    for (let j = 0; j < array.length; j++) {\n                        if (j === i)\n                            continue;\n                        if (array[i] === array[j]) {\n                            unique = false;\n                            break;\n                        }\n                    }\n                    if (!unique)\n                        break;\n                }\n                return unique;\n            }\n            if (isTrusted(certificate, this.trustedCerts)) {\n                return [[certificate]];\n            }\n            const findIssuerResult = await this.findIssuer(certificate, this, crypto);\n            if (findIssuerResult.length === 0) {\n                throw new Error(\"No valid certificate paths found\");\n            }\n            for (let i = 0; i < findIssuerResult.length; i++) {\n                if (pvtsutils.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {\n                    result.push([findIssuerResult[i]]);\n                    continue;\n                }\n                const buildPathResult = await buildPath(findIssuerResult[i], crypto);\n                for (let j = 0; j < buildPathResult.length; j++) {\n                    const copy = buildPathResult[j].slice();\n                    copy.splice(0, 0, findIssuerResult[i]);\n                    if (checkUnique(copy))\n                        result.push(copy);\n                    else\n                        result.push(buildPathResult[j]);\n                }\n            }\n            return result;\n        };\n        const findCRL = async (certificate) => {\n            const issuerCertificates = [];\n            const crls = [];\n            const crlsAndCertificates = [];\n            issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\n            if (issuerCertificates.length === 0) {\n                return {\n                    status: 1,\n                    statusMessage: \"No certificate's issuers\"\n                };\n            }\n            crls.push(...this.crls.filter(o => o.issuer.isEqual(certificate.issuer)));\n            if (crls.length === 0) {\n                return {\n                    status: 2,\n                    statusMessage: \"No CRLs for specific certificate issuer\"\n                };\n            }\n            for (let i = 0; i < crls.length; i++) {\n                const crl = crls[i];\n                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {\n                    continue;\n                }\n                for (let j = 0; j < issuerCertificates.length; j++) {\n                    try {\n                        const result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] }, crypto);\n                        if (result) {\n                            crlsAndCertificates.push({\n                                crl: crls[i],\n                                certificate: issuerCertificates[j]\n                            });\n                            break;\n                        }\n                    }\n                    catch (ex) {\n                    }\n                }\n            }\n            if (crlsAndCertificates.length) {\n                return {\n                    status: 0,\n                    statusMessage: EMPTY_STRING,\n                    result: crlsAndCertificates\n                };\n            }\n            return {\n                status: 3,\n                statusMessage: \"No valid CRLs found\"\n            };\n        };\n        const findOCSP = async (certificate, issuerCertificate) => {\n            const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n            if (!hashAlgorithm.name) {\n                return 1;\n            }\n            if (!hashAlgorithm.hash) {\n                return 1;\n            }\n            for (let i = 0; i < this.ocsps.length; i++) {\n                const ocsp = this.ocsps[i];\n                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);\n                if (result.isForCertificate) {\n                    if (result.status === 0)\n                        return 0;\n                    return 1;\n                }\n            }\n            return 2;\n        };\n        async function checkForCA(certificate, needToCheckCRL = false) {\n            let isCA = false;\n            let mustBeCA = false;\n            let keyUsagePresent = false;\n            let cRLSign = false;\n            if (certificate.extensions) {\n                for (let j = 0; j < certificate.extensions.length; j++) {\n                    const extension = certificate.extensions[j];\n                    if (extension.critical && !extension.parsedValue) {\n                        return {\n                            result: false,\n                            resultCode: 6,\n                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`\n                        };\n                    }\n                    if (extension.extnID === id_KeyUsage) {\n                        keyUsagePresent = true;\n                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);\n                        if ((view[0] & 0x04) === 0x04)\n                            mustBeCA = true;\n                        if ((view[0] & 0x02) === 0x02)\n                            cRLSign = true;\n                    }\n                    if (extension.extnID === id_BasicConstraints) {\n                        if (\"cA\" in extension.parsedValue) {\n                            if (extension.parsedValue.cA === true)\n                                isCA = true;\n                        }\n                    }\n                }\n                if ((mustBeCA === true) && (isCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 3,\n                        resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstraints\"\n                    };\n                }\n                if ((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 4,\n                        resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n                    };\n                }\n                if ((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false))) {\n                    return {\n                        result: false,\n                        resultCode: 5,\n                        resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n                    };\n                }\n            }\n            if (isCA === false) {\n                return {\n                    result: false,\n                    resultCode: 7,\n                    resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n                };\n            }\n            return {\n                result: true,\n                resultCode: 0,\n                resultMessage: EMPTY_STRING\n            };\n        }\n        const basicCheck = async (path, checkDate) => {\n            for (let i = 0; i < path.length; i++) {\n                if ((path[i].notBefore.value > checkDate) ||\n                    (path[i].notAfter.value < checkDate)) {\n                    return {\n                        result: false,\n                        resultCode: 8,\n                        resultMessage: \"The certificate is either not yet valid or expired\"\n                    };\n                }\n            }\n            if (path.length < 2) {\n                return {\n                    result: false,\n                    resultCode: 9,\n                    resultMessage: \"Too short certificate path\"\n                };\n            }\n            for (let i = (path.length - 2); i >= 0; i--) {\n                if (path[i].issuer.isEqual(path[i].subject) === false) {\n                    if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\n                        return {\n                            result: false,\n                            resultCode: 10,\n                            resultMessage: \"Incorrect name chaining\"\n                        };\n                    }\n                }\n            }\n            if ((this.crls.length !== 0) || (this.ocsps.length !== 0)) {\n                for (let i = 0; i < (path.length - 1); i++) {\n                    let ocspResult = 2;\n                    let crlResult = {\n                        status: 0,\n                        statusMessage: EMPTY_STRING\n                    };\n                    if (this.ocsps.length !== 0) {\n                        ocspResult = await findOCSP(path[i], path[i + 1]);\n                        switch (ocspResult) {\n                            case 0:\n                                continue;\n                            case 1:\n                                return {\n                                    result: false,\n                                    resultCode: 12,\n                                    resultMessage: \"One of certificates was revoked via OCSP response\"\n                                };\n                        }\n                    }\n                    if (this.crls.length !== 0) {\n                        crlResult = await findCRL(path[i]);\n                        if (crlResult.status === 0 && crlResult.result) {\n                            for (let j = 0; j < crlResult.result.length; j++) {\n                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\n                                if (isCertificateRevoked) {\n                                    return {\n                                        result: false,\n                                        resultCode: 12,\n                                        resultMessage: \"One of certificates had been revoked\"\n                                    };\n                                }\n                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\n                                if (isCertificateCA.result === false) {\n                                    return {\n                                        result: false,\n                                        resultCode: 13,\n                                        resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                                    };\n                                }\n                            }\n                        }\n                        else {\n                            if (passedWhenNotRevValues === false) {\n                                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                            }\n                        }\n                    }\n                    else {\n                        if (ocspResult === 2) {\n                            return {\n                                result: false,\n                                resultCode: 11,\n                                resultMessage: \"No revocation values found for one of certificates\"\n                            };\n                        }\n                    }\n                    if ((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues) {\n                        const issuerCertificate = path[i + 1];\n                        let extensionFound = false;\n                        if (issuerCertificate.extensions) {\n                            for (const extension of issuerCertificate.extensions) {\n                                switch (extension.extnID) {\n                                    case id_CRLDistributionPoints:\n                                    case id_FreshestCRL:\n                                    case id_AuthorityInfoAccess:\n                                        extensionFound = true;\n                                        break;\n                                }\n                            }\n                        }\n                        if (extensionFound) {\n                            throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                        }\n                    }\n                }\n            }\n            for (const [i, cert] of path.entries()) {\n                if (!i) {\n                    continue;\n                }\n                const result = await checkForCA(cert);\n                if (!result.result) {\n                    return {\n                        result: false,\n                        resultCode: 14,\n                        resultMessage: \"One of intermediate certificates is not a CA certificate\"\n                    };\n                }\n            }\n            return {\n                result: true\n            };\n        };\n        localCerts.push(...this.trustedCerts);\n        localCerts.push(...this.certs);\n        for (let i = 0; i < localCerts.length; i++) {\n            for (let j = 0; j < localCerts.length; j++) {\n                if (i === j)\n                    continue;\n                if (pvtsutils.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {\n                    localCerts.splice(j, 1);\n                    i = 0;\n                    break;\n                }\n            }\n        }\n        const leafCert = localCerts[localCerts.length - 1];\n        let result;\n        const certificatePath = [leafCert];\n        result = await buildPath(leafCert, crypto);\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noPath, \"Unable to find certificate path\");\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            let found = false;\n            for (let j = 0; j < (result[i]).length; j++) {\n                const certificate = (result[i])[j];\n                for (let k = 0; k < this.trustedCerts.length; k++) {\n                    if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found)\n                    break;\n            }\n            if (!found) {\n                result.splice(i, 1);\n            }\n        }\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noValidPath, \"No valid certificate paths found\");\n        }\n        let shortestLength = result[0].length;\n        let shortestIndex = 0;\n        for (let i = 0; i < result.length; i++) {\n            if (result[i].length < shortestLength) {\n                shortestLength = result[i].length;\n                shortestIndex = i;\n            }\n        }\n        for (let i = 0; i < result[shortestIndex].length; i++)\n            certificatePath.push((result[shortestIndex])[i]);\n        result = await basicCheck(certificatePath, this.checkDate);\n        if (result.result === false)\n            throw result;\n        return certificatePath;\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        function compareDNSName(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\".\");\n            const constraintSplitted = constraintPrepared.split(\".\");\n            const nameLen = nameSplitted.length;\n            const constrLen = constraintSplitted.length;\n            if ((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen)) {\n                return false;\n            }\n            for (let i = 0; i < nameLen; i++) {\n                if (nameSplitted[i].length === 0) {\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[i].length === 0) {\n                    if (i === 0) {\n                        if (constrLen === 1) {\n                            return false;\n                        }\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[constrLen - 1 - i].length === 0) {\n                    continue;\n                }\n                if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function compareRFC822Name(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\"@\");\n            const constraintSplitted = constraintPrepared.split(\"@\");\n            if ((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\n                return false;\n            if (constraintSplitted.length === 1) {\n                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n                if (result) {\n                    const ns = nameSplitted[1].split(\".\");\n                    const cs = constraintSplitted[0].split(\".\");\n                    if (cs[0].length === 0)\n                        return true;\n                    return ns.length === cs.length;\n                }\n                return false;\n            }\n            return (namePrepared.localeCompare(constraintPrepared) === 0);\n        }\n        function compareUniformResourceIdentifier(name, constraint) {\n            let namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const ns = namePrepared.split(\"/\");\n            const cs = constraintPrepared.split(\"/\");\n            if (cs.length > 1)\n                return false;\n            if (ns.length > 1) {\n                for (let i = 0; i < ns.length; i++) {\n                    if ((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\")) {\n                        const nsPort = ns[i].split(\":\");\n                        namePrepared = nsPort[0];\n                        break;\n                    }\n                }\n            }\n            const result = compareDNSName(namePrepared, constraintPrepared);\n            if (result) {\n                const nameSplitted = namePrepared.split(\".\");\n                const constraintSplitted = constraintPrepared.split(\".\");\n                if (constraintSplitted[0].length === 0)\n                    return true;\n                return nameSplitted.length === constraintSplitted.length;\n            }\n            return false;\n        }\n        function compareIPAddress(name, constraint) {\n            const nameView = name.valueBlock.valueHexView;\n            const constraintView = constraint.valueBlock.valueHexView;\n            if ((nameView.length === 4) && (constraintView.length === 8)) {\n                for (let i = 0; i < 4; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\n                        return false;\n                }\n                return true;\n            }\n            if ((nameView.length === 16) && (constraintView.length === 32)) {\n                for (let i = 0; i < 16; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\n                        return false;\n                }\n                return true;\n            }\n            return false;\n        }\n        function compareDirectoryName(name, constraint) {\n            if ((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\n                return true;\n            if (name.typesAndValues.length < constraint.typesAndValues.length)\n                return false;\n            let result = true;\n            let nameStart = 0;\n            for (let i = 0; i < constraint.typesAndValues.length; i++) {\n                let localResult = false;\n                for (let j = nameStart; j < name.typesAndValues.length; j++) {\n                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n                    if (name.typesAndValues[j].type === constraint.typesAndValues[i].type)\n                        result = result && localResult;\n                    if (localResult === true) {\n                        if ((nameStart === 0) || (nameStart === j)) {\n                            nameStart = j + 1;\n                            break;\n                        }\n                        else\n                            return false;\n                    }\n                }\n                if (localResult === false)\n                    return false;\n            }\n            return (nameStart === 0) ? false : result;\n        }\n        try {\n            if (this.certs.length === 0)\n                throw new Error(\"Empty certificate array\");\n            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;\n            const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];\n            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;\n            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;\n            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;\n            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];\n            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];\n            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];\n            let explicitPolicyIndicator = initialExplicitPolicy;\n            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n            let inhibitAnyPolicyIndicator = initialInhibitPolicy;\n            const pendingConstraints = [\n                false,\n                false,\n                false,\n            ];\n            let explicitPolicyPending = 0;\n            let policyMappingInhibitPending = 0;\n            let inhibitAnyPolicyPending = 0;\n            let permittedSubtrees = initialPermittedSubtreesSet;\n            let excludedSubtrees = initialExcludedSubtreesSet;\n            const requiredNameForms = initialRequiredNameForms;\n            let pathDepth = 1;\n            this.certs = await this.sort(passedWhenNotRevValues, crypto);\n            const allPolicies = [];\n            allPolicies.push(id_AnyPolicy);\n            const policiesAndCerts = [];\n            const anyPolicyArray = new Array(this.certs.length - 1);\n            for (let ii = 0; ii < (this.certs.length - 1); ii++)\n                anyPolicyArray[ii] = true;\n            policiesAndCerts.push(anyPolicyArray);\n            const policyMappings = new Array(this.certs.length - 1);\n            const certPolicies = new Array(this.certs.length - 1);\n            let explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_CertificatePolicies) {\n                            certPolicies[i] = extension.parsedValue;\n                            for (let s = 0; s < allPolicies.length; s++) {\n                                if (allPolicies[s] === id_AnyPolicy) {\n                                    delete (policiesAndCerts[s])[i];\n                                    break;\n                                }\n                            }\n                            for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {\n                                let policyIndex = (-1);\n                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;\n                                for (let s = 0; s < allPolicies.length; s++) {\n                                    if (policyId === allPolicies[s]) {\n                                        policyIndex = s;\n                                        break;\n                                    }\n                                }\n                                if (policyIndex === (-1)) {\n                                    allPolicies.push(policyId);\n                                    const certArray = new Array(this.certs.length - 1);\n                                    certArray[i] = true;\n                                    policiesAndCerts.push(certArray);\n                                }\n                                else\n                                    (policiesAndCerts[policyIndex])[i] = true;\n                            }\n                        }\n                        if (extension.extnID === id_PolicyMappings) {\n                            if (policyMappingInhibitIndicator) {\n                                return {\n                                    result: false,\n                                    resultCode: 98,\n                                    resultMessage: \"Policy mapping prohibited\"\n                                };\n                            }\n                            policyMappings[i] = extension.parsedValue;\n                        }\n                        if (extension.extnID === id_PolicyConstraints) {\n                            if (explicitPolicyIndicator === false) {\n                                if (extension.parsedValue.requireExplicitPolicy === 0) {\n                                    explicitPolicyIndicator = true;\n                                    explicitPolicyStart = i;\n                                }\n                                else {\n                                    if (pendingConstraints[0] === false) {\n                                        pendingConstraints[0] = true;\n                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;\n                                    }\n                                    else\n                                        explicitPolicyPending = (explicitPolicyPending > extension.parsedValue.requireExplicitPolicy) ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                                }\n                                if (extension.parsedValue.inhibitPolicyMapping === 0)\n                                    policyMappingInhibitIndicator = true;\n                                else {\n                                    if (pendingConstraints[1] === false) {\n                                        pendingConstraints[1] = true;\n                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;\n                                    }\n                                    else\n                                        policyMappingInhibitPending = (policyMappingInhibitPending > (extension.parsedValue.inhibitPolicyMapping + 1)) ? (extension.parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\n                                }\n                            }\n                        }\n                        if (extension.extnID === id_InhibitAnyPolicy) {\n                            if (inhibitAnyPolicyIndicator === false) {\n                                if (extension.parsedValue.valueBlock.valueDec === 0)\n                                    inhibitAnyPolicyIndicator = true;\n                                else {\n                                    if (pendingConstraints[2] === false) {\n                                        pendingConstraints[2] = true;\n                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;\n                                    }\n                                    else\n                                        inhibitAnyPolicyPending = (inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec) ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                                }\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === true) {\n                        let policyIndex = (-1);\n                        for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\n                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {\n                                policyIndex = searchAnyPolicy;\n                                break;\n                            }\n                        }\n                        if (policyIndex !== (-1))\n                            delete (policiesAndCerts[0])[i];\n                    }\n                    if (explicitPolicyIndicator === false) {\n                        if (pendingConstraints[0] === true) {\n                            explicitPolicyPending--;\n                            if (explicitPolicyPending === 0) {\n                                explicitPolicyIndicator = true;\n                                explicitPolicyStart = i;\n                                pendingConstraints[0] = false;\n                            }\n                        }\n                    }\n                    if (policyMappingInhibitIndicator === false) {\n                        if (pendingConstraints[1] === true) {\n                            policyMappingInhibitPending--;\n                            if (policyMappingInhibitPending === 0) {\n                                policyMappingInhibitIndicator = true;\n                                pendingConstraints[1] = false;\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === false) {\n                        if (pendingConstraints[2] === true) {\n                            inhibitAnyPolicyPending--;\n                            if (inhibitAnyPolicyPending === 0) {\n                                inhibitAnyPolicyIndicator = true;\n                                pendingConstraints[2] = false;\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < (this.certs.length - 1); i++) {\n                if ((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\")) {\n                    for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\n                        if ((policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy) || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy)) {\n                            return {\n                                result: false,\n                                resultCode: 99,\n                                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n                            };\n                        }\n                        let issuerDomainPolicyIndex = (-1);\n                        let subjectDomainPolicyIndex = (-1);\n                        for (let n = 0; n < allPolicies.length; n++) {\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\n                                issuerDomainPolicyIndex = n;\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\n                                subjectDomainPolicyIndex = n;\n                        }\n                        if (typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\n                            delete (policiesAndCerts[issuerDomainPolicyIndex])[i];\n                        for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\n                            if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\n                                if ((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1))) {\n                                    for (let m = 0; m <= i; m++) {\n                                        if (typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\") {\n                                            (policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\n                                            delete (policiesAndCerts[subjectDomainPolicyIndex])[m];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < allPolicies.length; i++) {\n                if (allPolicies[i] === id_AnyPolicy) {\n                    for (let j = 0; j < explicitPolicyStart; j++)\n                        delete (policiesAndCerts[i])[j];\n                }\n            }\n            const authConstrPolicies = [];\n            for (let i = 0; i < policiesAndCerts.length; i++) {\n                let found = true;\n                for (let j = 0; j < (this.certs.length - 1); j++) {\n                    let anyPolicyFound = false;\n                    if ((j < explicitPolicyStart) && (allPolicies[i] === id_AnyPolicy) && (allPolicies.length > 1)) {\n                        found = false;\n                        break;\n                    }\n                    if (typeof (policiesAndCerts[i])[j] === \"undefined\") {\n                        if (j >= explicitPolicyStart) {\n                            for (let k = 0; k < allPolicies.length; k++) {\n                                if (allPolicies[k] === id_AnyPolicy) {\n                                    if ((policiesAndCerts[k])[j] === true)\n                                        anyPolicyFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!anyPolicyFound) {\n                            found = false;\n                            break;\n                        }\n                    }\n                }\n                if (found === true)\n                    authConstrPolicies.push(allPolicies[i]);\n            }\n            let userConstrPolicies = [];\n            if ((initialPolicySet.length === 1) && (initialPolicySet[0] === id_AnyPolicy) && (explicitPolicyIndicator === false))\n                userConstrPolicies = initialPolicySet;\n            else {\n                if ((authConstrPolicies.length === 1) && (authConstrPolicies[0] === id_AnyPolicy))\n                    userConstrPolicies = initialPolicySet;\n                else {\n                    for (let i = 0; i < authConstrPolicies.length; i++) {\n                        for (let j = 0; j < initialPolicySet.length; j++) {\n                            if ((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === id_AnyPolicy)) {\n                                userConstrPolicies.push(authConstrPolicies[i]);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            const policyResult = {\n                result: (userConstrPolicies.length > 0),\n                resultCode: 0,\n                resultMessage: (userConstrPolicies.length > 0) ? EMPTY_STRING : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n                authConstrPolicies,\n                userConstrPolicies,\n                explicitPolicyIndicator,\n                policyMappings,\n                certificatePath: this.certs\n            };\n            if (userConstrPolicies.length === 0)\n                return policyResult;\n            if (policyResult.result === false)\n                return policyResult;\n            pathDepth = 1;\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                let subjectAltNames = [];\n                let certPermittedSubtrees = [];\n                let certExcludedSubtrees = [];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_NameConstraints) {\n                            if (\"permittedSubtrees\" in extension.parsedValue)\n                                certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);\n                            if (\"excludedSubtrees\" in extension.parsedValue)\n                                certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);\n                        }\n                        if (extension.extnID === id_SubjectAltName)\n                            subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);\n                    }\n                }\n                let formFound = (requiredNameForms.length <= 0);\n                for (let j = 0; j < requiredNameForms.length; j++) {\n                    switch (requiredNameForms[j].base.type) {\n                        case 4:\n                            {\n                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length)\n                                    continue;\n                                formFound = true;\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\n                                        formFound = false;\n                                        break;\n                                    }\n                                }\n                                if (formFound === true)\n                                    break;\n                            }\n                            break;\n                        default:\n                    }\n                }\n                if (formFound === false) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 21;\n                    policyResult.resultMessage = \"No necessary name form found\";\n                    throw policyResult;\n                }\n                const constrGroups = [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                ];\n                for (let j = 0; j < permittedSubtrees.length; j++) {\n                    switch (permittedSubtrees[j].base.type) {\n                        case 1:\n                            constrGroups[0].push(permittedSubtrees[j]);\n                            break;\n                        case 2:\n                            constrGroups[1].push(permittedSubtrees[j]);\n                            break;\n                        case 4:\n                            constrGroups[2].push(permittedSubtrees[j]);\n                            break;\n                        case 6:\n                            constrGroups[3].push(permittedSubtrees[j]);\n                            break;\n                        case 7:\n                            constrGroups[4].push(permittedSubtrees[j]);\n                            break;\n                        default:\n                    }\n                }\n                for (let p = 0; p < 5; p++) {\n                    let groupPermitted = false;\n                    let valueExists = false;\n                    const group = constrGroups[p];\n                    for (let j = 0; j < group.length; j++) {\n                        switch (p) {\n                            case 0:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 1) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                else {\n                                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                        if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                            (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 2) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 2:\n                                valueExists = true;\n                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);\n                                break;\n                            case 3:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 6) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 4:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 7) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            default:\n                        }\n                        if (groupPermitted)\n                            break;\n                    }\n                    if ((groupPermitted === false) && (group.length > 0) && valueExists) {\n                        policyResult.result = false;\n                        policyResult.resultCode = 41;\n                        policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n                        throw policyResult;\n                    }\n                }\n                let excluded = false;\n                for (let j = 0; j < excludedSubtrees.length; j++) {\n                    switch (excludedSubtrees[j].base.type) {\n                        case 1:\n                            if (subjectAltNames.length >= 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 1)\n                                        excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            else {\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                        (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\"))\n                                        excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 2)\n                                        excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 4:\n                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);\n                            break;\n                        case 6:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 6)\n                                        excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 7:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 7)\n                                        excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        default:\n                    }\n                    if (excluded)\n                        break;\n                }\n                if (excluded === true) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 42;\n                    policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n                    throw policyResult;\n                }\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\n            }\n            return policyResult;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error instanceof ChainValidationError) {\n                    return {\n                        result: false,\n                        resultCode: error.code,\n                        resultMessage: error.message,\n                        error: error,\n                    };\n                }\n                return {\n                    result: false,\n                    resultCode: ChainValidationCode.unknown,\n                    resultMessage: error.message,\n                    error: error,\n                };\n            }\n            if (error && typeof error === \"object\" && \"resultMessage\" in error) {\n                return error;\n            }\n            return {\n                result: false,\n                resultCode: -1,\n                resultMessage: `${error}`,\n            };\n        }\n    }\n}\n\nconst TBS_RESPONSE_DATA = \"tbsResponseData\";\nconst SIGNATURE_ALGORITHM$3 = \"signatureAlgorithm\";\nconst SIGNATURE$2 = \"signature\";\nconst CERTS$1 = \"certs\";\nconst BASIC_OCSP_RESPONSE = \"BasicOCSPResponse\";\nconst BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;\nconst BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;\nconst CLEAR_PROPS$g = [\n    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,\n    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,\n    BASIC_OCSP_RESPONSE_SIGNATURE,\n    BASIC_OCSP_RESPONSE_CERTS\n];\nclass BasicOCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsResponseData = pvutils.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));\n        if (CERTS$1 in parameters) {\n            this.certs = pvutils.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_RESPONSE_DATA:\n                return new ResponseData();\n            case SIGNATURE_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$2:\n                return new asn1js.BitString();\n            case CERTS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"type\":\n                {\n                    let comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                        (ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\n                        (ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\n                        (ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\n                    if (\"responseExtensions\" in memberValue)\n                        comparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\n                    return comparisonResult;\n                }\n            case SIGNATURE_ALGORITHM$3:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$2:\n                return (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\n            case CERTS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || BASIC_OCSP_RESPONSE),\n            value: [\n                ResponseData.schema(names.tbsResponseData || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signature || BASIC_OCSP_RESPONSE_SIGNATURE) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: [new asn1js.Repeated({\n                                    name: BASIC_OCSP_RESPONSE_CERTS,\n                                    value: Certificate.schema(names.certs || {})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$g);\n        const asn1 = asn1js.compareSchema(schema, schema, BasicOCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsResponseData = new ResponseData({ schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];\n        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {\n            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.tbsResponseData.toSchema());\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsResponseData: this.tbsResponseData.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        const hashesObject = {};\n        const certIDs = [];\n        for (const response of this.tbsResponseData.responses) {\n            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, \"CertID.hashAlgorithm\");\n            if (!hashesObject[hashAlgorithm.name]) {\n                hashesObject[hashAlgorithm.name] = 1;\n                const certID = new CertID();\n                certIDs.push(certID);\n                await certID.createForCertificate(certificate, {\n                    hashAlgorithm: hashAlgorithm.name,\n                    issuerCertificate\n                }, crypto);\n            }\n        }\n        for (const response of this.tbsResponseData.responses) {\n            for (const id of certIDs) {\n                if (response.certID.isEqual(id)) {\n                    result.isForCertificate = true;\n                    try {\n                        switch (response.certStatus.idBlock.isConstructed) {\n                            case true:\n                                if (response.certStatus.idBlock.tagNumber === 1)\n                                    result.status = 1;\n                                break;\n                            case false:\n                                switch (response.certStatus.idBlock.tagNumber) {\n                                    case 0:\n                                        result.status = 0;\n                                        break;\n                                    case 2:\n                                        result.status = 2;\n                                        break;\n                                    default:\n                                }\n                                break;\n                            default:\n                        }\n                    }\n                    catch (ex) {\n                    }\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const algorithm = signatureParams.parameters.algorithm;\n        if (!(\"name\" in algorithm)) {\n            throw new Error(\"Empty algorithm\");\n        }\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, { algorithm });\n        this.signature = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(params = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let certIndex = -1;\n        const trustedCerts = params.trustedCerts || [];\n        if (!this.certs) {\n            throw new Error(\"No certificates attached to the BasicOCSPResponse\");\n        }\n        switch (true) {\n            case (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames):\n                for (const [index, certificate] of this.certs.entries()) {\n                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            case (this.tbsResponseData.responderID instanceof asn1js.OctetString):\n                for (const [index, cert] of this.certs.entries()) {\n                    const hash = await crypto.digest({ name: \"sha-1\" }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils.isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Wrong value for responderID\");\n        }\n        if (certIndex === (-1))\n            throw new Error(\"Correct certificate was not found in OCSP response\");\n        signerCert = this.certs[certIndex];\n        const additionalCerts = [signerCert];\n        for (const cert of this.certs) {\n            const caCert = await checkCA(cert, signerCert);\n            if (caCert) {\n                additionalCerts.push(caCert);\n            }\n        }\n        const certChain = new CertificateChainValidationEngine({\n            certs: additionalCerts,\n            trustedCerts,\n        });\n        const verificationResult = await certChain.verify({}, crypto);\n        if (!verificationResult.result) {\n            throw new Error(\"Validation of signer's certificate failed\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nBasicOCSPResponse.CLASS_NAME = \"BasicOCSPResponse\";\n\nconst TBS$1 = \"tbs\";\nconst VERSION$6 = \"version\";\nconst SUBJECT = \"subject\";\nconst SPKI = \"subjectPublicKeyInfo\";\nconst ATTRIBUTES$1 = \"attributes\";\nconst SIGNATURE_ALGORITHM$2 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE = \"signatureValue\";\nconst CSR_INFO = \"CertificationRequestInfo\";\nconst CSR_INFO_VERSION = `${CSR_INFO}.version`;\nconst CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;\nconst CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;\nconst CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;\nconst CLEAR_PROPS$f = [\n    CSR_INFO,\n    CSR_INFO_VERSION,\n    CSR_INFO_SUBJECT,\n    CSR_INFO_SPKI,\n    CSR_INFO_ATTRS,\n    SIGNATURE_ALGORITHM$2,\n    SIGNATURE_VALUE\n];\nfunction CertificationRequestInfo(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.CertificationRequestInfo || CSR_INFO),\n        value: [\n            new asn1js.Integer({ name: (names.CertificationRequestInfoVersion || CSR_INFO_VERSION) }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: CSR_INFO_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema({\n                names: {\n                    blockName: CSR_INFO_SPKI\n                }\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Repeated({\n                        optional: true,\n                        name: (names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS),\n                        value: Attribute.schema(names.attributes || {})\n                    })\n                ]\n            })\n        ]\n    }));\n}\nclass CertificationRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));\n        if (ATTRIBUTES$1 in parameters) {\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$1:\n                return EMPTY_BUFFER;\n            case VERSION$6:\n                return 0;\n            case SUBJECT:\n                return new RelativeDistinguishedNames();\n            case SPKI:\n                return new PublicKeyInfo();\n            case ATTRIBUTES$1:\n                return [];\n            case SIGNATURE_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            value: [\n                CertificationRequestInfo(names.certificationRequestInfo || {}),\n                new asn1js.Sequence({\n                    name: (names.signatureAlgorithm || SIGNATURE_ALGORITHM$2),\n                    value: [\n                        new asn1js.ObjectIdentifier(),\n                        new asn1js.Any({ optional: true })\n                    ]\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$f);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;\n        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[CSR_INFO_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[CSR_INFO_SPKI] });\n        if (CSR_INFO_ATTRS in asn1.result) {\n            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({ schema: element }));\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.subject.toSchema(),\n            this.subjectPublicKeyInfo.toSchema()\n        ];\n        if (ATTRIBUTES$1 in this) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes || [], o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0) {\n                return CertificationRequest.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"PKCS#10 Certificate Request\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if (ATTRIBUTES$1 in this) {\n            object.attributes = Array.from(this.attributes || [], o => o.toJSON());\n        }\n        return object;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(crypto = getCrypto(true)) {\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n}\nCertificationRequest.CLASS_NAME = \"CertificationRequest\";\n\nconst DIGEST_ALGORITHM$1 = \"digestAlgorithm\";\nconst DIGEST = \"digest\";\nconst CLEAR_PROPS$e = [\n    DIGEST_ALGORITHM$1,\n    DIGEST\n];\nclass DigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));\n        this.digest = pvutils.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case DIGEST:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case DIGEST:\n                return (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.digest || DIGEST) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$e);\n        const asn1 = asn1js.compareSchema(schema, schema, DigestInfo.schema({\n            names: {\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                },\n                digest: DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.digest = asn1.result.digest;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.digestAlgorithm.toSchema(),\n                this.digest\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            digest: this.digest.toJSON(),\n        };\n    }\n}\nDigestInfo.CLASS_NAME = \"DigestInfo\";\n\nconst E_CONTENT_TYPE = \"eContentType\";\nconst E_CONTENT = \"eContent\";\nconst CLEAR_PROPS$d = [\n    E_CONTENT_TYPE,\n    E_CONTENT,\n];\nclass EncapsulatedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.eContentType = pvutils.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));\n        if (E_CONTENT in parameters) {\n            this.eContent = pvutils.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));\n            if ((this.eContent.idBlock.tagClass === 1) &&\n                (this.eContent.idBlock.tagNumber === 4)) {\n                if (this.eContent.idBlock.isConstructed === false) {\n                    const constrString = new asn1js.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;\n                    let length = viewHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(viewHex, offset, ((offset + 65536) > viewHex.byteLength) ? (viewHex.byteLength - offset) : 65536);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++) {\n                            _view[i] = pieceView[i];\n                        }\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.eContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return EMPTY_STRING;\n            case E_CONTENT:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case E_CONTENT:\n                {\n                    if ((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\n                        return (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT)));\n                    return false;\n                }\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.eContentType || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Any({ name: (names.eContent || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$d);\n        const asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n            names: {\n                eContentType: E_CONTENT_TYPE,\n                eContent: E_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.eContentType = asn1.result.eContentType.valueBlock.toString();\n        if (E_CONTENT in asn1.result)\n            this.eContent = asn1.result.eContent;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\n        if (this.eContent) {\n            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n                outputArray.push(new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.eContent]\n                }));\n            }\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            eContentType: this.eContentType\n        };\n        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n            res.eContent = this.eContent.toJSON();\n        }\n        return res;\n    }\n}\nEncapsulatedContentInfo.CLASS_NAME = \"EncapsulatedContentInfo\";\n\nclass KeyBag extends PrivateKeyInfo {\n    constructor(parameters = {}) {\n        super(parameters);\n    }\n}\n\nconst MAC = \"mac\";\nconst MAC_SALT = \"macSalt\";\nconst ITERATIONS = \"iterations\";\nconst CLEAR_PROPS$c = [\n    MAC,\n    MAC_SALT,\n    ITERATIONS\n];\nclass MacData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mac = pvutils.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));\n        this.macSalt = pvutils.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));\n        if (ITERATIONS in parameters) {\n            this.iterations = pvutils.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAC:\n                return new DigestInfo();\n            case MAC_SALT:\n                return new asn1js.OctetString();\n            case ITERATIONS:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case MAC:\n                return ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\n                    (DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\n            case MAC_SALT:\n                return (memberValue.isEqual(MacData.defaultValues(memberName)));\n            case ITERATIONS:\n                return (memberValue === MacData.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || true),\n            value: [\n                DigestInfo.schema(names.mac || {\n                    names: {\n                        blockName: MAC\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.macSalt || MAC_SALT) }),\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.iterations || ITERATIONS)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$c);\n        const asn1 = asn1js.compareSchema(schema, schema, MacData.schema({\n            names: {\n                mac: {\n                    names: {\n                        blockName: MAC\n                    }\n                },\n                macSalt: MAC_SALT,\n                iterations: ITERATIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mac = new DigestInfo({ schema: asn1.result.mac });\n        this.macSalt = asn1.result.macSalt;\n        if (ITERATIONS in asn1.result)\n            this.iterations = asn1.result.iterations.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [\n            this.mac.toSchema(),\n            this.macSalt\n        ];\n        if (this.iterations !== undefined) {\n            outputArray.push(new asn1js.Integer({ value: this.iterations }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            mac: this.mac.toJSON(),\n            macSalt: this.macSalt.toJSON(),\n        };\n        if (this.iterations !== undefined) {\n            res.iterations = this.iterations;\n        }\n        return res;\n    }\n}\nMacData.CLASS_NAME = \"MacData\";\n\nconst HASH_ALGORITHM = \"hashAlgorithm\";\nconst HASHED_MESSAGE = \"hashedMessage\";\nconst CLEAR_PROPS$b = [\n    HASH_ALGORITHM,\n    HASHED_MESSAGE,\n];\nclass MessageImprint extends PkiObject {\n    static async create(hashAlgorithm, message, crypto = getCrypto(true)) {\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const hashedMessage = await crypto.digest(hashAlgorithm, message);\n        const res = new MessageImprint({\n            hashAlgorithm: new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js.Null(),\n            }),\n            hashedMessage: new asn1js.OctetString({ valueHex: hashedMessage })\n        });\n        return res;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));\n        this.hashedMessage = pvutils.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case HASHED_MESSAGE:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case HASHED_MESSAGE:\n                return (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.hashedMessage || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$b);\n        const asn1 = asn1js.compareSchema(schema, schema, MessageImprint.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM\n                    }\n                },\n                hashedMessage: HASHED_MESSAGE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.hashedMessage = asn1.result.hashedMessage;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.hashedMessage\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            hashedMessage: this.hashedMessage.toJSON(),\n        };\n    }\n}\nMessageImprint.CLASS_NAME = \"MessageImprint\";\n\nconst REQ_CERT = \"reqCert\";\nconst SINGLE_REQUEST_EXTENSIONS = \"singleRequestExtensions\";\nconst CLEAR_PROPS$a = [\n    REQ_CERT,\n    SINGLE_REQUEST_EXTENSIONS,\n];\nclass Request extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.reqCert = pvutils.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));\n        if (SINGLE_REQUEST_EXTENSIONS in parameters) {\n            this.singleRequestExtensions = pvutils.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQ_CERT:\n                return new CertID();\n            case SINGLE_REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case REQ_CERT:\n                return (memberValue.isEqual(Request.defaultValues(memberName)));\n            case SINGLE_REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.reqCert || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [Extension.schema(names.extensions || {\n                            names: {\n                                blockName: (names.singleRequestExtensions || EMPTY_STRING)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$a);\n        const asn1 = asn1js.compareSchema(schema, schema, Request.schema({\n            names: {\n                reqCert: {\n                    names: {\n                        blockName: REQ_CERT\n                    }\n                },\n                extensions: {\n                    names: {\n                        blockName: SINGLE_REQUEST_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.reqCert = new CertID({ schema: asn1.result.reqCert });\n        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {\n            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.reqCert.toSchema());\n        if (this.singleRequestExtensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.singleRequestExtensions, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            reqCert: this.reqCert.toJSON()\n        };\n        if (this.singleRequestExtensions) {\n            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nRequest.CLASS_NAME = \"Request\";\n\nconst TBS = \"tbs\";\nconst VERSION$5 = \"version\";\nconst REQUESTOR_NAME = \"requestorName\";\nconst REQUEST_LIST = \"requestList\";\nconst REQUEST_EXTENSIONS = \"requestExtensions\";\nconst TBS_REQUEST$1 = \"TBSRequest\";\nconst TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;\nconst TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;\nconst TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;\nconst TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;\nconst CLEAR_PROPS$9 = [\n    TBS_REQUEST$1,\n    TBS_REQUEST_VERSION,\n    TBS_REQUEST_REQUESTOR_NAME,\n    TBS_REQUEST_REQUESTS,\n    TBS_REQUEST_REQUEST_EXTENSIONS\n];\nclass TBSRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));\n        if (VERSION$5 in parameters) {\n            this.version = pvutils.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));\n        }\n        if (REQUESTOR_NAME in parameters) {\n            this.requestorName = pvutils.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));\n        }\n        this.requestList = pvutils.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));\n        if (REQUEST_EXTENSIONS in parameters) {\n            this.requestExtensions = pvutils.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS:\n                return EMPTY_BUFFER;\n            case VERSION$5:\n                return 0;\n            case REQUESTOR_NAME:\n                return new GeneralName();\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS:\n                return (memberValue.byteLength === 0);\n            case VERSION$5:\n                return (memberValue === TBSRequest.defaultValues(memberName));\n            case REQUESTOR_NAME:\n                return ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TBS_REQUEST$1),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.TBSRequestVersion || TBS_REQUEST_VERSION) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [GeneralName.schema(names.requestorName || {\n                            names: {\n                                blockName: TBS_REQUEST_REQUESTOR_NAME\n                            }\n                        })]\n                }),\n                new asn1js.Sequence({\n                    name: (names.requestList || \"TBSRequest.requestList\"),\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.requests || TBS_REQUEST_REQUESTS),\n                            value: Request.schema(names.requestNames || {})\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: (names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$9);\n        const asn1 = asn1js.compareSchema(schema, schema, TBSRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;\n        if (TBS_REQUEST_VERSION in asn1.result)\n            this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;\n        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result)\n            this.requestorName = new GeneralName({ schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME] });\n        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({ schema: element }));\n        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result)\n            this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0)\n                return TBSRequest.schema();\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Request\");\n            if (!(asn1.result instanceof asn1js.Sequence)) {\n                throw new Error(\"ASN.1 result should be SEQUENCE\");\n            }\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (this.version !== undefined) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ value: this.version })]\n                }));\n            }\n            if (this.requestorName) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.requestorName.toSchema()]\n                }));\n            }\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.requestList, o => o.toSchema())\n            }));\n            if (this.requestExtensions) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: Array.from(this.requestExtensions, o => o.toSchema())\n                        })\n                    ]\n                }));\n            }\n            tbsSchema = new asn1js.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (this.version != undefined)\n            res.version = this.version;\n        if (this.requestorName) {\n            res.requestorName = this.requestorName.toJSON();\n        }\n        res.requestList = Array.from(this.requestList, o => o.toJSON());\n        if (this.requestExtensions) {\n            res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTBSRequest.CLASS_NAME = \"TBSRequest\";\n\nconst SIGNATURE_ALGORITHM$1 = \"signatureAlgorithm\";\nconst SIGNATURE$1 = \"signature\";\nconst CERTS = \"certs\";\nclass Signature extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));\n        if (CERTS in parameters) {\n            this.certs = pvutils.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$1:\n                return new asn1js.BitString();\n            case CERTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$1:\n                return (memberValue.isEqual(Signature.defaultValues(memberName)));\n            case CERTS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signature || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: [new asn1js.Repeated({\n                                    name: (names.certs || EMPTY_STRING),\n                                    value: Certificate.schema({})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SIGNATURE_ALGORITHM$1,\n            SIGNATURE$1,\n            CERTS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, Signature.schema({\n            names: {\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$1\n                    }\n                },\n                signature: SIGNATURE$1,\n                certs: CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signature = asn1.result.signature;\n        if (CERTS in asn1.result)\n            this.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSignature.CLASS_NAME = \"Signature\";\n\nconst TBS_REQUEST = \"tbsRequest\";\nconst OPTIONAL_SIGNATURE = \"optionalSignature\";\nconst CLEAR_PROPS$8 = [\n    TBS_REQUEST,\n    OPTIONAL_SIGNATURE\n];\nclass OCSPRequest extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsRequest = pvutils.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));\n        if (OPTIONAL_SIGNATURE in parameters) {\n            this.optionalSignature = pvutils.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return new TBSRequest();\n            case OPTIONAL_SIGNATURE:\n                return new Signature();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                    (TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\n                    (TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\n                    (TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\n                    (TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\n            case OPTIONAL_SIGNATURE:\n                return ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\n                    (Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\n                    (Signature.compareWithDefault(\"certs\", memberValue.certs)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: names.blockName || \"OCSPRequest\",\n            value: [\n                TBSRequest.schema(names.tbsRequest || {\n                    names: {\n                        blockName: TBS_REQUEST\n                    }\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        Signature.schema(names.optionalSignature || {\n                            names: {\n                                blockName: OPTIONAL_SIGNATURE\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$8);\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\n        if (OPTIONAL_SIGNATURE in asn1.result)\n            this.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n        if (this.optionalSignature)\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.optionalSignature.toSchema()\n                ]\n            }));\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsRequest: this.tbsRequest.toJSON()\n        };\n        if (this.optionalSignature) {\n            res.optionalSignature = this.optionalSignature.toJSON();\n        }\n        return res;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        this.tbsRequest.requestList.push(new Request({\n            reqCert: certID,\n        }));\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        ParameterError.assertEmpty(privateKey, \"privateKey\", \"OCSPRequest.sign method\");\n        if (!this.optionalSignature) {\n            throw new Error(\"Need to create \\\"optionalSignature\\\" field before signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        const tbs = this.tbsRequest.toSchema(true).toBER(false);\n        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);\n        this.optionalSignature.signature = new asn1js.BitString({ valueHex: signature });\n    }\n    verify() {\n    }\n}\nOCSPRequest.CLASS_NAME = \"OCSPRequest\";\n\nconst RESPONSE_TYPE = \"responseType\";\nconst RESPONSE = \"response\";\nconst CLEAR_PROPS$7 = [\n    RESPONSE_TYPE,\n    RESPONSE\n];\nclass ResponseBytes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseType = pvutils.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));\n        this.response = pvutils.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return EMPTY_STRING;\n            case RESPONSE:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case RESPONSE:\n                return (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.responseType || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.response || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$7);\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseBytes.schema({\n            names: {\n                responseType: RESPONSE_TYPE,\n                response: RESPONSE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.responseType = asn1.result.responseType.valueBlock.toString();\n        this.response = asn1.result.response;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.responseType }),\n                this.response\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            responseType: this.responseType,\n            response: this.response.toJSON(),\n        };\n    }\n}\nResponseBytes.CLASS_NAME = \"ResponseBytes\";\n\nconst RESPONSE_STATUS = \"responseStatus\";\nconst RESPONSE_BYTES = \"responseBytes\";\nclass OCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseStatus = pvutils.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));\n        if (RESPONSE_BYTES in parameters) {\n            this.responseBytes = pvutils.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return new asn1js.Enumerated();\n            case RESPONSE_BYTES:\n                return new ResponseBytes();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\n            case RESPONSE_BYTES:\n                return ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\n                    (ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"OCSPResponse\"),\n            value: [\n                new asn1js.Enumerated({ name: (names.responseStatus || RESPONSE_STATUS) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        ResponseBytes.schema(names.responseBytes || {\n                            names: {\n                                blockName: RESPONSE_BYTES\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            RESPONSE_STATUS,\n            RESPONSE_BYTES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.responseStatus = asn1.result.responseStatus;\n        if (RESPONSE_BYTES in asn1.result)\n            this.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.responseStatus);\n        if (this.responseBytes) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.responseBytes.toSchema()]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            responseStatus: this.responseStatus.toJSON()\n        };\n        if (this.responseBytes) {\n            res.responseBytes = this.responseBytes.toJSON();\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        let basicResponse;\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        if (!this.responseBytes)\n            return result;\n        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic)\n            return result;\n        try {\n            const asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            AsnError.assert(asn1Basic, \"Basic OCSP response\");\n            basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\n        }\n        catch (ex) {\n            return result;\n        }\n        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        var _a;\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            return basicResponse.sign(privateKey, hashAlgorithm, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n    async verify(issuerCertificate = null, crypto = getCrypto(true)) {\n        var _a;\n        if ((RESPONSE_BYTES in this) === false)\n            throw new Error(\"Empty ResponseBytes field\");\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            if (issuerCertificate !== null) {\n                if (!basicResponse.certs) {\n                    basicResponse.certs = [];\n                }\n                basicResponse.certs.push(issuerCertificate);\n            }\n            return basicResponse.verify({}, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n}\nOCSPResponse.CLASS_NAME = \"OCSPResponse\";\n\nconst TYPE = \"type\";\nconst ATTRIBUTES = \"attributes\";\nconst ENCODED_VALUE = \"encodedValue\";\nconst CLEAR_PROPS$6 = [\n    ATTRIBUTES\n];\nclass SignedAndUnsignedAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));\n        this.encodedValue = pvutils.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE:\n                return (-1);\n            case ATTRIBUTES:\n                return [];\n            case ENCODED_VALUE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE:\n                return (memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE));\n            case ATTRIBUTES:\n                return (memberValue.length === 0);\n            case ENCODED_VALUE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Constructed({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: names.tagNumber || 0\n            },\n            value: [\n                new asn1js.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$6);\n        const asn1 = asn1js.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\n            names: {\n                tagNumber: this.type,\n                attributes: ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.idBlock.tagNumber;\n        this.encodedValue = pvtsutils.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);\n        const encodedView = new Uint8Array(this.encodedValue);\n        encodedView[0] = 0x31;\n        if ((ATTRIBUTES in asn1.result) === false) {\n            if (this.type === 0)\n                throw new Error(\"Wrong structure of SignedUnsignedAttributes\");\n            else\n                return;\n        }\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return (new asn1js.Constructed({\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: this.type\n            },\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return {\n            type: this.type,\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSignedAndUnsignedAttributes.CLASS_NAME = \"SignedAndUnsignedAttributes\";\n\nconst VERSION$4 = \"version\";\nconst SID = \"sid\";\nconst DIGEST_ALGORITHM = \"digestAlgorithm\";\nconst SIGNED_ATTRS = \"signedAttrs\";\nconst SIGNATURE_ALGORITHM = \"signatureAlgorithm\";\nconst SIGNATURE = \"signature\";\nconst UNSIGNED_ATTRS = \"unsignedAttrs\";\nconst SIGNER_INFO = \"SignerInfo\";\nconst SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;\nconst SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;\nconst SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;\nconst SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;\nconst SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;\nconst SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;\nconst SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;\nconst CLEAR_PROPS$5 = [\n    SIGNER_INFO_VERSION,\n    SIGNER_INFO_SID,\n    SIGNER_INFO_DIGEST_ALGORITHM,\n    SIGNER_INFO_SIGNED_ATTRS,\n    SIGNER_INFO_SIGNATURE_ALGORITHM,\n    SIGNER_INFO_SIGNATURE,\n    SIGNER_INFO_UNSIGNED_ATTRS\n];\nclass SignerInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));\n        this.sid = pvutils.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));\n        if (SIGNED_ATTRS in parameters) {\n            this.signedAttrs = pvutils.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));\n        if (UNSIGNED_ATTRS in parameters) {\n            this.unsignedAttrs = pvutils.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$4:\n                return 0;\n            case SID:\n                return new asn1js.Any();\n            case DIGEST_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 0 });\n            case SIGNATURE_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNATURE:\n                return new asn1js.OctetString();\n            case UNSIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 1 });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$4:\n                return (SignerInfo.defaultValues(VERSION$4) === memberValue);\n            case SID:\n                return (memberValue instanceof asn1js.Any);\n            case DIGEST_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));\n            case SIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            case SIGNATURE_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n            case SIGNATURE:\n            case UNSIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: SIGNER_INFO,\n            value: [\n                new asn1js.Integer({ name: (names.version || SIGNER_INFO_VERSION) }),\n                new asn1js.Choice({\n                    value: [\n                        IssuerAndSerialNumber.schema(names.sidSchema || {\n                            names: {\n                                blockName: SIGNER_INFO_SID\n                            }\n                        }),\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js.OctetString()]\n                                }),\n                                new asn1js.Primitive({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    }\n                                }),\n                            ]\n                        }),\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_DIGEST_ALGORITHM\n                    }\n                }),\n                SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNED_ATTRS,\n                        tagNumber: 0\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.signature || SIGNER_INFO_SIGNATURE) }),\n                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$5);\n        const asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;\n        const currentSid = asn1.result[SIGNER_INFO_SID];\n        if (currentSid.idBlock.tagClass === 1)\n            this.sid = new IssuerAndSerialNumber({ schema: currentSid });\n        else\n            this.sid = currentSid;\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM] });\n        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result)\n            this.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];\n        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result)\n            this.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS] });\n    }\n    toSchema() {\n        if (SignerInfo.compareWithDefault(SID, this.sid))\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.sid instanceof IssuerAndSerialNumber)\n            outputArray.push(this.sid.toSchema());\n        else\n            outputArray.push(this.sid);\n        outputArray.push(this.digestAlgorithm.toSchema());\n        if (this.signedAttrs) {\n            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false)\n                outputArray.push(this.signedAttrs.toSchema());\n        }\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.unsignedAttrs) {\n            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false)\n                outputArray.push(this.unsignedAttrs.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (SignerInfo.compareWithDefault(SID, this.sid)) {\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        }\n        const res = {\n            version: this.version,\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (!(this.sid instanceof asn1js.Any))\n            res.sid = this.sid.toJSON();\n        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {\n            res.signedAttrs = this.signedAttrs.toJSON();\n        }\n        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {\n            res.unsignedAttrs = this.unsignedAttrs.toJSON();\n        }\n        return res;\n    }\n}\nSignerInfo.CLASS_NAME = \"SignerInfo\";\n\nconst VERSION$3 = \"version\";\nconst POLICY = \"policy\";\nconst MESSAGE_IMPRINT$1 = \"messageImprint\";\nconst SERIAL_NUMBER = \"serialNumber\";\nconst GEN_TIME = \"genTime\";\nconst ORDERING = \"ordering\";\nconst NONCE$1 = \"nonce\";\nconst ACCURACY = \"accuracy\";\nconst TSA = \"tsa\";\nconst EXTENSIONS$1 = \"extensions\";\nconst TST_INFO = \"TSTInfo\";\nconst TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;\nconst TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;\nconst TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;\nconst TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;\nconst TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;\nconst TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;\nconst TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;\nconst TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;\nconst TST_INFO_TSA = `${TST_INFO}.${TSA}`;\nconst TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;\nconst CLEAR_PROPS$4 = [\n    TST_INFO_VERSION,\n    TST_INFO_POLICY,\n    TST_INFO_MESSAGE_IMPRINT,\n    TST_INFO_SERIAL_NUMBER,\n    TST_INFO_GEN_TIME,\n    TST_INFO_ACCURACY,\n    TST_INFO_ORDERING,\n    TST_INFO_NONCE,\n    TST_INFO_TSA,\n    TST_INFO_EXTENSIONS\n];\nclass TSTInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));\n        this.policy = pvutils.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));\n        this.genTime = pvutils.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));\n        if (ACCURACY in parameters) {\n            this.accuracy = pvutils.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));\n        }\n        if (ORDERING in parameters) {\n            this.ordering = pvutils.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));\n        }\n        if (NONCE$1 in parameters) {\n            this.nonce = pvutils.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));\n        }\n        if (TSA in parameters) {\n            this.tsa = pvutils.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));\n        }\n        if (EXTENSIONS$1 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$3:\n                return 0;\n            case POLICY:\n                return EMPTY_STRING;\n            case MESSAGE_IMPRINT$1:\n                return new MessageImprint();\n            case SERIAL_NUMBER:\n                return new asn1js.Integer();\n            case GEN_TIME:\n                return new Date(0, 0, 0);\n            case ACCURACY:\n                return new Accuracy();\n            case ORDERING:\n                return false;\n            case NONCE$1:\n                return new asn1js.Integer();\n            case TSA:\n                return new GeneralName();\n            case EXTENSIONS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$3:\n            case POLICY:\n            case GEN_TIME:\n            case ORDERING:\n                return (memberValue === TSTInfo.defaultValues(ORDERING));\n            case MESSAGE_IMPRINT$1:\n                return ((MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage)));\n            case SERIAL_NUMBER:\n            case NONCE$1:\n                return (memberValue.isEqual(TSTInfo.defaultValues(NONCE$1)));\n            case ACCURACY:\n                return ((Accuracy.compareWithDefault(SECONDS, memberValue.seconds)) &&\n                    (Accuracy.compareWithDefault(MILLIS, memberValue.millis)) &&\n                    (Accuracy.compareWithDefault(MICROS, memberValue.micros)));\n            case TSA:\n                return ((GeneralName.compareWithDefault(TYPE$4, memberValue.type)) &&\n                    (GeneralName.compareWithDefault(VALUE$5, memberValue.value)));\n            case EXTENSIONS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TST_INFO),\n            value: [\n                new asn1js.Integer({ name: (names.version || TST_INFO_VERSION) }),\n                new asn1js.ObjectIdentifier({ name: (names.policy || TST_INFO_POLICY) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TST_INFO_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js.Integer({ name: (names.serialNumber || TST_INFO_SERIAL_NUMBER) }),\n                new asn1js.GeneralizedTime({ name: (names.genTime || TST_INFO_GEN_TIME) }),\n                Accuracy.schema(names.accuracy || {\n                    names: {\n                        blockName: TST_INFO_ACCURACY\n                    }\n                }),\n                new asn1js.Boolean({\n                    name: (names.ordering || TST_INFO_ORDERING),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.nonce || TST_INFO_NONCE),\n                    optional: true\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [GeneralName.schema(names.tsa || {\n                            names: {\n                                blockName: TST_INFO_TSA\n                            }\n                        })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.extensions || TST_INFO_EXTENSIONS),\n                            value: Extension.schema(names.extension || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$4);\n        const asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;\n        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TST_INFO_MESSAGE_IMPRINT] });\n        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];\n        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();\n        if (TST_INFO_ACCURACY in asn1.result)\n            this.accuracy = new Accuracy({ schema: asn1.result[TST_INFO_ACCURACY] });\n        if (TST_INFO_ORDERING in asn1.result)\n            this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;\n        if (TST_INFO_NONCE in asn1.result)\n            this.nonce = asn1.result[TST_INFO_NONCE];\n        if (TST_INFO_TSA in asn1.result)\n            this.tsa = new GeneralName({ schema: asn1.result[TST_INFO_TSA] });\n        if (TST_INFO_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\n        outputArray.push(this.messageImprint.toSchema());\n        outputArray.push(this.serialNumber);\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\n        if (this.accuracy)\n            outputArray.push(this.accuracy.toSchema());\n        if (this.ordering !== undefined)\n            outputArray.push(new asn1js.Boolean({ value: this.ordering }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if (this.tsa) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.tsa.toSchema()]\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            policy: this.policy,\n            messageImprint: this.messageImprint.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            genTime: this.genTime\n        };\n        if (this.accuracy)\n            res.accuracy = this.accuracy.toJSON();\n        if (this.ordering !== undefined)\n            res.ordering = this.ordering;\n        if (this.nonce)\n            res.nonce = this.nonce.toJSON();\n        if (this.tsa)\n            res.tsa = this.tsa.toJSON();\n        if (this.extensions)\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        return res;\n    }\n    async verify(params, crypto = getCrypto(true)) {\n        if (!params.data) {\n            throw new Error(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n        }\n        const data = params.data;\n        if (params.notBefore) {\n            if (this.genTime < params.notBefore)\n                throw new Error(\"Generation time for TSTInfo object is less than notBefore value\");\n        }\n        if (params.notAfter) {\n            if (this.genTime > params.notAfter)\n                throw new Error(\"Generation time for TSTInfo object is more than notAfter value\");\n        }\n        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, \"MessageImprint.hashAlgorithm\");\n        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));\n        return pvtsutils.BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);\n    }\n}\nTSTInfo.CLASS_NAME = \"TSTInfo\";\n\nconst VERSION$2 = \"version\";\nconst DIGEST_ALGORITHMS = \"digestAlgorithms\";\nconst ENCAP_CONTENT_INFO = \"encapContentInfo\";\nconst CERTIFICATES = \"certificates\";\nconst CRLS = \"crls\";\nconst SIGNER_INFOS = \"signerInfos\";\nconst OCSPS = \"ocsps\";\nconst SIGNED_DATA = \"SignedData\";\nconst SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;\nconst SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;\nconst SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;\nconst SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;\nconst SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;\nconst SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;\nconst CLEAR_PROPS$3 = [\n    SIGNED_DATA_VERSION,\n    SIGNED_DATA_DIGEST_ALGORITHMS,\n    SIGNED_DATA_ENCAP_CONTENT_INFO,\n    SIGNED_DATA_CERTIFICATES,\n    SIGNED_DATA_CRLS,\n    SIGNED_DATA_SIGNER_INFOS\n];\nclass SignedDataVerifyError extends Error {\n    constructor({ message, code = 0, date = new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [], }) {\n        super(message);\n        this.name = \"SignedDataVerifyError\";\n        this.date = date;\n        this.code = code;\n        this.timestampSerial = timestampSerial;\n        this.signatureVerified = signatureVerified;\n        this.signerCertificate = signerCertificate;\n        this.signerCertificateVerified = signerCertificateVerified;\n        this.certificatePath = certificatePath;\n    }\n}\nclass SignedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));\n        this.digestAlgorithms = pvutils.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));\n        this.encapContentInfo = pvutils.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));\n        if (CERTIFICATES in parameters) {\n            this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));\n        }\n        if (CRLS in parameters) {\n            this.crls = pvutils.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));\n        }\n        if (OCSPS in parameters) {\n            this.ocsps = pvutils.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));\n        }\n        this.signerInfos = pvutils.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$2:\n                return 0;\n            case DIGEST_ALGORITHMS:\n                return [];\n            case ENCAP_CONTENT_INFO:\n                return new EncapsulatedContentInfo();\n            case CERTIFICATES:\n                return [];\n            case CRLS:\n                return [];\n            case OCSPS:\n                return [];\n            case SIGNER_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$2:\n                return (memberValue === SignedData.defaultValues(VERSION$2));\n            case ENCAP_CONTENT_INFO:\n                return EncapsulatedContentInfo.compareWithDefault(\"eContentType\", memberValue.eContentType) &&\n                    EncapsulatedContentInfo.compareWithDefault(\"eContent\", memberValue.eContent);\n            case DIGEST_ALGORITHMS:\n            case CERTIFICATES:\n            case CRLS:\n            case OCSPS:\n            case SIGNER_INFOS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        if (names.optional === undefined) {\n            names.optional = false;\n        }\n        return (new asn1js.Sequence({\n            name: (names.blockName || SIGNED_DATA),\n            optional: names.optional,\n            value: [\n                new asn1js.Integer({ name: (names.version || SIGNED_DATA_VERSION) }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS),\n                            value: AlgorithmIdentifier.schema()\n                        })\n                    ]\n                }),\n                EncapsulatedContentInfo.schema(names.encapContentInfo || {\n                    names: {\n                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.certificates || SIGNED_DATA_CERTIFICATES),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema(names.crls || {\n                        names: {\n                            crls: SIGNED_DATA_CRLS\n                        }\n                    }).valueBlock.value\n                }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.signerInfos || SIGNED_DATA_SIGNER_INFOS),\n                            value: SignerInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$3);\n        const asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;\n        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result)\n            this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\n        this.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO] });\n        if (SIGNED_DATA_CERTIFICATES in asn1.result) {\n            const certificateSet = new CertificateSet({\n                schema: new asn1js.Set({\n                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value\n                })\n            });\n            this.certificates = certificateSet.certificates.slice(0);\n        }\n        if (SIGNED_DATA_CRLS in asn1.result) {\n            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {\n                if (crl.idBlock.tagClass === 1)\n                    return new CertificateRevocationList({ schema: crl });\n                crl.idBlock.tagClass = 1;\n                crl.idBlock.tagNumber = 16;\n                return new OtherRevocationInfoFormat({ schema: crl });\n            });\n        }\n        if (SIGNED_DATA_SIGNER_INFOS in asn1.result)\n            this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\n            || (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\n            this.version = 5;\n        }\n        else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\n            this.version = 4;\n        }\n        else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\n            || this.signerInfos.some(o => o.version === 3)\n            || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\n            this.version = 3;\n        }\n        else {\n            this.version = 1;\n        }\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())\n        }));\n        outputArray.push(this.encapContentInfo.toSchema());\n        if (this.certificates) {\n            const certificateSet = new CertificateSet({ certificates: this.certificates });\n            const certificateSetSchema = certificateSet.toSchema();\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: certificateSetSchema.valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.crls, crl => {\n                    if (crl instanceof OtherRevocationInfoFormat) {\n                        const crlSchema = crl.toSchema();\n                        crlSchema.idBlock.tagClass = 3;\n                        crlSchema.idBlock.tagNumber = 1;\n                        return crlSchema;\n                    }\n                    return crl.toSchema(encodeFlag);\n                })\n            }));\n        }\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())\n        }));\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\n            encapContentInfo: this.encapContentInfo.toJSON(),\n            signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON()),\n        };\n        if (this.certificates) {\n            res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\n        }\n        if (this.crls) {\n            res.crls = Array.from(this.crls, crl => crl.toJSON());\n        }\n        return res;\n    }\n    async verify({ signer = (-1), data = (EMPTY_BUFFER), trustedCerts = [], checkDate = (new Date()), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let timestampSerial = null;\n        try {\n            let messageDigestValue = EMPTY_BUFFER;\n            let shaAlgorithm = EMPTY_STRING;\n            let certificatePath = [];\n            const signerInfo = this.signerInfos[signer];\n            if (!signerInfo) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 1,\n                    message: \"Unable to get signer by supplied index\",\n                });\n            }\n            if (!this.certificates) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 2,\n                    message: \"No certificates attached to this signed data\",\n                });\n            }\n            if (signerInfo.sid instanceof IssuerAndSerialNumber) {\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate))\n                        continue;\n                    if ((certificate.issuer.isEqual(signerInfo.sid.issuer)) &&\n                        (certificate.serialNumber.isEqual(signerInfo.sid.serialNumber))) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            else {\n                const sid = signerInfo.sid;\n                const keyId = sid.idBlock.isConstructed\n                    ? sid.valueBlock.value[0].valueBlock.valueHex\n                    : sid.valueBlock.valueHex;\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate)) {\n                        continue;\n                    }\n                    const digest = await crypto.digest({ name: \"sha-1\" }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils.isEqualBuffer(digest, keyId)) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            if (!signerCert) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 3,\n                    message: \"Unable to find signer certificate\",\n                });\n            }\n            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {\n                if (!this.encapContentInfo.eContent) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo eContent is empty\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                let tstInfo;\n                try {\n                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);\n                }\n                catch (ex) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo wrong ASN.1 schema \",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                checkDate = tstInfo.genTime;\n                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 4,\n                        message: \"Missed detached data input array\",\n                    });\n                }\n                if (!(await tstInfo.verify({ data }, crypto))) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo verification is failed\",\n                        signatureVerified: false,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (checkChain) {\n                const certs = this.certificates.filter(certificate => (certificate instanceof Certificate && !!checkCA(certificate, signerCert)));\n                const chainParams = {\n                    checkDate,\n                    certs,\n                    trustedCerts,\n                };\n                if (findIssuer) {\n                    chainParams.findIssuer = findIssuer;\n                }\n                if (findOrigin) {\n                    chainParams.findOrigin = findOrigin;\n                }\n                const chainEngine = new CertificateChainValidationEngine(chainParams);\n                chainEngine.certs.push(signerCert);\n                if (this.crls) {\n                    for (const crl of this.crls) {\n                        if (\"thisUpdate\" in crl)\n                            chainEngine.crls.push(crl);\n                        else {\n                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic)\n                                chainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\n                        }\n                    }\n                }\n                if (this.ocsps) {\n                    chainEngine.ocsps.push(...(this.ocsps));\n                }\n                const verificationResult = await chainEngine.verify({ passedWhenNotRevValues }, crypto)\n                    .catch(e => {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed with error: ${((e instanceof Object) ? e.resultMessage : e)}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n                });\n                if (verificationResult.certificatePath) {\n                    certificatePath = verificationResult.certificatePath;\n                }\n                if (!verificationResult.result)\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n            }\n            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);\n            if (!(\"name\" in signerInfoHashAlgorithm)) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 7,\n                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,\n                    signerCertificate: signerCert,\n                    signerCertificateVerified: true\n                });\n            }\n            shaAlgorithm = signerInfoHashAlgorithm.name;\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 8,\n                        message: \"Missed detached data input array\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                let foundContentType = false;\n                let foundMessageDigest = false;\n                for (const attribute of signerInfo.signedAttrs.attributes) {\n                    if (attribute.type === \"1.2.840.113549.1.9.3\")\n                        foundContentType = true;\n                    if (attribute.type === \"1.2.840.113549.1.9.4\") {\n                        foundMessageDigest = true;\n                        messageDigestValue = attribute.values[0].valueBlock.valueHex;\n                    }\n                    if (foundContentType && foundMessageDigest)\n                        break;\n                }\n                if (foundContentType === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 9,\n                        message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n                if (foundMessageDigest === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 10,\n                        message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));\n                if (!pvutils.isEqualBuffer(messageDigest, messageDigestValue)) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: Message digest doesn't match\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                data = signerInfo.signedAttrs.encodedValue;\n            }\n            const verifyResult = signerInfo.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.1\"\n                ? await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm, shaAlgorithm)\n                : await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm);\n            if (extendedMode) {\n                return {\n                    date: checkDate,\n                    code: 14,\n                    message: EMPTY_STRING,\n                    signatureVerified: verifyResult,\n                    signerCertificate: signerCert,\n                    timestampSerial,\n                    signerCertificateVerified: true,\n                    certificatePath\n                };\n            }\n            else {\n                return verifyResult;\n            }\n        }\n        catch (e) {\n            if (e instanceof SignedDataVerifyError) {\n                throw e;\n            }\n            throw new SignedDataVerifyError({\n                date: checkDate,\n                code: 15,\n                message: `Error during verification: ${e instanceof Error ? e.message : e}`,\n                signatureVerified: null,\n                signerCertificate: signerCert,\n                timestampSerial,\n                signerCertificateVerified: true\n            });\n        }\n    }\n    async sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (EMPTY_BUFFER), crypto = getCrypto(true)) {\n        var _a;\n        if (!privateKey)\n            throw new Error(\"Need to provide a private key for signing\");\n        const signerInfo = this.signerInfos[signerIndex];\n        if (!signerInfo) {\n            throw new RangeError(\"SignerInfo index is out of range\");\n        }\n        if (!((_a = signerInfo.signedAttrs) === null || _a === void 0 ? void 0 : _a.attributes.length) && \"hash\" in privateKey.algorithm && \"hash\" in privateKey.algorithm && privateKey.algorithm.hash) {\n            hashAlgorithm = privateKey.algorithm.hash.name;\n        }\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        if ((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0) {\n            this.digestAlgorithms.push(new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js.Null()\n            }));\n        }\n        signerInfo.digestAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashAlgorithmOID,\n            algorithmParams: new asn1js.Null()\n        });\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        if (signerInfo.signedAttrs) {\n            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0)\n                data = signerInfo.signedAttrs.encodedValue;\n            else {\n                data = signerInfo.signedAttrs.toSchema().toBER();\n                const view = pvtsutils.BufferSourceConverter.toUint8Array(data);\n                view[0] = 0x31;\n            }\n        }\n        else {\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0)\n                    throw new Error(\"Missed detached data input array\");\n            }\n        }\n        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);\n        signerInfo.signature = new asn1js.OctetString({ valueHex: signature });\n    }\n}\nSignedData.CLASS_NAME = \"SignedData\";\nSignedData.ID_DATA = id_ContentType_Data;\n\nconst VERSION$1 = \"version\";\nconst AUTH_SAFE = \"authSafe\";\nconst MAC_DATA = \"macData\";\nconst PARSED_VALUE = \"parsedValue\";\nconst CLERA_PROPS = [\n    VERSION$1,\n    AUTH_SAFE,\n    MAC_DATA\n];\nclass PFX extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));\n        this.authSafe = pvutils.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));\n        if (MAC_DATA in parameters) {\n            this.macData = pvutils.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));\n        }\n        if (PARSED_VALUE in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$1:\n                return 3;\n            case AUTH_SAFE:\n                return (new ContentInfo());\n            case MAC_DATA:\n                return (new MacData());\n            case PARSED_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$1:\n                return (memberValue === PFX.defaultValues(memberName));\n            case AUTH_SAFE:\n                return ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (ContentInfo.compareWithDefault(\"content\", memberValue.content)));\n            case MAC_DATA:\n                return ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\n                    (MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\n                    (MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\n            case PARSED_VALUE:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || VERSION$1) }),\n                ContentInfo.schema(names.authSafe || {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                }),\n                MacData.schema(names.macData || {\n                    names: {\n                        blockName: MAC_DATA,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLERA_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, PFX.schema({\n            names: {\n                version: VERSION$1,\n                authSafe: {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                },\n                macData: {\n                    names: {\n                        blockName: MAC_DATA\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\n        if (MAC_DATA in asn1.result)\n            this.macData = new MacData({ schema: asn1.result.macData });\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.authSafe.toSchema()\n        ];\n        if (this.macData) {\n            outputArray.push(this.macData.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            version: this.version,\n            authSafe: this.authSafe.toJSON()\n        };\n        if (this.macData) {\n            output.macData = this.macData.toJSON();\n        }\n        return output;\n    }\n    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (!this.parsedValue) {\n            throw new Error(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n        }\n        ParameterError.assertEmpty(this.parsedValue.integrityMode, \"integrityMode\", \"parsedValue\");\n        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, \"authenticatedSafe\", \"parsedValue\");\n        switch (this.parsedValue.integrityMode) {\n            case 0:\n                {\n                    if (!(\"iterations\" in parameters))\n                        throw new ParameterError(\"iterations\");\n                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, \"pbkdf2HashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, \"hmacHashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    this.authSafe = new ContentInfo({\n                        contentType: ContentInfo.DATA,\n                        content: new asn1js.OctetString({ valueHex: data })\n                    });\n                    const result = await crypto.stampDataWithPassword({\n                        password: parameters.password,\n                        hashAlgorithm: parameters.hmacHashAlgorithm,\n                        salt: saltBuffer,\n                        iterationCount: parameters.iterations,\n                        contentToStamp: data\n                    });\n                    this.macData = new MacData({\n                        mac: new DigestInfo({\n                            digestAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: crypto.getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm }, true, \"hmacHashAlgorithm\"),\n                            }),\n                            digest: new asn1js.OctetString({ valueHex: result })\n                        }),\n                        macSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\n                        iterations: parameters.iterations\n                    });\n                }\n                break;\n            case 1:\n                {\n                    if (!(\"signingCertificate\" in parameters)) {\n                        throw new ParameterError(\"signingCertificate\");\n                    }\n                    ParameterError.assertEmpty(parameters.privateKey, \"privateKey\");\n                    ParameterError.assertEmpty(parameters.hashAlgorithm, \"hashAlgorithm\");\n                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    const cmsSigned = new SignedData({\n                        version: 1,\n                        encapContentInfo: new EncapsulatedContentInfo({\n                            eContentType: \"1.2.840.113549.1.7.1\",\n                            eContent: new asn1js.OctetString({ valueHex: toBeSigned })\n                        }),\n                        certificates: [parameters.signingCertificate]\n                    });\n                    const result = await crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));\n                    const signedAttr = [];\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.3\",\n                        values: [\n                            new asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.5\",\n                        values: [\n                            new asn1js.UTCTime({ valueDate: new Date() })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.4\",\n                        values: [\n                            new asn1js.OctetString({ valueHex: result })\n                        ]\n                    }));\n                    cmsSigned.signerInfos.push(new SignerInfo({\n                        version: 1,\n                        sid: new IssuerAndSerialNumber({\n                            issuer: parameters.signingCertificate.issuer,\n                            serialNumber: parameters.signingCertificate.serialNumber\n                        }),\n                        signedAttrs: new SignedAndUnsignedAttributes({\n                            type: 0,\n                            attributes: signedAttr\n                        })\n                    }));\n                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);\n                    this.authSafe = new ContentInfo({\n                        contentType: \"1.2.840.113549.1.7.2\",\n                        content: cmsSigned.toSchema(true)\n                    });\n                }\n                break;\n            default:\n                throw new Error(`Parameter \"integrityMode\" has unknown value: ${this.parsedValue.integrityMode}`);\n        }\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (parameters.checkIntegrity === undefined) {\n            parameters.checkIntegrity = true;\n        }\n        this.parsedValue = {};\n        switch (this.authSafe.contentType) {\n            case ContentInfo.DATA:\n                {\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    this.parsedValue.integrityMode = 0;\n                    ArgumentError.assert(this.authSafe.content, \"authSafe.content\", asn1js.OctetString);\n                    const authSafeContent = this.authSafe.content.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);\n                    if (parameters.checkIntegrity) {\n                        if (!this.macData) {\n                            throw new Error(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\n                        }\n                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, \"digestAlgorithm\");\n                        const result = await crypto.verifyDataStampedWithPassword({\n                            password: parameters.password,\n                            hashAlgorithm: hashAlgorithm.name,\n                            salt: BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),\n                            iterationCount: this.macData.iterations || 1,\n                            contentToVerify: authSafeContent,\n                            signatureToVerify: BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView),\n                        });\n                        if (!result) {\n                            throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                        }\n                    }\n                }\n                break;\n            case ContentInfo.SIGNED_DATA:\n                {\n                    this.parsedValue.integrityMode = 1;\n                    const cmsSigned = new SignedData({ schema: this.authSafe.content });\n                    const eContent = cmsSigned.encapContentInfo.eContent;\n                    ParameterError.assert(eContent, \"eContent\", \"cmsSigned.encapContentInfo\");\n                    ArgumentError.assert(eContent, \"eContent\", asn1js.OctetString);\n                    const data = eContent.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);\n                    const ok = await cmsSigned.verify({ signer: 0, checkChain: false }, crypto);\n                    if (!ok) {\n                        throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\n        }\n    }\n}\nPFX.CLASS_NAME = \"PFX\";\n\nconst STATUS$1 = \"status\";\nconst STATUS_STRINGS = \"statusStrings\";\nconst FAIL_INFO = \"failInfo\";\nconst CLEAR_PROPS$2 = [\n    STATUS$1,\n    STATUS_STRINGS,\n    FAIL_INFO\n];\nvar PKIStatus;\n(function (PKIStatus) {\n    PKIStatus[PKIStatus[\"granted\"] = 0] = \"granted\";\n    PKIStatus[PKIStatus[\"grantedWithMods\"] = 1] = \"grantedWithMods\";\n    PKIStatus[PKIStatus[\"rejection\"] = 2] = \"rejection\";\n    PKIStatus[PKIStatus[\"waiting\"] = 3] = \"waiting\";\n    PKIStatus[PKIStatus[\"revocationWarning\"] = 4] = \"revocationWarning\";\n    PKIStatus[PKIStatus[\"revocationNotification\"] = 5] = \"revocationNotification\";\n})(PKIStatus || (PKIStatus = {}));\nclass PKIStatusInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));\n        if (STATUS_STRINGS in parameters) {\n            this.statusStrings = pvutils.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));\n        }\n        if (FAIL_INFO in parameters) {\n            this.failInfo = pvutils.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS$1:\n                return 2;\n            case STATUS_STRINGS:\n                return [];\n            case FAIL_INFO:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS$1:\n                return (memberValue === PKIStatusInfo.defaultValues(memberName));\n            case STATUS_STRINGS:\n                return (memberValue.length === 0);\n            case FAIL_INFO:\n                return (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.status || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.statusStrings || EMPTY_STRING),\n                            value: new asn1js.Utf8String()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    name: (names.failInfo || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$2);\n        const asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({\n            names: {\n                status: STATUS$1,\n                statusStrings: STATUS_STRINGS,\n                failInfo: FAIL_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        const _status = asn1.result.status;\n        if ((_status.valueBlock.isHexOnly === true) ||\n            (_status.valueBlock.valueDec < 0) ||\n            (_status.valueBlock.valueDec > 5))\n            throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n        this.status = _status.valueBlock.valueDec;\n        if (STATUS_STRINGS in asn1.result)\n            this.statusStrings = asn1.result.statusStrings;\n        if (FAIL_INFO in asn1.result)\n            this.failInfo = asn1.result.failInfo;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.status }));\n        if (this.statusStrings) {\n            outputArray.push(new asn1js.Sequence({\n                optional: true,\n                value: this.statusStrings\n            }));\n        }\n        if (this.failInfo) {\n            outputArray.push(this.failInfo);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status\n        };\n        if (this.statusStrings) {\n            res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());\n        }\n        if (this.failInfo) {\n            res.failInfo = this.failInfo.toJSON();\n        }\n        return res;\n    }\n}\nPKIStatusInfo.CLASS_NAME = \"PKIStatusInfo\";\n\nconst VERSION = \"version\";\nconst MESSAGE_IMPRINT = \"messageImprint\";\nconst REQ_POLICY = \"reqPolicy\";\nconst NONCE = \"nonce\";\nconst CERT_REQ = \"certReq\";\nconst EXTENSIONS = \"extensions\";\nconst TIME_STAMP_REQ = \"TimeStampReq\";\nconst TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;\nconst TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;\nconst TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;\nconst TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;\nconst TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;\nconst TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;\nconst CLEAR_PROPS$1 = [\n    TIME_STAMP_REQ_VERSION,\n    TIME_STAMP_REQ_MESSAGE_IMPRINT,\n    TIME_STAMP_REQ_POLICY,\n    TIME_STAMP_REQ_NONCE,\n    TIME_STAMP_REQ_CERT_REQ,\n    TIME_STAMP_REQ_EXTENSIONS,\n];\nclass TimeStampReq extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));\n        if (REQ_POLICY in parameters) {\n            this.reqPolicy = pvutils.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));\n        }\n        if (NONCE in parameters) {\n            this.nonce = pvutils.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));\n        }\n        if (CERT_REQ in parameters) {\n            this.certReq = pvutils.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));\n        }\n        if (EXTENSIONS in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION:\n                return 0;\n            case MESSAGE_IMPRINT:\n                return new MessageImprint();\n            case REQ_POLICY:\n                return EMPTY_STRING;\n            case NONCE:\n                return new asn1js.Integer();\n            case CERT_REQ:\n                return false;\n            case EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION:\n            case REQ_POLICY:\n            case CERT_REQ:\n                return (memberValue === TimeStampReq.defaultValues(memberName));\n            case MESSAGE_IMPRINT:\n                return ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\n            case NONCE:\n                return (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\n            case EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TIME_STAMP_REQ),\n            value: [\n                new asn1js.Integer({ name: (names.version || TIME_STAMP_REQ_VERSION) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js.ObjectIdentifier({\n                    name: (names.reqPolicy || TIME_STAMP_REQ_POLICY),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.nonce || TIME_STAMP_REQ_NONCE),\n                    optional: true\n                }),\n                new asn1js.Boolean({\n                    name: (names.certReq || TIME_STAMP_REQ_CERT_REQ),\n                    optional: true\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Repeated({\n                            name: (names.extensions || TIME_STAMP_REQ_EXTENSIONS),\n                            value: Extension.schema()\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1);\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT] });\n        if (TIME_STAMP_REQ_POLICY in asn1.result)\n            this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();\n        if (TIME_STAMP_REQ_NONCE in asn1.result)\n            this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];\n        if (TIME_STAMP_REQ_CERT_REQ in asn1.result)\n            this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;\n        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.messageImprint.toSchema());\n        if (this.reqPolicy)\n            outputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if ((CERT_REQ in this) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            outputArray.push(new asn1js.Boolean({ value: this.certReq }));\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            messageImprint: this.messageImprint.toJSON()\n        };\n        if (this.reqPolicy !== undefined)\n            res.reqPolicy = this.reqPolicy;\n        if (this.nonce !== undefined)\n            res.nonce = this.nonce.toJSON();\n        if ((this.certReq !== undefined) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            res.certReq = this.certReq;\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTimeStampReq.CLASS_NAME = \"TimeStampReq\";\n\nconst STATUS = \"status\";\nconst TIME_STAMP_TOKEN = \"timeStampToken\";\nconst TIME_STAMP_RESP = \"TimeStampResp\";\nconst TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;\nconst TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;\nconst CLEAR_PROPS = [\n    TIME_STAMP_RESP_STATUS,\n    TIME_STAMP_RESP_TOKEN\n];\nclass TimeStampResp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));\n        if (TIME_STAMP_TOKEN in parameters) {\n            this.timeStampToken = pvutils.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS:\n                return new PKIStatusInfo();\n            case TIME_STAMP_TOKEN:\n                return new ContentInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS:\n                return ((PKIStatusInfo.compareWithDefault(STATUS, memberValue.status)) &&\n                    ((\"statusStrings\" in memberValue) === false) &&\n                    ((\"failInfo\" in memberValue) === false));\n            case TIME_STAMP_TOKEN:\n                return ((memberValue.contentType === EMPTY_STRING) &&\n                    (memberValue.content instanceof asn1js.Any));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TIME_STAMP_RESP),\n            value: [\n                PKIStatusInfo.schema(names.status || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_STATUS\n                    }\n                }),\n                ContentInfo.schema(names.timeStampToken || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_TOKEN,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.status = new PKIStatusInfo({ schema: asn1.result[TIME_STAMP_RESP_STATUS] });\n        if (TIME_STAMP_RESP_TOKEN in asn1.result)\n            this.timeStampToken = new ContentInfo({ schema: asn1.result[TIME_STAMP_RESP_TOKEN] });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.status.toSchema());\n        if (this.timeStampToken) {\n            outputArray.push(this.timeStampToken.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status.toJSON()\n        };\n        if (this.timeStampToken) {\n            res.timeStampToken = this.timeStampToken.toJSON();\n        }\n        return res;\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);\n    }\n    async verify(verificationParameters = { signer: 0, trustedCerts: [], data: EMPTY_BUFFER }, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.verify(verificationParameters, crypto);\n    }\n    assertContentType() {\n        if (!this.timeStampToken) {\n            throw new Error(\"timeStampToken is absent in TSP response\");\n        }\n        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {\n            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\n        }\n    }\n}\nTimeStampResp.CLASS_NAME = \"TimeStampResp\";\n\nfunction initCryptoEngine() {\n    if (typeof self !== \"undefined\") {\n        if (\"crypto\" in self) {\n            let engineName = \"webcrypto\";\n            if (\"webkitSubtle\" in self.crypto) {\n                engineName = \"safari\";\n            }\n            setEngine(engineName, new CryptoEngine({ name: engineName, crypto: crypto }));\n        }\n    }\n    else if (typeof crypto !== \"undefined\" && \"webcrypto\" in crypto) {\n        const name = \"NodeJS ^15\";\n        const nodeCrypto = crypto.webcrypto;\n        setEngine(name, new CryptoEngine({ name, crypto: nodeCrypto }));\n    }\n}\n\ninitCryptoEngine();\n\nexport { AbstractCryptoEngine, AccessDescription, Accuracy, AlgorithmIdentifier, AltName, ArgumentError, AsnError, AttCertValidityPeriod, Attribute, AttributeCertificateInfoV1, AttributeCertificateInfoV2, AttributeCertificateV1, AttributeCertificateV2, AttributeTypeAndValue, AuthenticatedSafe, AuthorityKeyIdentifier, BasicConstraints, BasicOCSPResponse, CAVersion, CRLBag, CRLDistributionPoints, CertBag, CertID, Certificate, CertificateChainValidationEngine, CertificatePolicies, CertificateRevocationList, CertificateSet, CertificateTemplate, CertificationRequest, ChainValidationCode, ChainValidationError, ContentInfo, CryptoEngine, DigestInfo, DistributionPoint, ECCCMSSharedInfo, ECNamedCurves, ECPrivateKey, ECPublicKey, EncapsulatedContentInfo, EncryptedContentInfo, EncryptedData, EnvelopedData, ExtKeyUsage, Extension, ExtensionValueFactory, Extensions, GeneralName, GeneralNames, GeneralSubtree, HASHED_MESSAGE, HASH_ALGORITHM, Holder, InfoAccess, IssuerAndSerialNumber, IssuerSerial, IssuingDistributionPoint, KEKIdentifier, KEKRecipientInfo, KeyAgreeRecipientIdentifier, KeyAgreeRecipientInfo, KeyBag, KeyTransRecipientInfo, MICROS, MILLIS, MacData, MessageImprint, NameConstraints, OCSPRequest, OCSPResponse, ObjectDigestInfo, OriginatorIdentifierOrKey, OriginatorInfo, OriginatorPublicKey, OtherCertificateFormat, OtherKeyAttribute, OtherPrimeInfo, OtherRecipientInfo, OtherRevocationInfoFormat, PBES2Params, PBKDF2Params, PFX, PKCS8ShroudedKeyBag, PKIStatus, PKIStatusInfo, POLICY_IDENTIFIER, POLICY_QUALIFIERS, ParameterError, PasswordRecipientinfo, PkiObject, PolicyConstraints, PolicyInformation, PolicyMapping, PolicyMappings, PolicyQualifierInfo, PrivateKeyInfo, PrivateKeyUsagePeriod, PublicKeyInfo, QCStatement, QCStatements, RDN, RSAESOAEPParams, RSAPrivateKey, RSAPublicKey, RSASSAPSSParams, RecipientEncryptedKey, RecipientEncryptedKeys, RecipientIdentifier, RecipientInfo, RecipientKeyIdentifier, RelativeDistinguishedNames, Request, ResponseBytes, ResponseData, RevocationInfoChoices, RevokedCertificate, SECONDS, SafeBag, SafeBagValueFactory, SafeContents, SecretBag, Signature, SignedAndUnsignedAttributes, SignedCertificateTimestamp, SignedCertificateTimestampList, SignedData, SignedDataVerifyError, SignerInfo, SingleResponse, SubjectDirectoryAttributes, TBSRequest, TSTInfo, TYPE$4 as TYPE, TYPE_AND_VALUES, Time, TimeStampReq, TimeStampResp, TimeType, V2Form, VALUE$5 as VALUE, VALUE_BEFORE_DECODE, checkCA, createCMSECDSASignature, createECDSASignatureFromCMS, engine, getAlgorithmByOID, getAlgorithmParameters, getCrypto, getEngine, getHashAlgorithm, getOIDByAlgorithm, getRandomValues, id_AnyPolicy, id_AuthorityInfoAccess, id_AuthorityKeyIdentifier, id_BaseCRLNumber, id_BasicConstraints, id_CRLBag_X509CRL, id_CRLDistributionPoints, id_CRLNumber, id_CRLReason, id_CertBag_AttributeCertificate, id_CertBag_SDSICertificate, id_CertBag_X509Certificate, id_CertificateIssuer, id_CertificatePolicies, id_ContentType_Data, id_ContentType_EncryptedData, id_ContentType_EnvelopedData, id_ContentType_SignedData, id_ExtKeyUsage, id_FreshestCRL, id_InhibitAnyPolicy, id_InvalidityDate, id_IssuerAltName, id_IssuingDistributionPoint, id_KeyUsage, id_MicrosoftAppPolicies, id_MicrosoftCaVersion, id_MicrosoftCertTemplateV1, id_MicrosoftCertTemplateV2, id_MicrosoftPrevCaCertHash, id_NameConstraints, id_PKIX_OCSP_Basic, id_PolicyConstraints, id_PolicyMappings, id_PrivateKeyUsagePeriod, id_QCStatements, id_SignedCertificateTimestampList, id_SubjectAltName, id_SubjectDirectoryAttributes, id_SubjectInfoAccess, id_SubjectKeyIdentifier, id_ad, id_ad_caIssuers, id_ad_ocsp, id_eContentType_TSTInfo, id_pkix, id_sha1, id_sha256, id_sha384, id_sha512, kdf, setEngine, stringPrep, verifySCTsForCertificate };\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "/**\n * SHA1 (RFC 3174) legacy hash function.\n * @module\n * @deprecated\n */\nimport { SHA1 as SHA1n, sha1 as sha1n } from './legacy.ts';\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const SHA1: typeof SHA1n = SHA1n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const sha1: typeof sha1n = sha1n;\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA384 as SHA384n,\n  sha384 as sha384n,\n  sha512_224 as sha512_224n,\n  SHA512_224 as SHA512_224n,\n  sha512_256 as sha512_256n,\n  SHA512_256 as SHA512_256n,\n  SHA512 as SHA512n,\n  sha512 as sha512n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512: typeof SHA512n = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512: typeof sha512n = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384: typeof SHA384n = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384: typeof sha384n = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224: typeof SHA512_224n = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224: typeof sha512_224n = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256: typeof SHA512_256n = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256: typeof sha512_256n = sha512_256n;\n"],
  "mappings": "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",
  "names": ["init_index_es", "crypto", "isLE", "_32n", "K", "sha1", "sha256", "sha512", "sha384", "crypto", "sha1", "sha256", "sha384", "sha512", "i", "_a", "engine", "MD5", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "TimeType", "kdfResult", "aesKwKey", "algorithmId", "contentEncryptionAlgorithm", "ChainValidationCode", "result", "PKIStatus"]
}

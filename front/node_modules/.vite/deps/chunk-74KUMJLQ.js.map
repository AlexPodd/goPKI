{
  "version": 3,
  "sources": ["../../pvtsutils/build/index.es.js", "../../asn1js/build/index.es.js"],
  "sourcesContent": ["/*!\n * MIT License\n * \n * Copyright (c) 2017-2024 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f\\s]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport { BufferSourceConverter, Convert, assign, combine, isEqual };\n", "/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\n    if (typeof BigInt === \"undefined\") {\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n    }\n}\nfunction concat(buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        outputLength += buffer.byteLength;\n    }\n    const retView = new Uint8Array(outputLength);\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retView.buffer;\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof Uint8Array)) {\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\n\nclass ViewWriter {\n    constructor() {\n        this.items = [];\n    }\n    write(buf) {\n        this.items.push(buf);\n    }\n    final() {\n        return concat(this.items);\n    }\n}\n\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_HEX_VIEW = \"valueHexView\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_VIEW = new Uint8Array(0);\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\nconst OCTET_STRING_NAME = \"OCTET STRING\";\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\n    var _a;\n    return _a = class Some extends BaseClass {\n            get valueHex() {\n                return this.valueHexView.slice().buffer;\n            }\n            set valueHex(value) {\n                this.valueHexView = new Uint8Array(value);\n            }\n            constructor(...args) {\n                var _b;\n                super(...args);\n                const params = args[0] || {};\n                this.isHexOnly = (_b = params.isHexOnly) !== null && _b !== void 0 ? _b : false;\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\n            }\n            fromBER(inputBuffer, inputOffset, inputLength) {\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n                    return -1;\n                }\n                const endLength = inputOffset + inputLength;\n                this.valueHexView = view.subarray(inputOffset, endLength);\n                if (!this.valueHexView.length) {\n                    this.warnings.push(\"Zero buffer length\");\n                    return inputOffset;\n                }\n                this.blockLength = inputLength;\n                return endLength;\n            }\n            toBER(sizeOnly = false) {\n                if (!this.isHexOnly) {\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\n                    return EMPTY_BUFFER;\n                }\n                if (sizeOnly) {\n                    return new ArrayBuffer(this.valueHexView.byteLength);\n                }\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\n                    ? this.valueHexView.buffer\n                    : this.valueHexView.slice().buffer;\n            }\n            toJSON() {\n                return {\n                    ...super.toJSON(),\n                    isHexOnly: this.isHexOnly,\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\n                };\n            }\n        },\n        _a.NAME = \"hexBlock\",\n        _a;\n}\n\nclass LocalBaseBlock {\n    static blockName() {\n        return this.NAME;\n    }\n    get valueBeforeDecode() {\n        return this.valueBeforeDecodeView.slice().buffer;\n    }\n    set valueBeforeDecode(value) {\n        this.valueBeforeDecodeView = new Uint8Array(value);\n    }\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\n        this.blockLength = blockLength;\n        this.error = error;\n        this.warnings = warnings;\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\n    }\n    toJSON() {\n        return {\n            blockName: this.constructor.NAME,\n            blockLength: this.blockLength,\n            error: this.error,\n            warnings: this.warnings,\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\n        };\n    }\n}\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\n    fromBER(_inputBuffer, _inputOffset, _inputLength) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n    toBER(_sizeOnly, _writer) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n}\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ idBlock = {} } = {}) {\n        var _a, _b, _c, _d;\n        super();\n        if (idBlock) {\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = idBlock.valueHex\n                ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex)\n                : EMPTY_VIEW;\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\n        }\n        else {\n            this.tagClass = -1;\n            this.tagNumber = -1;\n            this.isConstructed = false;\n        }\n    }\n    toBER(sizeOnly = false) {\n        let firstOctet = 0;\n        switch (this.tagClass) {\n            case 1:\n                firstOctet |= 0x00;\n                break;\n            case 2:\n                firstOctet |= 0x40;\n                break;\n            case 3:\n                firstOctet |= 0x80;\n                break;\n            case 4:\n                firstOctet |= 0xC0;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return EMPTY_BUFFER;\n        }\n        if (this.isConstructed)\n            firstOctet |= 0x20;\n        if (this.tagNumber < 31 && !this.isHexOnly) {\n            const retView = new Uint8Array(1);\n            if (!sizeOnly) {\n                let number = this.tagNumber;\n                number &= 0x1F;\n                firstOctet |= number;\n                retView[0] = firstOctet;\n            }\n            return retView.buffer;\n        }\n        if (!this.isHexOnly) {\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\n            const encodedView = new Uint8Array(encodedBuf);\n            const size = encodedBuf.byteLength;\n            const retView = new Uint8Array(size + 1);\n            retView[0] = (firstOctet | 0x1F);\n            if (!sizeOnly) {\n                for (let i = 0; i < (size - 1); i++)\n                    retView[i + 1] = encodedView[i] | 0x80;\n                retView[size] = encodedView[size - 1];\n            }\n            return retView.buffer;\n        }\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\n        retView[0] = (firstOctet | 0x1F);\n        if (!sizeOnly) {\n            const curView = this.valueHexView;\n            for (let i = 0; i < (curView.length - 1); i++)\n                retView[i + 1] = curView[i] | 0x80;\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\n        }\n        return retView.buffer;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        const tagClassMask = intBuffer[0] & 0xC0;\n        switch (tagClassMask) {\n            case 0x00:\n                this.tagClass = (1);\n                break;\n            case 0x40:\n                this.tagClass = (2);\n                break;\n            case 0x80:\n                this.tagClass = (3);\n                break;\n            case 0xC0:\n                this.tagClass = (4);\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return -1;\n        }\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n        this.isHexOnly = false;\n        const tagNumberMask = intBuffer[0] & 0x1F;\n        if (tagNumberMask !== 0x1F) {\n            this.tagNumber = (tagNumberMask);\n            this.blockLength = 1;\n        }\n        else {\n            let count = 1;\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\n            let tagNumberBufferMaxLength = 255;\n            while (intBuffer[count] & 0x80) {\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n                count++;\n                if (count >= intBuffer.length) {\n                    this.error = \"End of input reached before message was fully decoded\";\n                    return -1;\n                }\n                if (count === tagNumberBufferMaxLength) {\n                    tagNumberBufferMaxLength += 255;\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\n                        tempBufferView[i] = intTagNumberBuffer[i];\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\n                }\n            }\n            this.blockLength = (count + 1);\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n            const tempBufferView = new Uint8Array(count);\n            for (let i = 0; i < count; i++)\n                tempBufferView[i] = intTagNumberBuffer[i];\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\n            intTagNumberBuffer.set(tempBufferView);\n            if (this.blockLength <= 9)\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\n            else {\n                this.isHexOnly = true;\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\n            }\n        }\n        if (((this.tagClass === 1))\n            && (this.isConstructed)) {\n            switch (this.tagNumber) {\n                case 1:\n                case 2:\n                case 5:\n                case 6:\n                case 9:\n                case 13:\n                case 14:\n                case 23:\n                case 24:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                    this.error = \"Constructed encoding used for primitive type\";\n                    return -1;\n            }\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            tagClass: this.tagClass,\n            tagNumber: this.tagNumber,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\n    constructor({ lenBlock = {} } = {}) {\n        var _a, _b, _c;\n        super();\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        if (intBuffer[0] === 0xFF) {\n            this.error = \"Length block 0xFF is reserved by standard\";\n            return -1;\n        }\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\n        if (this.isIndefiniteForm) {\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\n        if (this.longFormUsed === false) {\n            this.length = (intBuffer[0]);\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        const count = intBuffer[0] & 0x7F;\n        if (count > 8) {\n            this.error = \"Too big integer\";\n            return -1;\n        }\n        if ((count + 1) > intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        const lenOffset = inputOffset + 1;\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\n        if (lengthBufferView[count - 1] === 0x00)\n            this.warnings.push(\"Needlessly long encoded length\");\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\n        if (this.longFormUsed && (this.length <= 127))\n            this.warnings.push(\"Unnecessary usage of long length form\");\n        this.blockLength = count + 1;\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly = false) {\n        let retBuf;\n        let retView;\n        if (this.length > 127)\n            this.longFormUsed = true;\n        if (this.isIndefiniteForm) {\n            retBuf = new ArrayBuffer(1);\n            if (sizeOnly === false) {\n                retView = new Uint8Array(retBuf);\n                retView[0] = 0x80;\n            }\n            return retBuf;\n        }\n        if (this.longFormUsed) {\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\n            if (encodedBuf.byteLength > 127) {\n                this.error = \"Too big length\";\n                return (EMPTY_BUFFER);\n            }\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n            if (sizeOnly)\n                return retBuf;\n            const encodedView = new Uint8Array(encodedBuf);\n            retView = new Uint8Array(retBuf);\n            retView[0] = encodedBuf.byteLength | 0x80;\n            for (let i = 0; i < encodedBuf.byteLength; i++)\n                retView[i + 1] = encodedView[i];\n            return retBuf;\n        }\n        retBuf = new ArrayBuffer(1);\n        if (sizeOnly === false) {\n            retView = new Uint8Array(retBuf);\n            retView[0] = this.length;\n        }\n        return retBuf;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            longFormUsed: this.longFormUsed,\n            length: this.length,\n        };\n    }\n}\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\n        super(parameters);\n        this.name = name;\n        this.optional = optional;\n        if (primitiveSchema) {\n            this.primitiveSchema = primitiveSchema;\n        }\n        this.idBlock = new LocalIdentificationBlock(parameters);\n        this.lenBlock = new LocalLengthBlock(parameters);\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        if (!writer) {\n            prepareIndefiniteForm(this);\n        }\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\n        _writer.write(idBlockBuf);\n        if (this.lenBlock.isIndefiniteForm) {\n            _writer.write(new Uint8Array([0x80]).buffer);\n            this.valueBlock.toBER(sizeOnly, _writer);\n            _writer.write(new ArrayBuffer(2));\n        }\n        else {\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\n            this.lenBlock.length = valueBlockBuf.byteLength;\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n            _writer.write(lenBlockBuf);\n            _writer.write(valueBlockBuf);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            idBlock: this.idBlock.toJSON(),\n            lenBlock: this.lenBlock.toJSON(),\n            valueBlock: this.valueBlock.toJSON(),\n            name: this.name,\n            optional: this.optional,\n        };\n        if (this.primitiveSchema)\n            object.primitiveSchema = this.primitiveSchema.toJSON();\n        return object;\n    }\n    toString(encoding = \"ascii\") {\n        if (encoding === \"ascii\") {\n            return this.onAsciiEncoding();\n        }\n        return pvtsutils.Convert.ToHex(this.toBER());\n    }\n    onAsciiEncoding() {\n        const name = this.constructor.NAME;\n        const value = pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView);\n        return `${name} : ${value}`;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        const thisRaw = this.toBER();\n        const otherRaw = other.toBER();\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\n    }\n}\nBaseBlock.NAME = \"BaseBlock\";\nfunction prepareIndefiniteForm(baseBlock) {\n    var _a;\n    if (baseBlock instanceof typeStore.Constructed) {\n        for (const value of baseBlock.valueBlock.value) {\n            if (prepareIndefiniteForm(value)) {\n                baseBlock.lenBlock.isIndefiniteForm = true;\n            }\n        }\n    }\n    return !!((_a = baseBlock.lenBlock) === null || _a === void 0 ? void 0 : _a.isIndefiniteForm);\n}\n\nclass BaseStringBlock extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\n        super(parameters, stringValueBlockType);\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        this.fromBuffer(this.valueBlock.valueHexView);\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\n    }\n}\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\n    constructor({ isHexOnly = true, ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = isHexOnly;\n    }\n}\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\nclass Primitive extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalPrimitiveValueBlock);\n        this.idBlock.isConstructed = false;\n    }\n}\n_a$w = Primitive;\n(() => {\n    typeStore.Primitive = _a$w;\n})();\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) {\n        return inputObject;\n    }\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings;\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\n    return newObject;\n}\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\n    const incomingOffset = inputOffset;\n    let returnObject = new BaseBlock({}, ValueBlock);\n    const baseBlock = new LocalBaseBlock();\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\n        returnObject.error = baseBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\n    if (!intBuffer.length) {\n        returnObject.error = \"Zero buffer length\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.idBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.idBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.idBlock.blockLength;\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.lenBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.lenBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.lenBlock.blockLength;\n    if (!returnObject.idBlock.isConstructed\n        && returnObject.lenBlock.isIndefiniteForm) {\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let newASN1Type = BaseBlock;\n    switch (returnObject.idBlock.tagClass) {\n        case 1:\n            if ((returnObject.idBlock.tagNumber >= 37)\n                && (returnObject.idBlock.isHexOnly === false)) {\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n                return {\n                    offset: -1,\n                    result: returnObject,\n                };\n            }\n            switch (returnObject.idBlock.tagNumber) {\n                case 0:\n                    if ((returnObject.idBlock.isConstructed)\n                        && (returnObject.lenBlock.length > 0)) {\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n                        return {\n                            offset: -1,\n                            result: returnObject,\n                        };\n                    }\n                    newASN1Type = typeStore.EndOfContent;\n                    break;\n                case 1:\n                    newASN1Type = typeStore.Boolean;\n                    break;\n                case 2:\n                    newASN1Type = typeStore.Integer;\n                    break;\n                case 3:\n                    newASN1Type = typeStore.BitString;\n                    break;\n                case 4:\n                    newASN1Type = typeStore.OctetString;\n                    break;\n                case 5:\n                    newASN1Type = typeStore.Null;\n                    break;\n                case 6:\n                    newASN1Type = typeStore.ObjectIdentifier;\n                    break;\n                case 10:\n                    newASN1Type = typeStore.Enumerated;\n                    break;\n                case 12:\n                    newASN1Type = typeStore.Utf8String;\n                    break;\n                case 13:\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\n                    break;\n                case 14:\n                    newASN1Type = typeStore.TIME;\n                    break;\n                case 15:\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n                    return {\n                        offset: -1,\n                        result: returnObject,\n                    };\n                case 16:\n                    newASN1Type = typeStore.Sequence;\n                    break;\n                case 17:\n                    newASN1Type = typeStore.Set;\n                    break;\n                case 18:\n                    newASN1Type = typeStore.NumericString;\n                    break;\n                case 19:\n                    newASN1Type = typeStore.PrintableString;\n                    break;\n                case 20:\n                    newASN1Type = typeStore.TeletexString;\n                    break;\n                case 21:\n                    newASN1Type = typeStore.VideotexString;\n                    break;\n                case 22:\n                    newASN1Type = typeStore.IA5String;\n                    break;\n                case 23:\n                    newASN1Type = typeStore.UTCTime;\n                    break;\n                case 24:\n                    newASN1Type = typeStore.GeneralizedTime;\n                    break;\n                case 25:\n                    newASN1Type = typeStore.GraphicString;\n                    break;\n                case 26:\n                    newASN1Type = typeStore.VisibleString;\n                    break;\n                case 27:\n                    newASN1Type = typeStore.GeneralString;\n                    break;\n                case 28:\n                    newASN1Type = typeStore.UniversalString;\n                    break;\n                case 29:\n                    newASN1Type = typeStore.CharacterString;\n                    break;\n                case 30:\n                    newASN1Type = typeStore.BmpString;\n                    break;\n                case 31:\n                    newASN1Type = typeStore.DATE;\n                    break;\n                case 32:\n                    newASN1Type = typeStore.TimeOfDay;\n                    break;\n                case 33:\n                    newASN1Type = typeStore.DateTime;\n                    break;\n                case 34:\n                    newASN1Type = typeStore.Duration;\n                    break;\n                default: {\n                    const newObject = returnObject.idBlock.isConstructed\n                        ? new typeStore.Constructed()\n                        : new typeStore.Primitive();\n                    newObject.idBlock = returnObject.idBlock;\n                    newObject.lenBlock = returnObject.lenBlock;\n                    newObject.warnings = returnObject.warnings;\n                    returnObject = newObject;\n                }\n            }\n            break;\n        case 2:\n        case 3:\n        case 4:\n        default: {\n            newASN1Type = returnObject.idBlock.isConstructed\n                ? typeStore.Constructed\n                : typeStore.Primitive;\n        }\n    }\n    returnObject = localChangeType(returnObject, newASN1Type);\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\n    return {\n        offset: resultOffset,\n        result: returnObject,\n    };\n}\nfunction fromBER(inputBuffer) {\n    if (!inputBuffer.byteLength) {\n        const result = new BaseBlock({}, ValueBlock);\n        result.error = \"Input buffer has zero length\";\n        return {\n            offset: -1,\n            result,\n        };\n    }\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\n}\n\nfunction checkLen(indefiniteLength, length) {\n    if (indefiniteLength) {\n        return 1;\n    }\n    return length;\n}\nclass LocalConstructedValueBlock extends ValueBlock {\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.isIndefiniteForm = isIndefiniteForm;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\n        if (this.valueBeforeDecodeView.length === 0) {\n            this.warnings.push(\"Zero buffer length\");\n            return inputOffset;\n        }\n        let currentOffset = inputOffset;\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\n            const returnObject = localFromBER(view, currentOffset, inputLength);\n            if (returnObject.offset === -1) {\n                this.error = returnObject.result.error;\n                this.warnings.concat(returnObject.result.warnings);\n                return -1;\n            }\n            currentOffset = returnObject.offset;\n            this.blockLength += returnObject.result.blockLength;\n            inputLength -= returnObject.result.blockLength;\n            this.value.push(returnObject.result);\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\n                break;\n            }\n        }\n        if (this.isIndefiniteForm) {\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\n                this.value.pop();\n            }\n            else {\n                this.warnings.push(\"No EndOfContent block encoded\");\n            }\n        }\n        return currentOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].toBER(sizeOnly, _writer);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            value: [],\n        };\n        for (const value of this.value) {\n            object.value.push(value.toJSON());\n        }\n        return object;\n    }\n}\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\nclass Constructed extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalConstructedValueBlock);\n        this.idBlock.isConstructed = true;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        const values = [];\n        for (const value of this.valueBlock.value) {\n            values.push(value.toString(\"ascii\").split(\"\\n\").map((o) => `  ${o}`).join(\"\\n\"));\n        }\n        const blockName = this.idBlock.tagClass === 3\n            ? `[${this.idBlock.tagNumber}]`\n            : this.constructor.NAME;\n        return values.length\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\n            : `${blockName} :`;\n    }\n}\n_a$v = Constructed;\n(() => {\n    typeStore.Constructed = _a$v;\n})();\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\n    fromBER(inputBuffer, inputOffset, _inputLength) {\n        return inputOffset;\n    }\n    toBER(_sizeOnly) {\n        return EMPTY_BUFFER;\n    }\n}\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\nclass EndOfContent extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalEndOfContentValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 0;\n    }\n}\n_a$u = EndOfContent;\n(() => {\n    typeStore.EndOfContent = _a$u;\n})();\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\nclass Null extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, ValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 5;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (this.lenBlock.length > 0)\n            this.warnings.push(\"Non-zero length of value block for Null type\");\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        this.blockLength += inputLength;\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n            return -1;\n        }\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        const retBuf = new ArrayBuffer(2);\n        if (!sizeOnly) {\n            const retView = new Uint8Array(retBuf);\n            retView[0] = 0x05;\n            retView[1] = 0x00;\n        }\n        if (writer) {\n            writer.write(retBuf);\n        }\n        return retBuf;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME}`;\n    }\n}\n_a$t = Null;\n(() => {\n    typeStore.Null = _a$t;\n})();\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\n    get value() {\n        for (const octet of this.valueHexView) {\n            if (octet > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set value(value) {\n        this.valueHexView[0] = value ? 0xFF : 0x00;\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        if (parameters.valueHex) {\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\n        }\n        else {\n            this.valueHexView = new Uint8Array(1);\n        }\n        if (value) {\n            this.value = value;\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (inputLength > 1)\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n        this.isHexOnly = true;\n        pvutils.utilDecodeTC.call(this);\n        this.blockLength = inputLength;\n        return (inputOffset + inputLength);\n    }\n    toBER() {\n        return this.valueHexView.slice();\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\nclass Boolean extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalBooleanValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 1;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.getValue}`;\n    }\n}\n_a$s = Boolean;\n(() => {\n    typeStore.Boolean = _a$s;\n})();\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.isConstructed = isConstructed;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = 0;\n        if (this.isConstructed) {\n            this.isHexOnly = false;\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (let i = 0; i < this.value.length; i++) {\n                const currentBlockName = this.value[i].constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== OCTET_STRING_NAME) {\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n                    return -1;\n                }\n            }\n        }\n        else {\n            this.isHexOnly = true;\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n            this.blockLength = inputLength;\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed)\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.byteLength)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\nclass OctetString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalOctetStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 4;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        if (inputLength === 0) {\n            if (this.idBlock.error.length === 0)\n                this.blockLength += this.idBlock.blockLength;\n            if (this.lenBlock.error.length === 0)\n                this.blockLength += this.lenBlock.blockLength;\n            return inputOffset;\n        }\n        if (!this.valueBlock.isConstructed) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\n                        this.valueBlock.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        const name = this.constructor.NAME;\n        const value = pvtsutils.Convert.ToHex(this.valueBlock.valueHexView);\n        return `${name} : ${value}`;\n    }\n    getValue() {\n        if (!this.idBlock.isConstructed) {\n            return this.valueBlock.valueHexView.slice().buffer;\n        }\n        const array = [];\n        for (const content of this.valueBlock.value) {\n            if (content instanceof _a$r) {\n                array.push(content.valueBlock.valueHexView);\n            }\n        }\n        return pvtsutils.BufferSourceConverter.concat(array);\n    }\n}\n_a$r = OctetString;\n(() => {\n    typeStore.OctetString = _a$r;\n})();\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.unusedBits = unusedBits;\n        this.isConstructed = isConstructed;\n        this.blockLength = this.valueHexView.byteLength;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        let resultOffset = -1;\n        if (this.isConstructed) {\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (const value of this.value) {\n                const currentBlockName = value.constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== BIT_STRING_NAME) {\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\n                    return -1;\n                }\n                const valueBlock = value.valueBlock;\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n                    return -1;\n                }\n                this.unusedBits = valueBlock.unusedBits;\n            }\n            return resultOffset;\n        }\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.unusedBits = intBuffer[0];\n        if (this.unusedBits > 7) {\n            this.error = \"Unused bits for BitString must be in range 0-7\";\n            return -1;\n        }\n        if (!this.unusedBits) {\n            const buf = intBuffer.subarray(1);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\n                        this.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        this.valueHexView = intBuffer.subarray(1);\n        this.blockLength = intBuffer.length;\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) {\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        }\n        if (sizeOnly) {\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\n        }\n        if (!this.valueHexView.byteLength) {\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(this.valueHexView.length + 1);\n        retView[0] = this.unusedBits;\n        retView.set(this.valueHexView, 1);\n        return retView.buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            unusedBits: this.unusedBits,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\nclass BitString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalBitStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 3;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        else {\n            const bits = [];\n            const valueHex = this.valueBlock.valueHexView;\n            for (const byte of valueHex) {\n                bits.push(byte.toString(2).padStart(8, \"0\"));\n            }\n            const bitsStr = bits.join(\"\");\n            const name = this.constructor.NAME;\n            const value = bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits);\n            return `${name} : ${value}`;\n        }\n    }\n}\n_a$q = BitString;\n(() => {\n    typeStore.BitString = _a$q;\n})();\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\nfunction viewAdd(first, second) {\n    const c = new Uint8Array([0]);\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    let firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value = 0;\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n    let counter = 0;\n    for (let i = max; i >= 0; i--, counter++) {\n        switch (true) {\n            case (counter < secondViewCopy.length):\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n                break;\n            default:\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n        c[0] = value / 10;\n        switch (true) {\n            case (counter >= firstViewCopy.length):\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n                break;\n            default:\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n    }\n    if (c[0] > 0)\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\n    return firstViewCopy;\n}\nfunction power2(n) {\n    if (n >= powers2.length) {\n        for (let p = powers2.length; p <= n; p++) {\n            const c = new Uint8Array([0]);\n            let digits = (powers2[p - 1]).slice(0);\n            for (let i = (digits.length - 1); i >= 0; i--) {\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n                c[0] = newValue[0] / 10;\n                digits[i] = newValue[0] % 10;\n            }\n            if (c[0] > 0)\n                digits = pvutils.utilConcatView(c, digits);\n            powers2.push(digits);\n        }\n    }\n    return powers2[n];\n}\nfunction viewSub(first, second) {\n    let b = 0;\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    const firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value;\n    let counter = 0;\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n        switch (true) {\n            case (value < 0):\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n                break;\n            default:\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n    }\n    if (b > 0) {\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\n            if (value < 0) {\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            }\n            else {\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n                break;\n            }\n        }\n    }\n    return firstViewCopy.slice();\n}\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n    setValueHex() {\n        if (this.valueHexView.length >= 4) {\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\n            this.isHexOnly = true;\n            this._valueDec = 0;\n        }\n        else {\n            this.isHexOnly = false;\n            if (this.valueHexView.length > 0) {\n                this._valueDec = pvutils.utilDecodeTC.call(this);\n            }\n        }\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        this._valueDec = 0;\n        if (parameters.valueHex) {\n            this.setValueHex();\n        }\n        if (value !== undefined) {\n            this.valueDec = value;\n        }\n    }\n    set valueDec(v) {\n        this._valueDec = v;\n        this.isHexOnly = false;\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\n    }\n    get valueDec() {\n        return this._valueDec;\n    }\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n        if (offset === -1)\n            return offset;\n        const view = this.valueHexView;\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\n            this.valueHexView = view.subarray(1);\n        }\n        else {\n            if (expectedLength !== 0) {\n                if (view.length < expectedLength) {\n                    if ((expectedLength - view.length) > 1)\n                        expectedLength = view.length + 1;\n                    this.valueHexView = view.subarray(expectedLength - view.length);\n                }\n            }\n        }\n        return offset;\n    }\n    toDER(sizeOnly = false) {\n        const view = this.valueHexView;\n        switch (true) {\n            case ((view[0] & 0x80) !== 0):\n                {\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\n                    updatedView[0] = 0x00;\n                    updatedView.set(view, 1);\n                    this.valueHexView = updatedView;\n                }\n                break;\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n                {\n                    this.valueHexView = this.valueHexView.subarray(1);\n                }\n                break;\n        }\n        return this.toBER(sizeOnly);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n        if (resultOffset === -1) {\n            return resultOffset;\n        }\n        this.setValueHex();\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.length)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n    toString() {\n        const firstBit = (this.valueHexView.length * 8) - 1;\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\n        let bitNumber = 0;\n        let currentByte;\n        const asn1View = this.valueHexView;\n        let result = \"\";\n        let flag = false;\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\n            currentByte = asn1View[byteNumber];\n            for (let i = 0; i < 8; i++) {\n                if ((currentByte & 1) === 1) {\n                    switch (bitNumber) {\n                        case firstBit:\n                            digits = viewSub(power2(bitNumber), digits);\n                            result = \"-\";\n                            break;\n                        default:\n                            digits = viewAdd(digits, power2(bitNumber));\n                    }\n                }\n                bitNumber++;\n                currentByte >>= 1;\n            }\n        }\n        for (let i = 0; i < digits.length; i++) {\n            if (digits[i])\n                flag = true;\n            if (flag)\n                result += digitsString.charAt(digits[i]);\n        }\n        if (flag === false)\n            result += digitsString.charAt(0);\n        return result;\n    }\n}\n_a$p = LocalIntegerValueBlock;\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\n(() => {\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\n        set: function (v) {\n            this.valueHexView = new Uint8Array(v);\n            this.setValueHex();\n        },\n        get: function () {\n            return this.valueHexView.slice().buffer;\n        },\n    });\n})();\n\nvar _a$o;\nclass Integer extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalIntegerValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 2;\n    }\n    toBigInt() {\n        assertBigInt();\n        return BigInt(this.valueBlock.toString());\n    }\n    static fromBigInt(value) {\n        assertBigInt();\n        const bigIntValue = BigInt(value);\n        const writer = new ViewWriter();\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\n        if (bigIntValue < 0) {\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\n            first[0] |= 0x80;\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\n            const secondInt = firstInt + bigIntValue;\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\n            second[0] |= 0x80;\n            writer.write(second);\n        }\n        else {\n            if (view[0] & 0x80) {\n                writer.write(new Uint8Array([0]));\n            }\n            writer.write(view);\n        }\n        const res = new _a$o({ valueHex: writer.final() });\n        return res;\n    }\n    convertToDER() {\n        const integer = new _a$o({ valueHex: this.valueBlock.valueHexView });\n        integer.valueBlock.toDER();\n        return integer;\n    }\n    convertFromDER() {\n        return new _a$o({\n            valueHex: this.valueBlock.valueHexView[0] === 0\n                ? this.valueBlock.valueHexView.subarray(1)\n                : this.valueBlock.valueHexView,\n        });\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\n    }\n}\n_a$o = Integer;\n(() => {\n    typeStore.Integer = _a$o;\n})();\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\nclass Enumerated extends Integer {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 10;\n    }\n}\n_a$n = Enumerated;\n(() => {\n    typeStore.Enumerated = _a$n;\n})();\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n        this.isFirstSid = isFirstSid;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++) {\n            tempView[i] = this.valueHexView[i];\n        }\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    set valueBigInt(value) {\n        assertBigInt();\n        let bits = BigInt(value).toString(2);\n        while (bits.length % 7) {\n            bits = \"0\" + bits;\n        }\n        const bytes = new Uint8Array(bits.length / 7);\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n        }\n        this.fromBER(bytes.buffer, 0, bytes.length);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\n        else {\n            if (this.isFirstSid) {\n                let sidValue = this.valueDec;\n                if (this.valueDec <= 39)\n                    result = \"0.\";\n                else {\n                    if (this.valueDec <= 79) {\n                        result = \"1.\";\n                        sidValue -= 40;\n                    }\n                    else {\n                        result = \"2.\";\n                        sidValue -= 80;\n                    }\n                }\n                result += sidValue.toString();\n            }\n            else\n                result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n            isFirstSid: this.isFirstSid,\n        };\n    }\n}\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            if (this.value.length === 0)\n                sidBlock.isFirstSid = true;\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        let flag = false;\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            if (flag) {\n                const sidBlock = this.value[0];\n                let plus = 0;\n                switch (sidBlock.valueDec) {\n                    case 0:\n                        break;\n                    case 1:\n                        plus = 40;\n                        break;\n                    case 2:\n                        plus = 80;\n                        break;\n                    default:\n                        this.value = [];\n                        return;\n                }\n                const parsedSID = parseInt(sid, 10);\n                if (isNaN(parsedSID))\n                    return;\n                sidBlock.valueDec = parsedSID + plus;\n                flag = false;\n            }\n            else {\n                const sidBlock = new LocalSidValueBlock();\n                if (sid > Number.MAX_SAFE_INTEGER) {\n                    assertBigInt();\n                    const sidValue = BigInt(sid);\n                    sidBlock.valueBigInt = sidValue;\n                }\n                else {\n                    sidBlock.valueDec = parseInt(sid, 10);\n                    if (isNaN(sidBlock.valueDec))\n                        return;\n                }\n                if (!this.value.length) {\n                    sidBlock.isFirstSid = true;\n                    flag = true;\n                }\n                this.value.push(sidBlock);\n            }\n        } while (pos2 !== -1);\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                if (this.value[i].isFirstSid)\n                    result = `2.{${sidStr} - 80}`;\n                else\n                    result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++) {\n            object.sidArray.push(this.value[i].toJSON());\n        }\n        return object;\n    }\n}\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\nclass ObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 6;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$m = ObjectIdentifier;\n(() => {\n    typeStore.ObjectIdentifier = _a$m;\n})();\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ valueDec = 0, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (inputLength === 0)\n            return inputOffset;\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\n            return -1;\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++)\n            tempView[i] = this.valueHexView[i];\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView.buffer;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\n        else {\n            result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n}\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalRelativeSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, _writer) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            const sidBlock = new LocalRelativeSidValueBlock();\n            sidBlock.valueDec = parseInt(sid, 10);\n            if (isNaN(sidBlock.valueDec))\n                return true;\n            this.value.push(sidBlock);\n        } while (pos2 !== -1);\n        return true;\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++)\n            object.sidArray.push(this.value[i].toJSON());\n        return object;\n    }\n}\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\nclass RelativeObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 13;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$l = RelativeObjectIdentifier;\n(() => {\n    typeStore.RelativeObjectIdentifier = _a$l;\n})();\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\nclass Sequence extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 16;\n    }\n}\n_a$k = Sequence;\n(() => {\n    typeStore.Sequence = _a$k;\n})();\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\nclass Set extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 17;\n    }\n}\n_a$j = Set;\n(() => {\n    typeStore.Set = _a$j;\n})();\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = true;\n        this.value = EMPTY_STRING;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\n}\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters, LocalSimpleStringValueBlock);\n    }\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\n    }\n    fromString(inputString) {\n        const strLen = inputString.length;\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\n        for (let i = 0; i < strLen; i++)\n            view[i] = inputString.charCodeAt(i);\n        this.valueBlock.value = inputString;\n    }\n}\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n        try {\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\n        }\n        catch (ex) {\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\n        }\n    }\n    fromString(inputString) {\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\nclass Utf8String extends LocalUtf8StringValueBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 12;\n    }\n}\n_a$i = Utf8String;\n(() => {\n    typeStore.Utf8String = _a$i;\n})();\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\n    }\n    fromString(inputString) {\n        this.valueBlock.value = inputString;\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\n    }\n}\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\nclass BmpString extends LocalBmpStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 30;\n    }\n}\n_a$h = BmpString;\n(() => {\n    typeStore.BmpString = _a$h;\n})();\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\n        const valueView = new Uint8Array(copyBuffer);\n        for (let i = 0; i < valueView.length; i += 4) {\n            valueView[i] = valueView[i + 3];\n            valueView[i + 1] = valueView[i + 2];\n            valueView[i + 2] = 0x00;\n            valueView[i + 3] = 0x00;\n        }\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n    }\n    fromString(inputString) {\n        const strLength = inputString.length;\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\n        for (let i = 0; i < strLength; i++) {\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\n            const codeView = new Uint8Array(codeBuf);\n            if (codeView.length > 4)\n                continue;\n            const dif = 4 - codeView.length;\n            for (let j = (codeView.length - 1); j >= 0; j--)\n                valueHexView[i * 4 + j + dif] = codeView[j];\n        }\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\nclass UniversalString extends LocalUniversalStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 28;\n    }\n}\n_a$g = UniversalString;\n(() => {\n    typeStore.UniversalString = _a$g;\n})();\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\nclass NumericString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 18;\n    }\n}\n_a$f = NumericString;\n(() => {\n    typeStore.NumericString = _a$f;\n})();\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\nclass PrintableString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 19;\n    }\n}\n_a$e = PrintableString;\n(() => {\n    typeStore.PrintableString = _a$e;\n})();\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\nclass TeletexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 20;\n    }\n}\n_a$d = TeletexString;\n(() => {\n    typeStore.TeletexString = _a$d;\n})();\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\nclass VideotexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 21;\n    }\n}\n_a$c = VideotexString;\n(() => {\n    typeStore.VideotexString = _a$c;\n})();\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\nclass IA5String extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 22;\n    }\n}\n_a$b = IA5String;\n(() => {\n    typeStore.IA5String = _a$b;\n})();\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\nclass GraphicString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 25;\n    }\n}\n_a$a = GraphicString;\n(() => {\n    typeStore.GraphicString = _a$a;\n})();\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\nclass VisibleString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 26;\n    }\n}\n_a$9 = VisibleString;\n(() => {\n    typeStore.VisibleString = _a$9;\n})();\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\nclass GeneralString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 27;\n    }\n}\n_a$8 = GeneralString;\n(() => {\n    typeStore.GeneralString = _a$8;\n})();\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\nclass CharacterString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 29;\n    }\n}\n_a$7 = CharacterString;\n(() => {\n    typeStore.CharacterString = _a$7;\n})();\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\nclass UTCTime extends VisibleString {\n    constructor({ value, valueDate, ...parameters } = {}) {\n        super(parameters);\n        this.year = 0;\n        this.month = 0;\n        this.day = 0;\n        this.hour = 0;\n        this.minute = 0;\n        this.second = 0;\n        if (value) {\n            this.fromString(value);\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\n            for (let i = 0; i < value.length; i++)\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\n        }\n        if (valueDate) {\n            this.fromDate(valueDate);\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\n        }\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 23;\n    }\n    fromBuffer(inputBuffer) {\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\n    }\n    toBuffer() {\n        const str = this.toString();\n        const buffer = new ArrayBuffer(str.length);\n        const view = new Uint8Array(buffer);\n        for (let i = 0; i < str.length; i++)\n            view[i] = str.charCodeAt(i);\n        return buffer;\n    }\n    fromDate(inputDate) {\n        this.year = inputDate.getUTCFullYear();\n        this.month = inputDate.getUTCMonth() + 1;\n        this.day = inputDate.getUTCDate();\n        this.hour = inputDate.getUTCHours();\n        this.minute = inputDate.getUTCMinutes();\n        this.second = inputDate.getUTCSeconds();\n    }\n    toDate() {\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n    }\n    fromString(inputString) {\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n        const parserArray = parser.exec(inputString);\n        if (parserArray === null) {\n            this.error = \"Wrong input string for conversion\";\n            return;\n        }\n        const year = parseInt(parserArray[1], 10);\n        if (year >= 50)\n            this.year = 1900 + year;\n        else\n            this.year = 2000 + year;\n        this.month = parseInt(parserArray[2], 10);\n        this.day = parseInt(parserArray[3], 10);\n        this.hour = parseInt(parserArray[4], 10);\n        this.minute = parseInt(parserArray[5], 10);\n        this.second = parseInt(parserArray[6], 10);\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = new Array(7);\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n            outputArray[1] = pvutils.padNumber(this.month, 2);\n            outputArray[2] = pvutils.padNumber(this.day, 2);\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\n            outputArray[5] = pvutils.padNumber(this.second, 2);\n            outputArray[6] = \"Z\";\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            year: this.year,\n            month: this.month,\n            day: this.day,\n            hour: this.hour,\n            minute: this.minute,\n            second: this.second,\n        };\n    }\n}\n_a$6 = UTCTime;\n(() => {\n    typeStore.UTCTime = _a$6;\n})();\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\nclass GeneralizedTime extends UTCTime {\n    constructor(parameters = {}) {\n        var _b;\n        super(parameters);\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 24;\n    }\n    fromDate(inputDate) {\n        super.fromDate(inputDate);\n        this.millisecond = inputDate.getUTCMilliseconds();\n    }\n    toDate() {\n        const utcDate = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);\n        return (new Date(utcDate));\n    }\n    fromString(inputString) {\n        let isUTC = false;\n        let timeString = \"\";\n        let dateTimeString = \"\";\n        let fractionPart = 0;\n        let parser;\n        let hourDifference = 0;\n        let minuteDifference = 0;\n        if (inputString[inputString.length - 1] === \"Z\") {\n            timeString = inputString.substring(0, inputString.length - 1);\n            isUTC = true;\n        }\n        else {\n            const number = new Number(inputString[inputString.length - 1]);\n            if (isNaN(number.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            timeString = inputString;\n        }\n        if (isUTC) {\n            if (timeString.indexOf(\"+\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n            if (timeString.indexOf(\"-\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        else {\n            let multiplier = 1;\n            let differencePosition = timeString.indexOf(\"+\");\n            let differenceString = \"\";\n            if (differencePosition === -1) {\n                differencePosition = timeString.indexOf(\"-\");\n                multiplier = -1;\n            }\n            if (differencePosition !== -1) {\n                differenceString = timeString.substring(differencePosition + 1);\n                timeString = timeString.substring(0, differencePosition);\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\n                    throw new Error(\"Wrong input string for conversion\");\n                let number = parseInt(differenceString.substring(0, 2), 10);\n                if (isNaN(number.valueOf()))\n                    throw new Error(\"Wrong input string for conversion\");\n                hourDifference = multiplier * number;\n                if (differenceString.length === 4) {\n                    number = parseInt(differenceString.substring(2, 4), 10);\n                    if (isNaN(number.valueOf()))\n                        throw new Error(\"Wrong input string for conversion\");\n                    minuteDifference = multiplier * number;\n                }\n            }\n        }\n        let fractionPointPosition = timeString.indexOf(\".\");\n        if (fractionPointPosition === -1)\n            fractionPointPosition = timeString.indexOf(\",\");\n        if (fractionPointPosition !== -1) {\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\n            if (isNaN(fractionPartCheck.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            fractionPart = fractionPartCheck.valueOf();\n            dateTimeString = timeString.substring(0, fractionPointPosition);\n        }\n        else\n            dateTimeString = timeString;\n        switch (true) {\n            case (dateTimeString.length === 8):\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1)\n                    throw new Error(\"Wrong input string for conversion\");\n                break;\n            case (dateTimeString.length === 10):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.minute = Math.floor(fractionResult);\n                    fractionResult = 60 * (fractionResult - this.minute);\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 12):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 14):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    const fractionResult = 1000 * fractionPart;\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            default:\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        const parserArray = parser.exec(dateTimeString);\n        if (parserArray === null)\n            throw new Error(\"Wrong input string for conversion\");\n        for (let j = 1; j < parserArray.length; j++) {\n            switch (j) {\n                case 1:\n                    this.year = parseInt(parserArray[j], 10);\n                    break;\n                case 2:\n                    this.month = parseInt(parserArray[j], 10);\n                    break;\n                case 3:\n                    this.day = parseInt(parserArray[j], 10);\n                    break;\n                case 4:\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\n                    break;\n                case 5:\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n                    break;\n                case 6:\n                    this.second = parseInt(parserArray[j], 10);\n                    break;\n                default:\n                    throw new Error(\"Wrong input string for conversion\");\n            }\n        }\n        if (isUTC === false) {\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n            this.year = tempDate.getUTCFullYear();\n            this.month = tempDate.getUTCMonth();\n            this.day = tempDate.getUTCDay();\n            this.hour = tempDate.getUTCHours();\n            this.minute = tempDate.getUTCMinutes();\n            this.second = tempDate.getUTCSeconds();\n            this.millisecond = tempDate.getUTCMilliseconds();\n        }\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = [];\n            outputArray.push(pvutils.padNumber(this.year, 4));\n            outputArray.push(pvutils.padNumber(this.month, 2));\n            outputArray.push(pvutils.padNumber(this.day, 2));\n            outputArray.push(pvutils.padNumber(this.hour, 2));\n            outputArray.push(pvutils.padNumber(this.minute, 2));\n            outputArray.push(pvutils.padNumber(this.second, 2));\n            if (this.millisecond !== 0) {\n                outputArray.push(\".\");\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\n            }\n            outputArray.push(\"Z\");\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            millisecond: this.millisecond,\n        };\n    }\n}\n_a$5 = GeneralizedTime;\n(() => {\n    typeStore.GeneralizedTime = _a$5;\n})();\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\nclass DATE extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 31;\n    }\n}\n_a$4 = DATE;\n(() => {\n    typeStore.DATE = _a$4;\n})();\nDATE.NAME = \"DATE\";\n\nvar _a$3;\nclass TimeOfDay extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 32;\n    }\n}\n_a$3 = TimeOfDay;\n(() => {\n    typeStore.TimeOfDay = _a$3;\n})();\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\nclass DateTime extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 33;\n    }\n}\n_a$2 = DateTime;\n(() => {\n    typeStore.DateTime = _a$2;\n})();\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\nclass Duration extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 34;\n    }\n}\n_a$1 = Duration;\n(() => {\n    typeStore.Duration = _a$1;\n})();\nDuration.NAME = \"Duration\";\n\nvar _a;\nclass TIME extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 14;\n    }\n}\n_a = TIME;\n(() => {\n    typeStore.TIME = _a;\n})();\nTIME.NAME = \"TIME\";\n\nclass Any {\n    constructor({ name = EMPTY_STRING, optional = false } = {}) {\n        this.name = name;\n        this.optional = optional;\n    }\n}\n\nclass Choice extends Any {\n    constructor({ value = [], ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n    }\n}\n\nclass Repeated extends Any {\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.local = local;\n    }\n}\n\nclass RawData {\n    get data() {\n        return this.dataView.slice().buffer;\n    }\n    set data(value) {\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\n    }\n    constructor({ data = EMPTY_VIEW } = {}) {\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const endLength = inputOffset + inputLength;\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\n        return endLength;\n    }\n    toBER(_sizeOnly) {\n        return this.dataView.slice().buffer;\n    }\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\n    if (inputSchema instanceof Choice) {\n        for (const element of inputSchema.value) {\n            const result = compareSchema(root, inputData, element);\n            if (result.verified) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n        }\n        {\n            const _result = {\n                verified: false,\n                result: { error: \"Wrong values for Choice type\" },\n            };\n            if (inputSchema.hasOwnProperty(NAME))\n                _result.name = inputSchema.name;\n            return _result;\n        }\n    }\n    if (inputSchema instanceof Any) {\n        if (inputSchema.hasOwnProperty(NAME))\n            root[inputSchema.name] = inputData;\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if ((root instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong root object\" },\n        };\n    }\n    if ((inputData instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 data\" },\n        };\n    }\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((ID_BLOCK in inputSchema) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((FROM_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((TO_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    const encodedId = inputSchema.idBlock.toBER(false);\n    if (encodedId.byteLength === 0) {\n        return {\n            verified: false,\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" },\n        };\n    }\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n    if (decodedOffset === -1) {\n        return {\n            verified: false,\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly) {\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\n            return {\n                verified: false,\n                result: { error: \"Wrong ASN.1 schema\" },\n            };\n        }\n        const schemaView = inputSchema.idBlock.valueHexView;\n        const asn1View = inputData.idBlock.valueHexView;\n        if (schemaView.length !== asn1View.length) {\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < schemaView.length; i++) {\n            if (schemaView[i] !== asn1View[1]) {\n                return {\n                    verified: false,\n                    result: root,\n                };\n            }\n        }\n    }\n    if (inputSchema.name) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n        if (inputSchema.name)\n            root[inputSchema.name] = inputData;\n    }\n    if (inputSchema instanceof typeStore.Constructed) {\n        let admission = 0;\n        let result = {\n            verified: false,\n            result: { error: \"Unknown error\" },\n        };\n        let maxLength = inputSchema.valueBlock.value.length;\n        if (maxLength > 0) {\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                maxLength = inputData.valueBlock.value.length;\n            }\n        }\n        if (maxLength === 0) {\n            return {\n                verified: true,\n                result: root,\n            };\n        }\n        if ((inputData.valueBlock.value.length === 0)\n            && (inputSchema.valueBlock.value.length !== 0)) {\n            let _optional = true;\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n            if (_optional) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name)\n                    delete root[inputSchema.name];\n            }\n            root.error = \"Inconsistent object length\";\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < maxLength; i++) {\n            if ((i - admission) >= inputData.valueBlock.value.length) {\n                if (inputSchema.valueBlock.value[i].optional === false) {\n                    const _result = {\n                        verified: false,\n                        result: root,\n                    };\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\n                    if (inputSchema.name) {\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                        if (inputSchema.name) {\n                            delete root[inputSchema.name];\n                            _result.name = inputSchema.name;\n                        }\n                    }\n                    return _result;\n                }\n            }\n            else {\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[0].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\n                        let arrayRoot = {};\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\n                            arrayRoot = inputData;\n                        else\n                            arrayRoot = root;\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n                    }\n                }\n                else {\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[i].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        if (result.verified === false) {\n            const _result = {\n                verified: false,\n                result: root,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if (inputSchema.primitiveSchema\n        && (VALUE_HEX_VIEW in inputData.valueBlock)) {\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\n        if (asn1.offset === -1) {\n            const _result = {\n                verified: false,\n                result: asn1.result,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n    }\n    return {\n        verified: true,\n        result: root,\n    };\n}\nfunction verifySchema(inputBuffer, inputSchema) {\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema type\" },\n        };\n    }\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\n    if (asn1.offset === -1) {\n        return {\n            verified: false,\n            result: asn1.result,\n        };\n    }\n    return compareSchema(asn1.result, asn1.result, inputSchema);\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n"],
  "mappings": "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",
  "names": ["_a", "init_index_es", "retView", "tempBufferView"]
}

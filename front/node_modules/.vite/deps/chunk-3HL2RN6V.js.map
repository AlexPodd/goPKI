{
  "version": 3,
  "sources": ["../../pvutils/build/utils.es.js"],
  "sourcesContent": ["/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n"],
  "mappings": "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",
  "names": ["retBuf", "retView", "i"]
}

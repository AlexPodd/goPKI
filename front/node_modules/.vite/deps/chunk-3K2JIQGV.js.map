{
  "version": 3,
  "sources": ["../../bytestreamjs/build/mjs/byte_stream.js", "../../bytestreamjs/build/mjs/seq_stream.js", "../../bytestreamjs/build/mjs/helpers.js", "../../bytestreamjs/build/mjs/bit.js", "../../bytestreamjs/build/mjs/bit_stream.js", "../../bytestreamjs/build/mjs/seq_bit_stream.js", "../../bytestreamjs/build/mjs/index.js"],
  "sourcesContent": ["export class ByteStream {\n    constructor(parameters = {}) {\n        if (\"view\" in parameters) {\n            this.fromUint8Array(parameters.view);\n        }\n        else if (\"buffer\" in parameters) {\n            this.fromArrayBuffer(parameters.buffer);\n        }\n        else if (\"string\" in parameters) {\n            this.fromString(parameters.string);\n        }\n        else if (\"hexstring\" in parameters) {\n            this.fromHexString(parameters.hexstring);\n        }\n        else {\n            if (\"length\" in parameters && parameters.length > 0) {\n                this.length = parameters.length;\n                if (parameters.stub) {\n                    for (let i = 0; i < this._view.length; i++) {\n                        this._view[i] = parameters.stub;\n                    }\n                }\n            }\n            else {\n                this.length = 0;\n            }\n        }\n    }\n    set buffer(value) {\n        this._buffer = value;\n        this._view = new Uint8Array(this._buffer);\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    set view(value) {\n        this._buffer = new ArrayBuffer(value.length);\n        this._view = new Uint8Array(this._buffer);\n        this._view.set(value);\n    }\n    get view() {\n        return this._view;\n    }\n    get length() {\n        return this.view.byteLength;\n    }\n    set length(value) {\n        this._buffer = new ArrayBuffer(value);\n        this._view = new Uint8Array(this._buffer);\n    }\n    clear() {\n        this._buffer = new ArrayBuffer(0);\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromArrayBuffer(array) {\n        this._buffer = array;\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.length = stringLength;\n        for (let i = 0; i < stringLength; i++)\n            this.view[i] = string.charCodeAt(i);\n    }\n    toString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++)\n            result += String.fromCharCode(this.view[i]);\n        return result;\n    }\n    fromHexString(hexString) {\n        const stringLength = hexString.length;\n        this.buffer = new ArrayBuffer(stringLength >> 1);\n        this.view = new Uint8Array(this.buffer);\n        const hexMap = new Map();\n        hexMap.set(\"0\", 0x00);\n        hexMap.set(\"1\", 0x01);\n        hexMap.set(\"2\", 0x02);\n        hexMap.set(\"3\", 0x03);\n        hexMap.set(\"4\", 0x04);\n        hexMap.set(\"5\", 0x05);\n        hexMap.set(\"6\", 0x06);\n        hexMap.set(\"7\", 0x07);\n        hexMap.set(\"8\", 0x08);\n        hexMap.set(\"9\", 0x09);\n        hexMap.set(\"A\", 0x0A);\n        hexMap.set(\"a\", 0x0A);\n        hexMap.set(\"B\", 0x0B);\n        hexMap.set(\"b\", 0x0B);\n        hexMap.set(\"C\", 0x0C);\n        hexMap.set(\"c\", 0x0C);\n        hexMap.set(\"D\", 0x0D);\n        hexMap.set(\"d\", 0x0D);\n        hexMap.set(\"E\", 0x0E);\n        hexMap.set(\"e\", 0x0E);\n        hexMap.set(\"F\", 0x0F);\n        hexMap.set(\"f\", 0x0F);\n        let j = 0;\n        let temp = 0x00;\n        for (let i = 0; i < stringLength; i++) {\n            if (!(i % 2)) {\n                temp = hexMap.get(hexString.charAt(i)) << 4;\n            }\n            else {\n                temp |= hexMap.get(hexString.charAt(i));\n                this.view[j] = temp;\n                j++;\n            }\n        }\n    }\n    toHexString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++) {\n            const str = this.view[i].toString(16).toUpperCase();\n            result = result + ((str.length == 1) ? \"0\" : \"\") + str;\n        }\n        return result;\n    }\n    copy(start = 0, length = (this.length - start)) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, start + length)\n        });\n        return stream;\n    }\n    slice(start = 0, end = this.length) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, end),\n        });\n        return stream;\n    }\n    realloc(size) {\n        const buffer = new ArrayBuffer(size);\n        const view = new Uint8Array(buffer);\n        if (size > this._view.length)\n            view.set(this._view);\n        else {\n            view.set(new Uint8Array(this._buffer, 0, size));\n        }\n        this._buffer = buffer;\n        this._view = new Uint8Array(this._buffer);\n    }\n    append(stream) {\n        const initialSize = this.length;\n        const streamViewLength = stream.length;\n        const subarrayView = stream._view.subarray();\n        this.realloc(initialSize + streamViewLength);\n        this._view.set(subarrayView, initialSize);\n    }\n    insert(stream, start = 0, length = (this.length - start)) {\n        if (start > (this.length - 1))\n            return false;\n        if (length > (this.length - start)) {\n            length = this.length - start;\n        }\n        if (length > stream.length) {\n            length = stream.length;\n        }\n        if (length == stream.length)\n            this._view.set(stream._view, start);\n        else {\n            this._view.set(stream._view.subarray(0, length), start);\n        }\n        return true;\n    }\n    isEqual(stream) {\n        if (this.length != stream.length)\n            return false;\n        for (let i = 0; i < stream.length; i++) {\n            if (this.view[i] != stream.view[i])\n                return false;\n        }\n        return true;\n    }\n    isEqualView(view) {\n        if (view.length != this.view.length)\n            return false;\n        for (let i = 0; i < view.length; i++) {\n            if (this.view[i] != view[i])\n                return false;\n        }\n        return true;\n    }\n    findPattern(pattern, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = [];\n        for (let i = 0; i < patternLength; i++)\n            patternArray.push(pattern.view[i]);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = (backward) ? (start - patternLength - i) : (start + i);\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                return (backward) ? (start - patternLength - i) : (start + patternLength + i);\n            }\n        }\n        return (-1);\n    }\n    findFirstIn(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            id: (-1),\n            position: (backward) ? 0 : (start + length),\n            length: 0\n        };\n        for (let i = 0; i < patterns.length; i++) {\n            const position = this.findPattern(patterns[i], start, length, backward);\n            if (position != (-1)) {\n                let valid = false;\n                const patternLength = patterns[i].length;\n                if (backward) {\n                    if ((position - patternLength) >= (result.position - result.length))\n                        valid = true;\n                }\n                else {\n                    if ((position - patternLength) <= (result.position - result.length))\n                        valid = true;\n                }\n                if (valid) {\n                    result.position = position;\n                    result.id = i;\n                    result.length = patternLength;\n                }\n            }\n        }\n        return result;\n    }\n    findAllIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            id: (-1),\n            position: start\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstIn(patterns, patternFound.position, length);\n            if (patternFound.id == (-1)) {\n                break;\n            }\n            length -= (patternFound.position - position);\n            result.push({\n                id: patternFound.id,\n                position: patternFound.position\n            });\n        } while (true);\n        return result;\n    }\n    findAllPatternIn(pattern, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = Array.from(pattern.view);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = start + i;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                result.push(start + patternLength + i);\n                i += (patternLength - 1);\n            }\n        }\n        return result;\n    }\n    findFirstNotIn(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: 0\n            },\n            value: new ByteStream()\n        };\n        let currentLength = length;\n        while (currentLength > 0) {\n            result.right = this.findFirstIn(patterns, (backward) ? (start - length + currentLength) : (start + length - currentLength), currentLength, backward);\n            if (result.right.id == (-1)) {\n                length = currentLength;\n                if (backward) {\n                    start -= length;\n                }\n                else {\n                    start = result.left.position;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            if (result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].length) : (result.left.position + patterns[result.right.id].length))) {\n                if (backward) {\n                    start = result.right.position + patterns[result.right.id].length;\n                    length = result.left.position - result.right.position - patterns[result.right.id].length;\n                }\n                else {\n                    start = result.left.position;\n                    length = result.right.position - result.left.position - patterns[result.right.id].length;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            result.left = result.right;\n            currentLength -= patterns[result.right.id].length;\n        }\n        if (backward) {\n            const temp = result.right;\n            result.right = result.left;\n            result.left = temp;\n        }\n        return result;\n    }\n    findAllNotIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: start\n            },\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.right.position;\n            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\n            length -= (patternFound.right.position - position);\n            result.push({\n                left: {\n                    id: patternFound.left.id,\n                    position: patternFound.left.position\n                },\n                right: {\n                    id: patternFound.right.id,\n                    position: patternFound.right.position\n                },\n                value: patternFound.value\n            });\n        } while (patternFound.right.id != (-1));\n        return result;\n    }\n    findFirstSequence(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const firstIn = this.skipNotPatterns(patterns, start, length, backward);\n        if (firstIn == (-1)) {\n            return {\n                position: (-1),\n                value: new ByteStream()\n            };\n        }\n        const firstNotIn = this.skipPatterns(patterns, firstIn, length - ((backward) ? (start - firstIn) : (firstIn - start)), backward);\n        if (backward) {\n            start = firstNotIn;\n            length = (firstIn - firstNotIn);\n        }\n        else {\n            start = firstIn;\n            length = (firstNotIn - firstIn);\n        }\n        const value = new ByteStream({\n            buffer: this._buffer.slice(start, start + length),\n        });\n        return {\n            position: firstNotIn,\n            value\n        };\n    }\n    findAllSequences(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            position: start,\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstSequence(patterns, patternFound.position, length);\n            if (patternFound.position != (-1)) {\n                length -= (patternFound.position - position);\n                result.push({\n                    position: patternFound.position,\n                    value: patternFound.value,\n                });\n            }\n        } while (patternFound.position != (-1));\n        return result;\n    }\n    findPairedPatterns(leftPattern, rightPattern, start_, length_) {\n        const result = [];\n        if (leftPattern.isEqual(rightPattern))\n            return result;\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);\n        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {\n            return result;\n        }\n        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);\n        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {\n            return result;\n        }\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0] == rightPatterns[0]) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left - b.left));\n        return result;\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\n        if (leftPatterns.length == 0)\n            return result;\n        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);\n        if (rightPatterns.length == 0)\n            return result;\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0].position == rightPatterns[0].position) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left.position - b.left.position));\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {\n        let result = [];\n        let i;\n        const output = {\n            status: (-1),\n            searchPatternPositions: [],\n            replacePatternPositions: []\n        };\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        if (findAllResult == null) {\n            result = this.findAllIn([searchPattern], start, length);\n            if (result.length == 0) {\n                return output;\n            }\n        }\n        else {\n            result = findAllResult;\n        }\n        output.searchPatternPositions.push(...Array.from(result, element => element.position));\n        const patternDifference = searchPattern.length - replacePattern.length;\n        const changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\n        const changedView = new Uint8Array(changedBuffer);\n        changedView.set(new Uint8Array(this.buffer, 0, start));\n        for (i = 0; i < result.length; i++) {\n            const currentPosition = (i == 0) ? start : result[i - 1].position;\n            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);\n            changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);\n            output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);\n        }\n        i--;\n        changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);\n        this.buffer = changedBuffer;\n        this.view = new Uint8Array(this.buffer);\n        output.status = 1;\n        return output;\n    }\n    skipPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = start;\n        for (let k = 0; k < patterns.length; k++) {\n            const patternLength = patterns[k].length;\n            const equalStart = (backward) ? (result - patternLength) : (result);\n            let equal = true;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patterns[k].view[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                k = (-1);\n                if (backward) {\n                    result -= patternLength;\n                    if (result <= 0)\n                        return result;\n                }\n                else {\n                    result += patternLength;\n                    if (result >= (start + length))\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n    skipNotPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = (-1);\n        for (let i = 0; i < length; i++) {\n            for (let k = 0; k < patterns.length; k++) {\n                const patternLength = patterns[k].length;\n                const equalStart = (backward) ? (start - i - patternLength) : (start + i);\n                let equal = true;\n                for (let j = 0; j < patternLength; j++) {\n                    if (this.view[j + equalStart] != patterns[k].view[j]) {\n                        equal = false;\n                        break;\n                    }\n                }\n                if (equal) {\n                    result = (backward) ? (start - i) : (start + i);\n                    break;\n                }\n            }\n            if (result != (-1)) {\n                break;\n            }\n        }\n        return result;\n    }\n    prepareFindParameters(start = null, length = null, backward = false) {\n        if (start === null) {\n            start = (backward) ? this.length : 0;\n        }\n        if (start > this.length) {\n            start = this.length;\n        }\n        if (backward) {\n            if (length === null) {\n                length = start;\n            }\n            if (length > start) {\n                length = start;\n            }\n        }\n        else {\n            if (length === null) {\n                length = this.length - start;\n            }\n            if (length > (this.length - start)) {\n                length = this.length - start;\n            }\n        }\n        return { start, length, backward };\n    }\n}\n", "import { ByteStream } from \"./byte_stream\";\nconst pow2_24 = 16777216;\nexport class SeqStream {\n    constructor(parameters = {}) {\n        this._stream = new ByteStream();\n        this._length = 0;\n        this._start = 0;\n        this.backward = false;\n        this.appendBlock = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        if (\"view\" in parameters) {\n            this.stream = new ByteStream({ view: parameters.view });\n        }\n        else if (\"buffer\" in parameters) {\n            this.stream = new ByteStream({ buffer: parameters.buffer });\n        }\n        else if (\"string\" in parameters) {\n            this.stream = new ByteStream({ string: parameters.string });\n        }\n        else if (\"hexstring\" in parameters) {\n            this.stream = new ByteStream({ hexstring: parameters.hexstring });\n        }\n        else if (\"stream\" in parameters) {\n            this.stream = parameters.stream.slice();\n        }\n        else {\n            this.stream = new ByteStream();\n        }\n        if (\"backward\" in parameters && parameters.backward) {\n            this.backward = parameters.backward;\n            this._start = this.stream.length;\n        }\n        if (\"length\" in parameters && parameters.length > 0) {\n            this._length = parameters.length;\n        }\n        if (\"start\" in parameters && parameters.start && parameters.start > 0) {\n            this._start = parameters.start;\n        }\n        if (\"appendBlock\" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {\n            this.appendBlock = parameters.appendBlock;\n        }\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.length;\n        this.prevStart = this._start;\n        this._start = 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set length(value) {\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        if (this.appendBlock) {\n            return this.start;\n        }\n        return this._length;\n    }\n    set start(value) {\n        if (value > this.stream.length)\n            return;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n        this._length -= (this.backward) ? (this._start - value) : (value - this._start);\n        this._start = value;\n    }\n    get start() {\n        return this._start;\n    }\n    get buffer() {\n        return this._stream.buffer.slice(0, this._length);\n    }\n    resetPosition() {\n        this._start = this.prevStart;\n        this._length = this.prevLength;\n    }\n    findPattern(pattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\n        if (result == (-1))\n            return result;\n        if (this.backward) {\n            if (result < (this.start - pattern.length - gap)) {\n                return (-1);\n            }\n        }\n        else {\n            if (result > (this.start + pattern.length + gap)) {\n                return (-1);\n            }\n        }\n        this.start = result;\n        return result;\n    }\n    findFirstIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\n        if (result.id == (-1))\n            return result;\n        if (this.backward) {\n            if (result.position < (this.start - patterns[result.id].length - gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        else {\n            if (result.position > (this.start + patterns[result.id].length + gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllIn(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllIn(patterns, start, this.length);\n    }\n    findFirstNotIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this._length)) {\n            gap = this._length;\n        }\n        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\n        if ((result.left.id == (-1)) && (result.right.id == (-1))) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.right.id != (-1)) {\n                if (result.right.position < (this._start - patterns[result.right.id].length - gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        else {\n            if (result.left.id != (-1)) {\n                if (result.left.position > (this._start + patterns[result.left.id].length + gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        if (this.backward) {\n            if (result.left.id == (-1)) {\n                this.start = 0;\n            }\n            else {\n                this.start = result.left.position;\n            }\n        }\n        else {\n            if (result.right.id == (-1)) {\n                this.start = (this._start + this._length);\n            }\n            else {\n                this.start = result.right.position;\n            }\n        }\n        return result;\n    }\n    findAllNotIn(patterns) {\n        const start = (this.backward) ? (this._start - this._length) : this._start;\n        return this._stream.findAllNotIn(patterns, start, this._length);\n    }\n    findFirstSequence(patterns, length = null, gap = null) {\n        if ((length == null) || (length > this._length)) {\n            length = this._length;\n        }\n        if ((gap == null) || (gap > length)) {\n            gap = length;\n        }\n        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\n        if (result.value.length == 0) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.position < (this._start - result.value.length - gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        else {\n            if (result.position > (this._start + result.value.length + gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllSequences(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllSequences(patterns, start, this.length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right < (this.start - rightPattern.length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left > (this.start + leftPattern.length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    findPairedArrays(leftPatterns, rightPatterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right.position < (this.start - rightPatterns[result[0].right.id].length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left.position > (this.start + leftPatterns[result[0].left.id].length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\n    }\n    skipPatterns(patterns) {\n        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\n        this.start = result;\n        return result;\n    }\n    skipNotPatterns(patterns) {\n        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\n        if (result == (-1))\n            return (-1);\n        this.start = result;\n        return result;\n    }\n    append(stream) {\n        this.beforeAppend(stream.length);\n        this._stream.view.set(stream.view, this._start);\n        this._length += (stream.length * 2);\n        this.start = (this._start + stream.length);\n        this.prevLength -= (stream.length * 2);\n    }\n    appendView(view) {\n        this.beforeAppend(view.length);\n        this._stream.view.set(view, this._start);\n        this._length += (view.length * 2);\n        this.start = (this._start + view.length);\n        this.prevLength -= (view.length * 2);\n    }\n    appendChar(char) {\n        this.beforeAppend(1);\n        this._stream.view[this._start] = char;\n        this._length += 2;\n        this.start = (this._start + 1);\n        this.prevLength -= 2;\n    }\n    appendUint16(number) {\n        this.beforeAppend(2);\n        const value = new Uint16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this.stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = this._start + 2;\n        this.prevLength -= 4;\n    }\n    appendUint24(number) {\n        this.beforeAppend(3);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[2];\n        this._stream.view[this._start + 1] = view[1];\n        this._stream.view[this._start + 2] = view[0];\n        this._length += 6;\n        this.start = (this._start + 3);\n        this.prevLength -= 6;\n    }\n    appendUint32(number) {\n        this.beforeAppend(4);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    appendInt16(number) {\n        this.beforeAppend(2);\n        const value = new Int16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = (this._start + 2);\n        this.prevLength -= 4;\n    }\n    appendInt32(number) {\n        this.beforeAppend(4);\n        const value = new Int32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    getBlock(size, changeLength = true) {\n        if (this._length <= 0) {\n            return new Uint8Array(0);\n        }\n        if (this._length < size) {\n            size = this._length;\n        }\n        let result;\n        if (this.backward) {\n            const view = this._stream.view.subarray(this._length - size, this._length);\n            result = new Uint8Array(size);\n            for (let i = 0; i < size; i++) {\n                result[size - 1 - i] = view[i];\n            }\n        }\n        else {\n            result = this._stream.view.subarray(this._start, this._start + size);\n        }\n        if (changeLength) {\n            this.start += ((this.backward) ? ((-1) * size) : size);\n        }\n        return result;\n    }\n    getUint16(changeLength = true) {\n        const block = this.getBlock(2, changeLength);\n        if (block.length < 2)\n            return 0;\n        return (block[0] << 8) | block[1];\n    }\n    getInt16(changeLength = true) {\n        const num = this.getUint16(changeLength);\n        const negative = 0x8000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    getUint24(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 3)\n            return 0;\n        return (block[0] << 16) |\n            (block[1] << 8) |\n            block[2];\n    }\n    getUint32(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 4)\n            return 0;\n        return (block[0] * pow2_24) +\n            (block[1] << 16) +\n            (block[2] << 8) +\n            block[3];\n    }\n    getInt32(changeLength = true) {\n        const num = this.getUint32(changeLength);\n        const negative = 0x80000000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    beforeAppend(size) {\n        if ((this._start + size) > this._stream.length) {\n            if (size > this.appendBlock) {\n                this.appendBlock = size + SeqStream.APPEND_BLOCK;\n            }\n            this._stream.realloc(this._stream.length + this.appendBlock);\n        }\n    }\n}\nSeqStream.APPEND_BLOCK = 1000;\n", "export function parseByteMap(stream, map, elements, start = null, length = null) {\n    if (start === null) {\n        start = 0;\n    }\n    if (start > (stream.length - 1)) {\n        return [];\n    }\n    if (length === null) {\n        length = stream.length - start;\n    }\n    if (length > (stream.length - start)) {\n        length = stream.length - start;\n    }\n    let dataView;\n    if ((start == 0) && (length == stream.length)) {\n        dataView = stream.view;\n    }\n    else {\n        dataView = new Uint8Array(stream.buffer, start, length);\n    }\n    const resultArray = new Array(elements);\n    let elementsCount = 0;\n    let count = 0;\n    const mapLength = map.length;\n    while (count < length) {\n        let structureLength = 0;\n        resultArray[elementsCount] = {};\n        for (let i = 0; i < mapLength; i++) {\n            if (map[i].maxlength == 0) {\n                if (\"defaultValue\" in map[i]) {\n                    (resultArray[elementsCount])[map[i].name] = map[i].defaultValue;\n                }\n                continue;\n            }\n            const array = new Uint8Array(map[i].maxlength);\n            for (let j = 0; j < map[i].maxlength; j++) {\n                array[j] = dataView[count++];\n            }\n            const result = (map[i].func)(array);\n            if (result.status == (-1)) {\n                if (resultArray.length == 1) {\n                    return [];\n                }\n                return resultArray.slice(0, resultArray.length - 1);\n            }\n            if (map[i].type != \"check\") {\n                (resultArray[elementsCount])[map[i].name] = result.value;\n            }\n            count -= (map[i].maxlength - result.length);\n            structureLength += result.length;\n        }\n        (resultArray[elementsCount++]).structureLength = structureLength;\n    }\n    return resultArray;\n}\n", "export const bitsToStringArray = [\n    \"00000000\", \"00000001\", \"00000010\",\n    \"00000011\", \"00000100\", \"00000101\",\n    \"00000110\", \"00000111\", \"00001000\",\n    \"00001001\", \"00001010\", \"00001011\",\n    \"00001100\", \"00001101\", \"00001110\",\n    \"00001111\", \"00010000\", \"00010001\",\n    \"00010010\", \"00010011\", \"00010100\",\n    \"00010101\", \"00010110\", \"00010111\",\n    \"00011000\", \"00011001\", \"00011010\",\n    \"00011011\", \"00011100\", \"00011101\",\n    \"00011110\", \"00011111\", \"00100000\",\n    \"00100001\", \"00100010\", \"00100011\",\n    \"00100100\", \"00100101\", \"00100110\",\n    \"00100111\", \"00101000\", \"00101001\",\n    \"00101010\", \"00101011\", \"00101100\",\n    \"00101101\", \"00101110\", \"00101111\",\n    \"00110000\", \"00110001\", \"00110010\",\n    \"00110011\", \"00110100\", \"00110101\",\n    \"00110110\", \"00110111\", \"00111000\",\n    \"00111001\", \"00111010\", \"00111011\",\n    \"00111100\", \"00111101\", \"00111110\",\n    \"00111111\", \"01000000\", \"01000001\",\n    \"01000010\", \"01000011\", \"01000100\",\n    \"01000101\", \"01000110\", \"01000111\",\n    \"01001000\", \"01001001\", \"01001010\",\n    \"01001011\", \"01001100\", \"01001101\",\n    \"01001110\", \"01001111\", \"01010000\",\n    \"01010001\", \"01010010\", \"01010011\",\n    \"01010100\", \"01010101\", \"01010110\",\n    \"01010111\", \"01011000\", \"01011001\",\n    \"01011010\", \"01011011\", \"01011100\",\n    \"01011101\", \"01011110\", \"01011111\",\n    \"01100000\", \"01100001\", \"01100010\",\n    \"01100011\", \"01100100\", \"01100101\",\n    \"01100110\", \"01100111\", \"01101000\",\n    \"01101001\", \"01101010\", \"01101011\",\n    \"01101100\", \"01101101\", \"01101110\",\n    \"01101111\", \"01110000\", \"01110001\",\n    \"01110010\", \"01110011\", \"01110100\",\n    \"01110101\", \"01110110\", \"01110111\",\n    \"01111000\", \"01111001\", \"01111010\",\n    \"01111011\", \"01111100\", \"01111101\",\n    \"01111110\", \"01111111\", \"10000000\",\n    \"10000001\", \"10000010\", \"10000011\",\n    \"10000100\", \"10000101\", \"10000110\",\n    \"10000111\", \"10001000\", \"10001001\",\n    \"10001010\", \"10001011\", \"10001100\",\n    \"10001101\", \"10001110\", \"10001111\",\n    \"10010000\", \"10010001\", \"10010010\",\n    \"10010011\", \"10010100\", \"10010101\",\n    \"10010110\", \"10010111\", \"10011000\",\n    \"10011001\", \"10011010\", \"10011011\",\n    \"10011100\", \"10011101\", \"10011110\",\n    \"10011111\", \"10100000\", \"10100001\",\n    \"10100010\", \"10100011\", \"10100100\",\n    \"10100101\", \"10100110\", \"10100111\",\n    \"10101000\", \"10101001\", \"10101010\",\n    \"10101011\", \"10101100\", \"10101101\",\n    \"10101110\", \"10101111\", \"10110000\",\n    \"10110001\", \"10110010\", \"10110011\",\n    \"10110100\", \"10110101\", \"10110110\",\n    \"10110111\", \"10111000\", \"10111001\",\n    \"10111010\", \"10111011\", \"10111100\",\n    \"10111101\", \"10111110\", \"10111111\",\n    \"11000000\", \"11000001\", \"11000010\",\n    \"11000011\", \"11000100\", \"11000101\",\n    \"11000110\", \"11000111\", \"11001000\",\n    \"11001001\", \"11001010\", \"11001011\",\n    \"11001100\", \"11001101\", \"11001110\",\n    \"11001111\", \"11010000\", \"11010001\",\n    \"11010010\", \"11010011\", \"11010100\",\n    \"11010101\", \"11010110\", \"11010111\",\n    \"11011000\", \"11011001\", \"11011010\",\n    \"11011011\", \"11011100\", \"11011101\",\n    \"11011110\", \"11011111\", \"11100000\",\n    \"11100001\", \"11100010\", \"11100011\",\n    \"11100100\", \"11100101\", \"11100110\",\n    \"11100111\", \"11101000\", \"11101001\",\n    \"11101010\", \"11101011\", \"11101100\",\n    \"11101101\", \"11101110\", \"11101111\",\n    \"11110000\", \"11110001\", \"11110010\",\n    \"11110011\", \"11110100\", \"11110101\",\n    \"11110110\", \"11110111\", \"11111000\",\n    \"11111001\", \"11111010\", \"11111011\",\n    \"11111100\", \"11111101\", \"11111110\",\n    \"11111111\"\n];\n", "import { bitsToStringArray } from \"./bit\";\nimport { ByteStream } from \"./byte_stream\";\nexport class BitStream {\n    constructor(parameters) {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n        if (parameters) {\n            if (\"byteStream\" in parameters) {\n                this.fromByteStream(parameters.byteStream);\n            }\n            if (\"view\" in parameters) {\n                this.fromUint8Array(parameters.view);\n            }\n            if (\"buffer\" in parameters) {\n                this.fromArrayBuffer(parameters.buffer);\n            }\n            if (\"string\" in parameters) {\n                this.fromString(parameters.string);\n            }\n            if (\"uint32\" in parameters) {\n                this.fromUint32(parameters.uint32);\n            }\n            if (\"bitsCount\" in parameters && parameters.bitsCount) {\n                this.bitsCount = parameters.bitsCount;\n            }\n        }\n    }\n    clear() {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n    }\n    fromByteStream(stream) {\n        this.fromUint8Array(stream.view);\n    }\n    fromArrayBuffer(array) {\n        this.buffer = array;\n        this.view = new Uint8Array(array);\n        this.bitsCount = this.view.length << 3;\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.buffer = new ArrayBuffer((stringLength >> 3) + ((stringLength % 8) ? 1 : 0));\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = ((stringLength >> 3) + 1) << 3;\n        let byteIndex = 0;\n        for (let i = 0; i < stringLength; i++) {\n            if (string[i] == \"1\")\n                this.view[byteIndex] |= 1 << (7 - (i % 8));\n            if (i && (((i + 1) % 8) == 0))\n                byteIndex++;\n        }\n        if (stringLength % 8)\n            this.shiftRight(8 - (stringLength % 8));\n        this.bitsCount = stringLength;\n    }\n    fromUint32(uint32) {\n        this.buffer = new ArrayBuffer(4);\n        this.view = new Uint8Array(this.buffer);\n        const value = new Uint32Array([uint32]);\n        const view = new Uint8Array(value.buffer);\n        for (let i = 3; i >= 0; i--)\n            this.view[i] = view[3 - i];\n        this.bitsCount = 32;\n    }\n    toString(start, length) {\n        if (start == null) {\n            start = 0;\n        }\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if (length == null) {\n            length = this.view.length - start;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        const result = [];\n        for (let i = start; i < (start + length); i++) {\n            result.push(bitsToStringArray[this.view[i]]);\n        }\n        return result.join(\"\").substring((this.view.length << 3) - this.bitsCount);\n    }\n    shiftRight(shift, needShrink = true) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const shiftMask = 0xFF >> (8 - shift);\n        this.view[this.view.length - 1] >>= shift;\n        for (let i = (this.view.length - 2); i >= 0; i--) {\n            this.view[i + 1] |= (this.view[i] & shiftMask) << (8 - shift);\n            this.view[i] >>= shift;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n        if (needShrink) {\n            this.shrink();\n        }\n    }\n    shiftLeft(shift) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const bitsOffset = this.bitsCount & 0x07;\n        if (bitsOffset > shift) {\n            this.view[0] &= 0xFF >> (bitsOffset + shift);\n        }\n        else {\n            const view = this.view.slice(1);\n            view[0] &= 0xFF >> (shift - bitsOffset);\n            this.buffer = view.buffer;\n            this.view = view;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n    }\n    slice(start = 0, end = 0) {\n        let valueShift = 0;\n        if (this.bitsCount % 8) {\n            valueShift = (8 - (this.bitsCount % 8));\n        }\n        start += valueShift;\n        end += valueShift;\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!end) {\n            end = maxEnd;\n        }\n        if ((end < 0) || (end > maxEnd)) {\n            return new BitStream();\n        }\n        if ((end - start + 1) > this.bitsCount) {\n            return new BitStream();\n        }\n        const startIndex = start >> 3;\n        const startOffset = start & 0x07;\n        const endIndex = end >> 3;\n        const endOffset = end & 0x07;\n        const bitsLength = ((endIndex - startIndex) == 0) ? 1 : (endIndex - startIndex + 1);\n        const result = new BitStream({\n            buffer: this.buffer.slice(startIndex, startIndex + bitsLength),\n            bitsCount: bitsLength << 3,\n        });\n        result.view[0] &= (0xFF >> startOffset);\n        result.view[bitsLength] &= (0xFF << (7 - endOffset));\n        if (7 - endOffset) {\n            result.shiftRight(7 - endOffset, false);\n        }\n        result.bitsCount = (end - start + 1);\n        result.shrink();\n        return result;\n    }\n    copy(start = 0, length = 0) {\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!length) {\n            length = (this.view.length << 3) - start - 1;\n        }\n        if (length > this.bitsCount) {\n            return new BitStream();\n        }\n        return this.slice(start, start + length - 1);\n    }\n    shrink() {\n        const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n        if (currentLength < this.view.length) {\n            const view = this.view.slice(this.view.length - currentLength, (this.view.length - currentLength) + currentLength);\n            this.view = view;\n            this.buffer = view.buffer;\n        }\n    }\n    reverseBytes() {\n        for (let i = 0; i < this.view.length; i++) {\n            this.view[i] = ((this.view[i] * 0x0802 & 0x22110) | (this.view[i] * 0x8020 & 0x88440)) * 0x10101 >> 16;\n        }\n        if (this.bitsCount % 8) {\n            const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n            this.view[this.view.length - currentLength] >>= (8 - (this.bitsCount & 0x07));\n        }\n    }\n    reverseValue() {\n        const initialValue = this.toString();\n        const initialValueLength = initialValue.length;\n        const reversedValue = new Array(initialValueLength);\n        for (let i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        this.fromString(reversedValue.join(\"\"));\n    }\n    getNumberValue() {\n        const byteLength = (this.view.length - 1);\n        if (byteLength > 3) {\n            return (-1);\n        }\n        if (byteLength == (-1)) {\n            return 0;\n        }\n        const value = new Uint32Array(1);\n        const view = new Uint8Array(value.buffer);\n        for (let i = byteLength; i >= 0; i--) {\n            view[byteLength - i] = this.view[i];\n        }\n        return value[0];\n    }\n    findPattern(pattern, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString(),\n        });\n        const stringPattern = new ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findPattern(stringPattern, start, length, backward);\n    }\n    findFirstIn(patterns, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString(),\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstIn(stringPatterns, start, length, backward);\n    }\n    findAllIn(patterns, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllIn(stringPatterns, start, length);\n    }\n    findAllPatternIn(pattern, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPattern = new ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findAllPatternIn(stringPattern, start, length);\n    }\n    findFirstNotIn(patterns, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstNotIn(stringPatterns, start, length, backward);\n    }\n    findAllNotIn(patterns, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllNotIn(stringPatterns, start, length);\n    }\n    findFirstSequence(patterns, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstSequence(stringPatterns, start, length, backward);\n    }\n    findAllSequences(patterns, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllSequences(stringPatterns, start, length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPattern = new ByteStream({\n            string: leftPattern.toString()\n        });\n        const stringRightPattern = new ByteStream({\n            string: rightPattern.toString()\n        });\n        return stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPatterns = new Array(inputLeftPatterns.length);\n        for (let i = 0; i < inputLeftPatterns.length; i++) {\n            stringLeftPatterns[i] = new ByteStream({\n                string: inputLeftPatterns[i].toString()\n            });\n        }\n        const stringRightPatterns = new Array(inputRightPatterns.length);\n        for (let i = 0; i < inputRightPatterns.length; i++) {\n            stringRightPatterns[i] = new ByteStream({\n                string: inputRightPatterns[i].toString()\n            });\n        }\n        return stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);\n    }\n    replacePattern(searchPattern, replacePattern, start, length) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringSearchPattern = new ByteStream({\n            string: searchPattern.toString()\n        });\n        const stringReplacePattern = new ByteStream({\n            string: replacePattern.toString()\n        });\n        if (stringStream.replacePattern(stringSearchPattern, stringReplacePattern, start, length)) {\n            this.fromString(stringStream.toString());\n            return true;\n        }\n        return false;\n    }\n    skipPatterns(patterns, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipPatterns(stringPatterns, start, length, backward);\n    }\n    skipNotPatterns(patterns, start, length, backward) {\n        const stringStream = new ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipNotPatterns(stringPatterns, start, length, backward);\n    }\n    append(stream) {\n        this.fromString([\n            this.toString(),\n            stream.toString()\n        ].join(\"\"));\n    }\n}\n", "import { BitStream } from \"./bit_stream\";\nexport class SeqBitStream {\n    constructor(parameters = {}) {\n        var _a;\n        this._length = 0;\n        this._start = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        this.stream = ((_a = parameters.stream) === null || _a === void 0 ? void 0 : _a.slice()) || new BitStream();\n        this.appendBlock = parameters.appendBlock || 0;\n        if (parameters.start && parameters.start > 0) {\n            this.start = parameters.start;\n        }\n        if (parameters.length && parameters.length > 0) {\n            this.length = parameters.length;\n        }\n        this.backward = parameters.backward || false;\n    }\n    set start(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this._length -= ((this.backward) ? (this._start - value) : (value - this._start));\n        this._start = value;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n    }\n    get start() {\n        return this._start;\n    }\n    set length(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        return this._length;\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.bitsCount;\n        this.prevStart = this._start;\n        this._start = (this.backward) ? this.length : 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    getBits(length = null) {\n        if (length === null) {\n            length = 0;\n        }\n        else if (length === 0) {\n            return new BitStream();\n        }\n        if ((this.start + length) > this.stream.bitsCount) {\n            length = (this.stream.bitsCount - this.start);\n        }\n        let result;\n        if (this.backward) {\n            result = this.stream.copy(this.start - length, length);\n            this.start -= result.bitsCount;\n        }\n        else {\n            result = this.stream.copy(this.start, length);\n            this.start += result.bitsCount;\n        }\n        return result;\n    }\n    getBitsString(length) {\n        return this.getBits(length).toString();\n    }\n    getBitsReversedValue(length) {\n        const initialValue = this.getBitsString(length);\n        const initialValueLength = initialValue.length;\n        let byteIndex;\n        const initialOffset = 8 - (initialValueLength % 8);\n        const reversedValue = new Array(initialValueLength);\n        const value = new Uint32Array(1);\n        const valueView = new Uint8Array(value.buffer, 0, 4);\n        let i;\n        if (initialValueLength > 32) {\n            return (-1);\n        }\n        if (length == 32) {\n            byteIndex = 3;\n        }\n        else {\n            byteIndex = ((initialValueLength - 1) >> 3);\n        }\n        for (i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        for (i = initialOffset; i < (initialOffset + initialValueLength); i++) {\n            if (reversedValue[i - initialOffset] == \"1\") {\n                valueView[byteIndex] |= 0x01 << (7 - (i % 8));\n            }\n            if (i && (((i + 1) % 8) == 0)) {\n                byteIndex--;\n            }\n        }\n        return value[0];\n    }\n    toString() {\n        const streamToDisplay = this.stream.copy(this.start, this.length);\n        return streamToDisplay.toString();\n    }\n}\n", "export * from \"./byte_stream\";\nexport * from \"./seq_stream\";\nexport * from \"./helpers\";\nexport * from \"./bit_stream\";\nexport * from \"./seq_bit_stream\";\n"],
  "mappings": "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MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,MAAY;AAAA,MAAY;AAAA,MACxB;AAAA,M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",
  "names": []
}
